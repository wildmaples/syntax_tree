var search_data = {"index":{"searchIndex":["prettyprint","align","breakparent","breakable","buffer","arraybuffer","defaultbuffer","stringbuffer","group","ifbreak","ifbreakbuilder","indent","indentlevel","linesuffix","singleline","ifbreakbuilder","text","trim","syntaxtree","aref","areffield","alias","aliasargumentformatter","argblock","argparen","argstar","args","argsforward","arrayliteral","qsymbolsformatter","qwordsformatter","varrefsformatter","aryptn","restformatter","assign","assignformatting","assoc","assocsplat","beginblock","backref","backtick","bareassochash","begin","binary","blockarg","blockformatter","blockopenformatter","blockvar","bodystmt","braceblock","break","char","cli","ast","action","check","unformattederror","color","debug","nonidempotentformaterror","doc","format","write","cvar","call","calloperatorformatter","case","classdeclaration","comma","command","commandcall","comment","list","conditionalformatter","conditionalmodformatter","const","constpathfield","constpathref","constref","containsassignment","def","defendless","defined","defs","doblock","dot2","dot3","dotformatter","dynasymbol","endblock","else","elsif","embdoc","embexprbeg","embexprend","embvar","endcontent","ensure","excessedcomma","fcall","field","floatliteral","flowcontrolformatter","fndptn","for","formatter","gvar","hashkeyformatter","labels","rockets","hashliteral","heredoc","heredocbeg","hshptn","keywordformatter","keywordrestformatter","ivar","ident","if","ifmod","ifop","imaginary","in","int","kw","kwrestparam","lbrace","lbracket","lparen","label","labelend","lambda","languageserver","inlayhints","location","loopformatter","massign","mlhs","mlhsparen","mrhs","methodaddblock","moduledeclaration","next","node","not","op","opassign","params","keywordformatter","keywordrestformatter","optionalformatter","paren","parentheses","parser","multibytestring","parseerror","singlebytestring","period","pinnedbegin","pinnedvarref","program","qsymbols","qsymbolsbeg","qwords","qwordsbeg","quotes","rassign","rbrace","rbracket","rparen","rationalliteral","redo","regexpbeg","regexpcontent","regexpend","regexpliteral","removebreaks","rescue","rescueex","rescuemod","restparam","retry","return","return0","sclass","statements","stringconcat","stringcontent","stringdvar","stringembexpr","stringliteral","super","symbeg","symbolcontent","symbolliteral","symbols","symbolsbeg","tlambeg","tlambda","tstringbeg","tstringcontent","tstringend","topconstfield","topconstref","unary","undef","undefargumentformatter","unless","unlessmod","until","untilmod","vcall","varalias","varfield","varref","visitor","visitmethodchecker","visitmethoderror","voidstmt","when","while","whilemod","word","words","wordsbeg","xstring","xstringliteral","yield","yield0","zsuper","<<()","==()","[]()","[]()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","add()","align()","bare_rescue()","bind()","bind()","bind_end()","bind_end()","bold()","break()","break()","break?()","break_parent()","break_parent()","breakable()","breakable()","call()","call()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","comments()","comments()","comments()","comments()","comments()","comments()","comments()","comments()","comments()","comments()","comments()","comments()","corrections()","current_group()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","empty?()","empty?()","empty?()","failure()","failure()","failure()","fill_breakable()","fill_breakable()","find()","fixed()","flat()","flush()","flush()","for()","for()","force?()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format_each()","format_key()","format_key()","format_key()","format_key()","gray()","group()","group()","if_break()","if_break()","if_flat()","if_flat()","ignore?()","ignore?()","indent()","indent()","indent()","indent?()","inline?()","leading!()","leading?()","line_suffix()","line_suffix()","lines()","locked?()","match?()","match?()","matching()","missing_hash_value()","nest()","nest()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","normalize()","parent()","parents()","parse()","precedence_parentheses()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","read()","red()","register_handler()","run()","run()","run()","run()","run()","run()","run()","run()","run()","singleline_format()","skip_indent?()","success()","success()","success()","text()","text()","to()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_s()","token()","trailing!()","trailing?()","trim()","trim()","trim!()","trim!()","trim!()","visit()","visit_begin()","visit_char()","visit_end()","visit___end__()","visit_alias()","visit_all()","visit_aref()","visit_aref_field()","visit_arg_block()","visit_arg_paren()","visit_arg_star()","visit_args()","visit_args_forward()","visit_array()","visit_aryptn()","visit_assign()","visit_assoc()","visit_assoc_splat()","visit_backref()","visit_backtick()","visit_bare_assoc_hash()","visit_begin()","visit_binary()","visit_block_arg()","visit_block_var()","visit_bodystmt()","visit_brace_block()","visit_break()","visit_call()","visit_case()","visit_child_nodes()","visit_class()","visit_comma()","visit_command()","visit_command_call()","visit_comment()","visit_const()","visit_const_path_field()","visit_const_path_ref()","visit_const_ref()","visit_cvar()","visit_def()","visit_def_endless()","visit_defined()","visit_defs()","visit_do_block()","visit_dot2()","visit_dot3()","visit_dyna_symbol()","visit_else()","visit_elsif()","visit_embdoc()","visit_embexpr_beg()","visit_embexpr_end()","visit_embvar()","visit_ensure()","visit_excessed_comma()","visit_fcall()","visit_field()","visit_float()","visit_fndptn()","visit_for()","visit_gvar()","visit_hash()","visit_heredoc()","visit_heredoc_beg()","visit_hshptn()","visit_ident()","visit_if()","visit_if_mod()","visit_if_op()","visit_imaginary()","visit_in()","visit_int()","visit_ivar()","visit_kw()","visit_kwrest_param()","visit_label()","visit_label_end()","visit_lambda()","visit_lbrace()","visit_lbracket()","visit_lparen()","visit_massign()","visit_method()","visit_method_add_block()","visit_methods()","visit_mlhs()","visit_mlhs_paren()","visit_module()","visit_mrhs()","visit_next()","visit_not()","visit_op()","visit_op_assign()","visit_params()","visit_paren()","visit_period()","visit_pinned_begin()","visit_pinned_var_ref()","visit_program()","visit_qsymbols()","visit_qsymbols_beg()","visit_qwords()","visit_qwords_beg()","visit_rassign()","visit_rational()","visit_rbrace()","visit_rbracket()","visit_redo()","visit_regexp_beg()","visit_regexp_content()","visit_regexp_end()","visit_regexp_literal()","visit_rescue()","visit_rescue_ex()","visit_rescue_mod()","visit_rest_param()","visit_retry()","visit_return()","visit_return0()","visit_rparen()","visit_sclass()","visit_statements()","visit_string_concat()","visit_string_content()","visit_string_dvar()","visit_string_embexpr()","visit_string_literal()","visit_super()","visit_sym_beg()","visit_symbol_content()","visit_symbol_literal()","visit_symbols()","visit_symbols_beg()","visit_tlambda()","visit_tlambeg()","visit_top_const_field()","visit_top_const_ref()","visit_tstring_beg()","visit_tstring_content()","visit_tstring_end()","visit_unary()","visit_undef()","visit_unless()","visit_unless_mod()","visit_until()","visit_until_mod()","visit_var_alias()","visit_var_field()","visit_var_ref()","visit_vcall()","visit_void_stmt()","visit_when()","visit_while()","visit_while_mod()","visit_word()","visit_words()","visit_words_beg()","visit_xstring()","visit_xstring_literal()","visit_yield()","visit_yield0()","visit_zsuper()","with_target()","yellow()","changelog","code_of_conduct","license","readme"],"longSearchIndex":["prettyprint","prettyprint::align","prettyprint::breakparent","prettyprint::breakable","prettyprint::buffer","prettyprint::buffer::arraybuffer","prettyprint::buffer::defaultbuffer","prettyprint::buffer::stringbuffer","prettyprint::group","prettyprint::ifbreak","prettyprint::ifbreakbuilder","prettyprint::indent","prettyprint::indentlevel","prettyprint::linesuffix","prettyprint::singleline","prettyprint::singleline::ifbreakbuilder","prettyprint::text","prettyprint::trim","syntaxtree","syntaxtree::aref","syntaxtree::areffield","syntaxtree::alias","syntaxtree::alias::aliasargumentformatter","syntaxtree::argblock","syntaxtree::argparen","syntaxtree::argstar","syntaxtree::args","syntaxtree::argsforward","syntaxtree::arrayliteral","syntaxtree::arrayliteral::qsymbolsformatter","syntaxtree::arrayliteral::qwordsformatter","syntaxtree::arrayliteral::varrefsformatter","syntaxtree::aryptn","syntaxtree::aryptn::restformatter","syntaxtree::assign","syntaxtree::assignformatting","syntaxtree::assoc","syntaxtree::assocsplat","syntaxtree::beginblock","syntaxtree::backref","syntaxtree::backtick","syntaxtree::bareassochash","syntaxtree::begin","syntaxtree::binary","syntaxtree::blockarg","syntaxtree::blockformatter","syntaxtree::blockformatter::blockopenformatter","syntaxtree::blockvar","syntaxtree::bodystmt","syntaxtree::braceblock","syntaxtree::break","syntaxtree::char","syntaxtree::cli","syntaxtree::cli::ast","syntaxtree::cli::action","syntaxtree::cli::check","syntaxtree::cli::check::unformattederror","syntaxtree::cli::color","syntaxtree::cli::debug","syntaxtree::cli::debug::nonidempotentformaterror","syntaxtree::cli::doc","syntaxtree::cli::format","syntaxtree::cli::write","syntaxtree::cvar","syntaxtree::call","syntaxtree::calloperatorformatter","syntaxtree::case","syntaxtree::classdeclaration","syntaxtree::comma","syntaxtree::command","syntaxtree::commandcall","syntaxtree::comment","syntaxtree::comment::list","syntaxtree::conditionalformatter","syntaxtree::conditionalmodformatter","syntaxtree::const","syntaxtree::constpathfield","syntaxtree::constpathref","syntaxtree::constref","syntaxtree::containsassignment","syntaxtree::def","syntaxtree::defendless","syntaxtree::defined","syntaxtree::defs","syntaxtree::doblock","syntaxtree::dot2","syntaxtree::dot3","syntaxtree::dotformatter","syntaxtree::dynasymbol","syntaxtree::endblock","syntaxtree::else","syntaxtree::elsif","syntaxtree::embdoc","syntaxtree::embexprbeg","syntaxtree::embexprend","syntaxtree::embvar","syntaxtree::endcontent","syntaxtree::ensure","syntaxtree::excessedcomma","syntaxtree::fcall","syntaxtree::field","syntaxtree::floatliteral","syntaxtree::flowcontrolformatter","syntaxtree::fndptn","syntaxtree::for","syntaxtree::formatter","syntaxtree::gvar","syntaxtree::hashkeyformatter","syntaxtree::hashkeyformatter::labels","syntaxtree::hashkeyformatter::rockets","syntaxtree::hashliteral","syntaxtree::heredoc","syntaxtree::heredocbeg","syntaxtree::hshptn","syntaxtree::hshptn::keywordformatter","syntaxtree::hshptn::keywordrestformatter","syntaxtree::ivar","syntaxtree::ident","syntaxtree::if","syntaxtree::ifmod","syntaxtree::ifop","syntaxtree::imaginary","syntaxtree::in","syntaxtree::int","syntaxtree::kw","syntaxtree::kwrestparam","syntaxtree::lbrace","syntaxtree::lbracket","syntaxtree::lparen","syntaxtree::label","syntaxtree::labelend","syntaxtree::lambda","syntaxtree::languageserver","syntaxtree::languageserver::inlayhints","syntaxtree::location","syntaxtree::loopformatter","syntaxtree::massign","syntaxtree::mlhs","syntaxtree::mlhsparen","syntaxtree::mrhs","syntaxtree::methodaddblock","syntaxtree::moduledeclaration","syntaxtree::next","syntaxtree::node","syntaxtree::not","syntaxtree::op","syntaxtree::opassign","syntaxtree::params","syntaxtree::params::keywordformatter","syntaxtree::params::keywordrestformatter","syntaxtree::params::optionalformatter","syntaxtree::paren","syntaxtree::parentheses","syntaxtree::parser","syntaxtree::parser::multibytestring","syntaxtree::parser::parseerror","syntaxtree::parser::singlebytestring","syntaxtree::period","syntaxtree::pinnedbegin","syntaxtree::pinnedvarref","syntaxtree::program","syntaxtree::qsymbols","syntaxtree::qsymbolsbeg","syntaxtree::qwords","syntaxtree::qwordsbeg","syntaxtree::quotes","syntaxtree::rassign","syntaxtree::rbrace","syntaxtree::rbracket","syntaxtree::rparen","syntaxtree::rationalliteral","syntaxtree::redo","syntaxtree::regexpbeg","syntaxtree::regexpcontent","syntaxtree::regexpend","syntaxtree::regexpliteral","syntaxtree::removebreaks","syntaxtree::rescue","syntaxtree::rescueex","syntaxtree::rescuemod","syntaxtree::restparam","syntaxtree::retry","syntaxtree::return","syntaxtree::return0","syntaxtree::sclass","syntaxtree::statements","syntaxtree::stringconcat","syntaxtree::stringcontent","syntaxtree::stringdvar","syntaxtree::stringembexpr","syntaxtree::stringliteral","syntaxtree::super","syntaxtree::symbeg","syntaxtree::symbolcontent","syntaxtree::symbolliteral","syntaxtree::symbols","syntaxtree::symbolsbeg","syntaxtree::tlambeg","syntaxtree::tlambda","syntaxtree::tstringbeg","syntaxtree::tstringcontent","syntaxtree::tstringend","syntaxtree::topconstfield","syntaxtree::topconstref","syntaxtree::unary","syntaxtree::undef","syntaxtree::undef::undefargumentformatter","syntaxtree::unless","syntaxtree::unlessmod","syntaxtree::until","syntaxtree::untilmod","syntaxtree::vcall","syntaxtree::varalias","syntaxtree::varfield","syntaxtree::varref","syntaxtree::visitor","syntaxtree::visitor::visitmethodchecker","syntaxtree::visitor::visitmethoderror","syntaxtree::voidstmt","syntaxtree::when","syntaxtree::while","syntaxtree::whilemod","syntaxtree::word","syntaxtree::words","syntaxtree::wordsbeg","syntaxtree::xstring","syntaxtree::xstringliteral","syntaxtree::yield","syntaxtree::yield0","syntaxtree::zsuper","prettyprint::buffer::defaultbuffer#<<()","syntaxtree::location#==()","syntaxtree::parser::multibytestring#[]()","syntaxtree::parser::singlebytestring#[]()","syntaxtree::aref#accept()","syntaxtree::areffield#accept()","syntaxtree::alias#accept()","syntaxtree::argblock#accept()","syntaxtree::argparen#accept()","syntaxtree::argstar#accept()","syntaxtree::args#accept()","syntaxtree::argsforward#accept()","syntaxtree::arrayliteral#accept()","syntaxtree::aryptn#accept()","syntaxtree::assign#accept()","syntaxtree::assoc#accept()","syntaxtree::assocsplat#accept()","syntaxtree::beginblock#accept()","syntaxtree::backref#accept()","syntaxtree::backtick#accept()","syntaxtree::bareassochash#accept()","syntaxtree::begin#accept()","syntaxtree::binary#accept()","syntaxtree::blockarg#accept()","syntaxtree::blockvar#accept()","syntaxtree::bodystmt#accept()","syntaxtree::braceblock#accept()","syntaxtree::break#accept()","syntaxtree::char#accept()","syntaxtree::cvar#accept()","syntaxtree::call#accept()","syntaxtree::case#accept()","syntaxtree::classdeclaration#accept()","syntaxtree::comma#accept()","syntaxtree::command#accept()","syntaxtree::commandcall#accept()","syntaxtree::comment#accept()","syntaxtree::const#accept()","syntaxtree::constpathfield#accept()","syntaxtree::constpathref#accept()","syntaxtree::constref#accept()","syntaxtree::def#accept()","syntaxtree::defendless#accept()","syntaxtree::defined#accept()","syntaxtree::defs#accept()","syntaxtree::doblock#accept()","syntaxtree::dot2#accept()","syntaxtree::dot3#accept()","syntaxtree::dynasymbol#accept()","syntaxtree::endblock#accept()","syntaxtree::else#accept()","syntaxtree::elsif#accept()","syntaxtree::embdoc#accept()","syntaxtree::embexprbeg#accept()","syntaxtree::embexprend#accept()","syntaxtree::embvar#accept()","syntaxtree::endcontent#accept()","syntaxtree::ensure#accept()","syntaxtree::excessedcomma#accept()","syntaxtree::fcall#accept()","syntaxtree::field#accept()","syntaxtree::floatliteral#accept()","syntaxtree::fndptn#accept()","syntaxtree::for#accept()","syntaxtree::gvar#accept()","syntaxtree::hashliteral#accept()","syntaxtree::heredoc#accept()","syntaxtree::heredocbeg#accept()","syntaxtree::hshptn#accept()","syntaxtree::ivar#accept()","syntaxtree::ident#accept()","syntaxtree::if#accept()","syntaxtree::ifmod#accept()","syntaxtree::ifop#accept()","syntaxtree::imaginary#accept()","syntaxtree::in#accept()","syntaxtree::int#accept()","syntaxtree::kw#accept()","syntaxtree::kwrestparam#accept()","syntaxtree::lbrace#accept()","syntaxtree::lbracket#accept()","syntaxtree::lparen#accept()","syntaxtree::label#accept()","syntaxtree::labelend#accept()","syntaxtree::lambda#accept()","syntaxtree::massign#accept()","syntaxtree::mlhs#accept()","syntaxtree::mlhsparen#accept()","syntaxtree::mrhs#accept()","syntaxtree::methodaddblock#accept()","syntaxtree::moduledeclaration#accept()","syntaxtree::next#accept()","syntaxtree::node#accept()","syntaxtree::not#accept()","syntaxtree::op#accept()","syntaxtree::opassign#accept()","syntaxtree::params#accept()","syntaxtree::paren#accept()","syntaxtree::period#accept()","syntaxtree::pinnedbegin#accept()","syntaxtree::pinnedvarref#accept()","syntaxtree::program#accept()","syntaxtree::qsymbols#accept()","syntaxtree::qsymbolsbeg#accept()","syntaxtree::qwords#accept()","syntaxtree::qwordsbeg#accept()","syntaxtree::rassign#accept()","syntaxtree::rbrace#accept()","syntaxtree::rbracket#accept()","syntaxtree::rparen#accept()","syntaxtree::rationalliteral#accept()","syntaxtree::redo#accept()","syntaxtree::regexpbeg#accept()","syntaxtree::regexpcontent#accept()","syntaxtree::regexpend#accept()","syntaxtree::regexpliteral#accept()","syntaxtree::rescue#accept()","syntaxtree::rescueex#accept()","syntaxtree::rescuemod#accept()","syntaxtree::restparam#accept()","syntaxtree::retry#accept()","syntaxtree::return#accept()","syntaxtree::return0#accept()","syntaxtree::sclass#accept()","syntaxtree::statements#accept()","syntaxtree::stringconcat#accept()","syntaxtree::stringcontent#accept()","syntaxtree::stringdvar#accept()","syntaxtree::stringembexpr#accept()","syntaxtree::stringliteral#accept()","syntaxtree::super#accept()","syntaxtree::symbeg#accept()","syntaxtree::symbolcontent#accept()","syntaxtree::symbolliteral#accept()","syntaxtree::symbols#accept()","syntaxtree::symbolsbeg#accept()","syntaxtree::tlambeg#accept()","syntaxtree::tlambda#accept()","syntaxtree::tstringbeg#accept()","syntaxtree::tstringcontent#accept()","syntaxtree::tstringend#accept()","syntaxtree::topconstfield#accept()","syntaxtree::topconstref#accept()","syntaxtree::unary#accept()","syntaxtree::undef#accept()","syntaxtree::unless#accept()","syntaxtree::unlessmod#accept()","syntaxtree::until#accept()","syntaxtree::untilmod#accept()","syntaxtree::vcall#accept()","syntaxtree::varalias#accept()","syntaxtree::varfield#accept()","syntaxtree::varref#accept()","syntaxtree::voidstmt#accept()","syntaxtree::when#accept()","syntaxtree::while#accept()","syntaxtree::whilemod#accept()","syntaxtree::word#accept()","syntaxtree::words#accept()","syntaxtree::wordsbeg#accept()","syntaxtree::xstring#accept()","syntaxtree::xstringliteral#accept()","syntaxtree::yield#accept()","syntaxtree::yield0#accept()","syntaxtree::zsuper#accept()","prettyprint::text#add()","prettyprint::indentlevel#align()","syntaxtree::languageserver::inlayhints#bare_rescue()","syntaxtree::bodystmt#bind()","syntaxtree::statements#bind()","syntaxtree::rescue#bind_end()","syntaxtree::statements#bind_end()","syntaxtree::cli::color::bold()","prettyprint::group#break()","syntaxtree::parentheses::break()","prettyprint::group#break?()","prettyprint#break_parent()","prettyprint::singleline#break_parent()","prettyprint#breakable()","prettyprint::singleline#breakable()","syntaxtree::containsassignment::call()","syntaxtree::removebreaks::call()","syntaxtree::aref#child_nodes()","syntaxtree::areffield#child_nodes()","syntaxtree::alias#child_nodes()","syntaxtree::argblock#child_nodes()","syntaxtree::argparen#child_nodes()","syntaxtree::argstar#child_nodes()","syntaxtree::args#child_nodes()","syntaxtree::argsforward#child_nodes()","syntaxtree::arrayliteral#child_nodes()","syntaxtree::aryptn#child_nodes()","syntaxtree::assign#child_nodes()","syntaxtree::assoc#child_nodes()","syntaxtree::assocsplat#child_nodes()","syntaxtree::beginblock#child_nodes()","syntaxtree::backref#child_nodes()","syntaxtree::backtick#child_nodes()","syntaxtree::bareassochash#child_nodes()","syntaxtree::begin#child_nodes()","syntaxtree::binary#child_nodes()","syntaxtree::blockarg#child_nodes()","syntaxtree::blockvar#child_nodes()","syntaxtree::bodystmt#child_nodes()","syntaxtree::braceblock#child_nodes()","syntaxtree::break#child_nodes()","syntaxtree::char#child_nodes()","syntaxtree::cvar#child_nodes()","syntaxtree::call#child_nodes()","syntaxtree::case#child_nodes()","syntaxtree::classdeclaration#child_nodes()","syntaxtree::command#child_nodes()","syntaxtree::commandcall#child_nodes()","syntaxtree::comment#child_nodes()","syntaxtree::const#child_nodes()","syntaxtree::constpathfield#child_nodes()","syntaxtree::constpathref#child_nodes()","syntaxtree::constref#child_nodes()","syntaxtree::def#child_nodes()","syntaxtree::defendless#child_nodes()","syntaxtree::defined#child_nodes()","syntaxtree::defs#child_nodes()","syntaxtree::doblock#child_nodes()","syntaxtree::dot2#child_nodes()","syntaxtree::dot3#child_nodes()","syntaxtree::dynasymbol#child_nodes()","syntaxtree::endblock#child_nodes()","syntaxtree::else#child_nodes()","syntaxtree::elsif#child_nodes()","syntaxtree::embdoc#child_nodes()","syntaxtree::endcontent#child_nodes()","syntaxtree::ensure#child_nodes()","syntaxtree::excessedcomma#child_nodes()","syntaxtree::fcall#child_nodes()","syntaxtree::field#child_nodes()","syntaxtree::floatliteral#child_nodes()","syntaxtree::fndptn#child_nodes()","syntaxtree::for#child_nodes()","syntaxtree::gvar#child_nodes()","syntaxtree::hashliteral#child_nodes()","syntaxtree::heredoc#child_nodes()","syntaxtree::heredocbeg#child_nodes()","syntaxtree::hshptn#child_nodes()","syntaxtree::ivar#child_nodes()","syntaxtree::ident#child_nodes()","syntaxtree::if#child_nodes()","syntaxtree::ifmod#child_nodes()","syntaxtree::ifop#child_nodes()","syntaxtree::imaginary#child_nodes()","syntaxtree::in#child_nodes()","syntaxtree::int#child_nodes()","syntaxtree::kw#child_nodes()","syntaxtree::kwrestparam#child_nodes()","syntaxtree::lbrace#child_nodes()","syntaxtree::lbracket#child_nodes()","syntaxtree::lparen#child_nodes()","syntaxtree::label#child_nodes()","syntaxtree::lambda#child_nodes()","syntaxtree::massign#child_nodes()","syntaxtree::mlhs#child_nodes()","syntaxtree::mlhsparen#child_nodes()","syntaxtree::mrhs#child_nodes()","syntaxtree::methodaddblock#child_nodes()","syntaxtree::moduledeclaration#child_nodes()","syntaxtree::next#child_nodes()","syntaxtree::node#child_nodes()","syntaxtree::not#child_nodes()","syntaxtree::op#child_nodes()","syntaxtree::opassign#child_nodes()","syntaxtree::params#child_nodes()","syntaxtree::paren#child_nodes()","syntaxtree::period#child_nodes()","syntaxtree::pinnedbegin#child_nodes()","syntaxtree::pinnedvarref#child_nodes()","syntaxtree::program#child_nodes()","syntaxtree::qsymbols#child_nodes()","syntaxtree::qwords#child_nodes()","syntaxtree::rassign#child_nodes()","syntaxtree::rationalliteral#child_nodes()","syntaxtree::redo#child_nodes()","syntaxtree::regexpliteral#child_nodes()","syntaxtree::rescue#child_nodes()","syntaxtree::rescueex#child_nodes()","syntaxtree::rescuemod#child_nodes()","syntaxtree::restparam#child_nodes()","syntaxtree::retry#child_nodes()","syntaxtree::return#child_nodes()","syntaxtree::return0#child_nodes()","syntaxtree::sclass#child_nodes()","syntaxtree::statements#child_nodes()","syntaxtree::stringconcat#child_nodes()","syntaxtree::stringdvar#child_nodes()","syntaxtree::stringembexpr#child_nodes()","syntaxtree::stringliteral#child_nodes()","syntaxtree::super#child_nodes()","syntaxtree::symbolliteral#child_nodes()","syntaxtree::symbols#child_nodes()","syntaxtree::tstringcontent#child_nodes()","syntaxtree::topconstfield#child_nodes()","syntaxtree::topconstref#child_nodes()","syntaxtree::unary#child_nodes()","syntaxtree::undef#child_nodes()","syntaxtree::unless#child_nodes()","syntaxtree::unlessmod#child_nodes()","syntaxtree::until#child_nodes()","syntaxtree::untilmod#child_nodes()","syntaxtree::vcall#child_nodes()","syntaxtree::varalias#child_nodes()","syntaxtree::varfield#child_nodes()","syntaxtree::varref#child_nodes()","syntaxtree::voidstmt#child_nodes()","syntaxtree::when#child_nodes()","syntaxtree::while#child_nodes()","syntaxtree::whilemod#child_nodes()","syntaxtree::word#child_nodes()","syntaxtree::words#child_nodes()","syntaxtree::xstringliteral#child_nodes()","syntaxtree::yield#child_nodes()","syntaxtree::yield0#child_nodes()","syntaxtree::zsuper#child_nodes()","syntaxtree::alias::aliasargumentformatter#comments()","syntaxtree::aryptn::restformatter#comments()","syntaxtree::blockformatter::blockopenformatter#comments()","syntaxtree::calloperatorformatter#comments()","syntaxtree::comment#comments()","syntaxtree::embdoc#comments()","syntaxtree::hshptn::keywordformatter#comments()","syntaxtree::hshptn::keywordrestformatter#comments()","syntaxtree::params::keywordformatter#comments()","syntaxtree::params::keywordrestformatter#comments()","syntaxtree::params::optionalformatter#comments()","syntaxtree::undef::undefargumentformatter#comments()","syntaxtree::visitor::visitmethodchecker#corrections()","prettyprint#current_group()","syntaxtree::aref#deconstruct()","syntaxtree::areffield#deconstruct()","syntaxtree::alias#deconstruct()","syntaxtree::argblock#deconstruct()","syntaxtree::argparen#deconstruct()","syntaxtree::argstar#deconstruct()","syntaxtree::args#deconstruct()","syntaxtree::argsforward#deconstruct()","syntaxtree::arrayliteral#deconstruct()","syntaxtree::aryptn#deconstruct()","syntaxtree::assign#deconstruct()","syntaxtree::assoc#deconstruct()","syntaxtree::assocsplat#deconstruct()","syntaxtree::beginblock#deconstruct()","syntaxtree::backref#deconstruct()","syntaxtree::backtick#deconstruct()","syntaxtree::bareassochash#deconstruct()","syntaxtree::begin#deconstruct()","syntaxtree::binary#deconstruct()","syntaxtree::blockarg#deconstruct()","syntaxtree::blockvar#deconstruct()","syntaxtree::bodystmt#deconstruct()","syntaxtree::braceblock#deconstruct()","syntaxtree::break#deconstruct()","syntaxtree::char#deconstruct()","syntaxtree::cvar#deconstruct()","syntaxtree::call#deconstruct()","syntaxtree::case#deconstruct()","syntaxtree::classdeclaration#deconstruct()","syntaxtree::command#deconstruct()","syntaxtree::commandcall#deconstruct()","syntaxtree::comment#deconstruct()","syntaxtree::const#deconstruct()","syntaxtree::constpathfield#deconstruct()","syntaxtree::constpathref#deconstruct()","syntaxtree::constref#deconstruct()","syntaxtree::def#deconstruct()","syntaxtree::defendless#deconstruct()","syntaxtree::defined#deconstruct()","syntaxtree::defs#deconstruct()","syntaxtree::doblock#deconstruct()","syntaxtree::dot2#deconstruct()","syntaxtree::dot3#deconstruct()","syntaxtree::dynasymbol#deconstruct()","syntaxtree::endblock#deconstruct()","syntaxtree::else#deconstruct()","syntaxtree::elsif#deconstruct()","syntaxtree::embdoc#deconstruct()","syntaxtree::endcontent#deconstruct()","syntaxtree::ensure#deconstruct()","syntaxtree::excessedcomma#deconstruct()","syntaxtree::fcall#deconstruct()","syntaxtree::field#deconstruct()","syntaxtree::floatliteral#deconstruct()","syntaxtree::fndptn#deconstruct()","syntaxtree::for#deconstruct()","syntaxtree::gvar#deconstruct()","syntaxtree::hashliteral#deconstruct()","syntaxtree::heredoc#deconstruct()","syntaxtree::heredocbeg#deconstruct()","syntaxtree::hshptn#deconstruct()","syntaxtree::ivar#deconstruct()","syntaxtree::ident#deconstruct()","syntaxtree::if#deconstruct()","syntaxtree::ifmod#deconstruct()","syntaxtree::ifop#deconstruct()","syntaxtree::imaginary#deconstruct()","syntaxtree::in#deconstruct()","syntaxtree::int#deconstruct()","syntaxtree::kw#deconstruct()","syntaxtree::kwrestparam#deconstruct()","syntaxtree::lbrace#deconstruct()","syntaxtree::lbracket#deconstruct()","syntaxtree::lparen#deconstruct()","syntaxtree::label#deconstruct()","syntaxtree::lambda#deconstruct()","syntaxtree::massign#deconstruct()","syntaxtree::mlhs#deconstruct()","syntaxtree::mlhsparen#deconstruct()","syntaxtree::mrhs#deconstruct()","syntaxtree::methodaddblock#deconstruct()","syntaxtree::moduledeclaration#deconstruct()","syntaxtree::next#deconstruct()","syntaxtree::node#deconstruct()","syntaxtree::not#deconstruct()","syntaxtree::op#deconstruct()","syntaxtree::opassign#deconstruct()","syntaxtree::params#deconstruct()","syntaxtree::paren#deconstruct()","syntaxtree::period#deconstruct()","syntaxtree::pinnedbegin#deconstruct()","syntaxtree::pinnedvarref#deconstruct()","syntaxtree::program#deconstruct()","syntaxtree::qsymbols#deconstruct()","syntaxtree::qwords#deconstruct()","syntaxtree::rassign#deconstruct()","syntaxtree::rationalliteral#deconstruct()","syntaxtree::redo#deconstruct()","syntaxtree::regexpliteral#deconstruct()","syntaxtree::rescue#deconstruct()","syntaxtree::rescueex#deconstruct()","syntaxtree::rescuemod#deconstruct()","syntaxtree::restparam#deconstruct()","syntaxtree::retry#deconstruct()","syntaxtree::return#deconstruct()","syntaxtree::return0#deconstruct()","syntaxtree::sclass#deconstruct()","syntaxtree::statements#deconstruct()","syntaxtree::stringconcat#deconstruct()","syntaxtree::stringdvar#deconstruct()","syntaxtree::stringembexpr#deconstruct()","syntaxtree::stringliteral#deconstruct()","syntaxtree::super#deconstruct()","syntaxtree::symbolliteral#deconstruct()","syntaxtree::symbols#deconstruct()","syntaxtree::tstringcontent#deconstruct()","syntaxtree::topconstfield#deconstruct()","syntaxtree::topconstref#deconstruct()","syntaxtree::unary#deconstruct()","syntaxtree::undef#deconstruct()","syntaxtree::unless#deconstruct()","syntaxtree::unlessmod#deconstruct()","syntaxtree::until#deconstruct()","syntaxtree::untilmod#deconstruct()","syntaxtree::vcall#deconstruct()","syntaxtree::varalias#deconstruct()","syntaxtree::varfield#deconstruct()","syntaxtree::varref#deconstruct()","syntaxtree::voidstmt#deconstruct()","syntaxtree::when#deconstruct()","syntaxtree::while#deconstruct()","syntaxtree::whilemod#deconstruct()","syntaxtree::word#deconstruct()","syntaxtree::words#deconstruct()","syntaxtree::xstringliteral#deconstruct()","syntaxtree::yield#deconstruct()","syntaxtree::yield0#deconstruct()","syntaxtree::zsuper#deconstruct()","syntaxtree::aref#deconstruct_keys()","syntaxtree::areffield#deconstruct_keys()","syntaxtree::alias#deconstruct_keys()","syntaxtree::argblock#deconstruct_keys()","syntaxtree::argparen#deconstruct_keys()","syntaxtree::argstar#deconstruct_keys()","syntaxtree::args#deconstruct_keys()","syntaxtree::argsforward#deconstruct_keys()","syntaxtree::arrayliteral#deconstruct_keys()","syntaxtree::aryptn#deconstruct_keys()","syntaxtree::assign#deconstruct_keys()","syntaxtree::assoc#deconstruct_keys()","syntaxtree::assocsplat#deconstruct_keys()","syntaxtree::beginblock#deconstruct_keys()","syntaxtree::backref#deconstruct_keys()","syntaxtree::backtick#deconstruct_keys()","syntaxtree::bareassochash#deconstruct_keys()","syntaxtree::begin#deconstruct_keys()","syntaxtree::binary#deconstruct_keys()","syntaxtree::blockarg#deconstruct_keys()","syntaxtree::blockvar#deconstruct_keys()","syntaxtree::bodystmt#deconstruct_keys()","syntaxtree::braceblock#deconstruct_keys()","syntaxtree::break#deconstruct_keys()","syntaxtree::char#deconstruct_keys()","syntaxtree::cvar#deconstruct_keys()","syntaxtree::call#deconstruct_keys()","syntaxtree::case#deconstruct_keys()","syntaxtree::classdeclaration#deconstruct_keys()","syntaxtree::command#deconstruct_keys()","syntaxtree::commandcall#deconstruct_keys()","syntaxtree::comment#deconstruct_keys()","syntaxtree::const#deconstruct_keys()","syntaxtree::constpathfield#deconstruct_keys()","syntaxtree::constpathref#deconstruct_keys()","syntaxtree::constref#deconstruct_keys()","syntaxtree::def#deconstruct_keys()","syntaxtree::defendless#deconstruct_keys()","syntaxtree::defined#deconstruct_keys()","syntaxtree::defs#deconstruct_keys()","syntaxtree::doblock#deconstruct_keys()","syntaxtree::dot2#deconstruct_keys()","syntaxtree::dot3#deconstruct_keys()","syntaxtree::dynasymbol#deconstruct_keys()","syntaxtree::endblock#deconstruct_keys()","syntaxtree::else#deconstruct_keys()","syntaxtree::elsif#deconstruct_keys()","syntaxtree::embdoc#deconstruct_keys()","syntaxtree::endcontent#deconstruct_keys()","syntaxtree::ensure#deconstruct_keys()","syntaxtree::excessedcomma#deconstruct_keys()","syntaxtree::fcall#deconstruct_keys()","syntaxtree::field#deconstruct_keys()","syntaxtree::floatliteral#deconstruct_keys()","syntaxtree::fndptn#deconstruct_keys()","syntaxtree::for#deconstruct_keys()","syntaxtree::gvar#deconstruct_keys()","syntaxtree::hashliteral#deconstruct_keys()","syntaxtree::heredoc#deconstruct_keys()","syntaxtree::heredocbeg#deconstruct_keys()","syntaxtree::hshptn#deconstruct_keys()","syntaxtree::ivar#deconstruct_keys()","syntaxtree::ident#deconstruct_keys()","syntaxtree::if#deconstruct_keys()","syntaxtree::ifmod#deconstruct_keys()","syntaxtree::ifop#deconstruct_keys()","syntaxtree::imaginary#deconstruct_keys()","syntaxtree::in#deconstruct_keys()","syntaxtree::int#deconstruct_keys()","syntaxtree::kw#deconstruct_keys()","syntaxtree::kwrestparam#deconstruct_keys()","syntaxtree::lbrace#deconstruct_keys()","syntaxtree::lbracket#deconstruct_keys()","syntaxtree::lparen#deconstruct_keys()","syntaxtree::label#deconstruct_keys()","syntaxtree::lambda#deconstruct_keys()","syntaxtree::massign#deconstruct_keys()","syntaxtree::mlhs#deconstruct_keys()","syntaxtree::mlhsparen#deconstruct_keys()","syntaxtree::mrhs#deconstruct_keys()","syntaxtree::methodaddblock#deconstruct_keys()","syntaxtree::moduledeclaration#deconstruct_keys()","syntaxtree::next#deconstruct_keys()","syntaxtree::node#deconstruct_keys()","syntaxtree::not#deconstruct_keys()","syntaxtree::op#deconstruct_keys()","syntaxtree::opassign#deconstruct_keys()","syntaxtree::params#deconstruct_keys()","syntaxtree::paren#deconstruct_keys()","syntaxtree::period#deconstruct_keys()","syntaxtree::pinnedbegin#deconstruct_keys()","syntaxtree::pinnedvarref#deconstruct_keys()","syntaxtree::program#deconstruct_keys()","syntaxtree::qsymbols#deconstruct_keys()","syntaxtree::qwords#deconstruct_keys()","syntaxtree::rassign#deconstruct_keys()","syntaxtree::rationalliteral#deconstruct_keys()","syntaxtree::redo#deconstruct_keys()","syntaxtree::regexpliteral#deconstruct_keys()","syntaxtree::rescue#deconstruct_keys()","syntaxtree::rescueex#deconstruct_keys()","syntaxtree::rescuemod#deconstruct_keys()","syntaxtree::restparam#deconstruct_keys()","syntaxtree::retry#deconstruct_keys()","syntaxtree::return#deconstruct_keys()","syntaxtree::return0#deconstruct_keys()","syntaxtree::sclass#deconstruct_keys()","syntaxtree::statements#deconstruct_keys()","syntaxtree::stringconcat#deconstruct_keys()","syntaxtree::stringdvar#deconstruct_keys()","syntaxtree::stringembexpr#deconstruct_keys()","syntaxtree::stringliteral#deconstruct_keys()","syntaxtree::super#deconstruct_keys()","syntaxtree::symbolliteral#deconstruct_keys()","syntaxtree::symbols#deconstruct_keys()","syntaxtree::tstringcontent#deconstruct_keys()","syntaxtree::topconstfield#deconstruct_keys()","syntaxtree::topconstref#deconstruct_keys()","syntaxtree::unary#deconstruct_keys()","syntaxtree::undef#deconstruct_keys()","syntaxtree::unless#deconstruct_keys()","syntaxtree::unlessmod#deconstruct_keys()","syntaxtree::until#deconstruct_keys()","syntaxtree::untilmod#deconstruct_keys()","syntaxtree::vcall#deconstruct_keys()","syntaxtree::varalias#deconstruct_keys()","syntaxtree::varfield#deconstruct_keys()","syntaxtree::varref#deconstruct_keys()","syntaxtree::voidstmt#deconstruct_keys()","syntaxtree::when#deconstruct_keys()","syntaxtree::while#deconstruct_keys()","syntaxtree::whilemod#deconstruct_keys()","syntaxtree::word#deconstruct_keys()","syntaxtree::words#deconstruct_keys()","syntaxtree::xstringliteral#deconstruct_keys()","syntaxtree::yield#deconstruct_keys()","syntaxtree::yield0#deconstruct_keys()","syntaxtree::zsuper#deconstruct_keys()","syntaxtree::bodystmt#empty?()","syntaxtree::params#empty?()","syntaxtree::statements#empty?()","syntaxtree::cli::action#failure()","syntaxtree::cli::check#failure()","syntaxtree::cli::debug#failure()","prettyprint#fill_breakable()","prettyprint::singleline#fill_breakable()","syntaxtree::languageserver::inlayhints::find()","syntaxtree::location::fixed()","syntaxtree::parentheses::flat()","prettyprint#flush()","prettyprint::singleline#flush()","prettyprint::buffer::for()","syntaxtree::hashkeyformatter::for()","prettyprint::breakable#force?()","prettyprint::format()","syntaxtree::format()","syntaxtree::aref#format()","syntaxtree::areffield#format()","syntaxtree::alias#format()","syntaxtree::alias::aliasargumentformatter#format()","syntaxtree::argblock#format()","syntaxtree::argparen#format()","syntaxtree::argstar#format()","syntaxtree::args#format()","syntaxtree::argsforward#format()","syntaxtree::arrayliteral#format()","syntaxtree::arrayliteral::qsymbolsformatter#format()","syntaxtree::arrayliteral::qwordsformatter#format()","syntaxtree::arrayliteral::varrefsformatter#format()","syntaxtree::aryptn#format()","syntaxtree::aryptn::restformatter#format()","syntaxtree::assign#format()","syntaxtree::assoc#format()","syntaxtree::assocsplat#format()","syntaxtree::beginblock#format()","syntaxtree::backref#format()","syntaxtree::backtick#format()","syntaxtree::bareassochash#format()","syntaxtree::begin#format()","syntaxtree::binary#format()","syntaxtree::blockarg#format()","syntaxtree::blockformatter#format()","syntaxtree::blockformatter::blockopenformatter#format()","syntaxtree::blockvar#format()","syntaxtree::bodystmt#format()","syntaxtree::braceblock#format()","syntaxtree::break#format()","syntaxtree::char#format()","syntaxtree::cvar#format()","syntaxtree::call#format()","syntaxtree::calloperatorformatter#format()","syntaxtree::case#format()","syntaxtree::classdeclaration#format()","syntaxtree::command#format()","syntaxtree::commandcall#format()","syntaxtree::comment#format()","syntaxtree::conditionalformatter#format()","syntaxtree::conditionalmodformatter#format()","syntaxtree::const#format()","syntaxtree::constpathfield#format()","syntaxtree::constpathref#format()","syntaxtree::constref#format()","syntaxtree::def#format()","syntaxtree::defendless#format()","syntaxtree::defined#format()","syntaxtree::defs#format()","syntaxtree::doblock#format()","syntaxtree::dot2#format()","syntaxtree::dot3#format()","syntaxtree::dotformatter#format()","syntaxtree::dynasymbol#format()","syntaxtree::endblock#format()","syntaxtree::else#format()","syntaxtree::elsif#format()","syntaxtree::embdoc#format()","syntaxtree::endcontent#format()","syntaxtree::ensure#format()","syntaxtree::excessedcomma#format()","syntaxtree::fcall#format()","syntaxtree::field#format()","syntaxtree::floatliteral#format()","syntaxtree::flowcontrolformatter#format()","syntaxtree::fndptn#format()","syntaxtree::for#format()","syntaxtree::formatter#format()","syntaxtree::gvar#format()","syntaxtree::hashliteral#format()","syntaxtree::heredoc#format()","syntaxtree::heredocbeg#format()","syntaxtree::hshptn#format()","syntaxtree::hshptn::keywordformatter#format()","syntaxtree::hshptn::keywordrestformatter#format()","syntaxtree::ivar#format()","syntaxtree::ident#format()","syntaxtree::if#format()","syntaxtree::ifmod#format()","syntaxtree::ifop#format()","syntaxtree::imaginary#format()","syntaxtree::in#format()","syntaxtree::int#format()","syntaxtree::kw#format()","syntaxtree::kwrestparam#format()","syntaxtree::lbrace#format()","syntaxtree::lbracket#format()","syntaxtree::lparen#format()","syntaxtree::label#format()","syntaxtree::lambda#format()","syntaxtree::loopformatter#format()","syntaxtree::massign#format()","syntaxtree::mlhs#format()","syntaxtree::mlhsparen#format()","syntaxtree::mrhs#format()","syntaxtree::methodaddblock#format()","syntaxtree::moduledeclaration#format()","syntaxtree::next#format()","syntaxtree::node#format()","syntaxtree::not#format()","syntaxtree::op#format()","syntaxtree::opassign#format()","syntaxtree::params#format()","syntaxtree::params::keywordformatter#format()","syntaxtree::params::keywordrestformatter#format()","syntaxtree::params::optionalformatter#format()","syntaxtree::paren#format()","syntaxtree::period#format()","syntaxtree::pinnedbegin#format()","syntaxtree::pinnedvarref#format()","syntaxtree::program#format()","syntaxtree::qsymbols#format()","syntaxtree::qwords#format()","syntaxtree::rassign#format()","syntaxtree::rationalliteral#format()","syntaxtree::redo#format()","syntaxtree::regexpliteral#format()","syntaxtree::rescue#format()","syntaxtree::rescueex#format()","syntaxtree::rescuemod#format()","syntaxtree::restparam#format()","syntaxtree::retry#format()","syntaxtree::return#format()","syntaxtree::return0#format()","syntaxtree::sclass#format()","syntaxtree::statements#format()","syntaxtree::stringconcat#format()","syntaxtree::stringdvar#format()","syntaxtree::stringembexpr#format()","syntaxtree::stringliteral#format()","syntaxtree::super#format()","syntaxtree::symbolliteral#format()","syntaxtree::symbols#format()","syntaxtree::tstringcontent#format()","syntaxtree::topconstfield#format()","syntaxtree::topconstref#format()","syntaxtree::unary#format()","syntaxtree::undef#format()","syntaxtree::undef::undefargumentformatter#format()","syntaxtree::unless#format()","syntaxtree::unlessmod#format()","syntaxtree::until#format()","syntaxtree::untilmod#format()","syntaxtree::vcall#format()","syntaxtree::varalias#format()","syntaxtree::varfield#format()","syntaxtree::varref#format()","syntaxtree::voidstmt#format()","syntaxtree::when#format()","syntaxtree::while#format()","syntaxtree::whilemod#format()","syntaxtree::word#format()","syntaxtree::words#format()","syntaxtree::xstringliteral#format()","syntaxtree::yield#format()","syntaxtree::yield0#format()","syntaxtree::zsuper#format()","syntaxtree::formatter#format_each()","syntaxtree::bareassochash#format_key()","syntaxtree::hashkeyformatter::labels#format_key()","syntaxtree::hashkeyformatter::rockets#format_key()","syntaxtree::hashliteral#format_key()","syntaxtree::cli::color::gray()","prettyprint#group()","prettyprint::singleline#group()","prettyprint#if_break()","prettyprint::singleline#if_break()","prettyprint::ifbreakbuilder#if_flat()","prettyprint::singleline::ifbreakbuilder#if_flat()","syntaxtree::comment#ignore?()","syntaxtree::embdoc#ignore?()","prettyprint#indent()","prettyprint::indentlevel#indent()","prettyprint::singleline#indent()","prettyprint::breakable#indent?()","syntaxtree::embdoc#inline?()","syntaxtree::comment#leading!()","syntaxtree::comment#leading?()","prettyprint#line_suffix()","prettyprint::singleline#line_suffix()","syntaxtree::location#lines()","syntaxtree::quotes::locked?()","syntaxtree::tstringcontent#match?()","syntaxtree::word#match?()","syntaxtree::quotes::matching()","syntaxtree::languageserver::inlayhints#missing_hash_value()","prettyprint#nest()","prettyprint::singleline#nest()","prettyprint::new()","prettyprint::align::new()","prettyprint::breakable::new()","prettyprint::buffer::arraybuffer::new()","prettyprint::buffer::defaultbuffer::new()","prettyprint::buffer::stringbuffer::new()","prettyprint::group::new()","prettyprint::ifbreak::new()","prettyprint::ifbreakbuilder::new()","prettyprint::indent::new()","prettyprint::indentlevel::new()","prettyprint::linesuffix::new()","prettyprint::singleline::new()","prettyprint::text::new()","syntaxtree::aref::new()","syntaxtree::areffield::new()","syntaxtree::alias::new()","syntaxtree::alias::aliasargumentformatter::new()","syntaxtree::argblock::new()","syntaxtree::argparen::new()","syntaxtree::argstar::new()","syntaxtree::args::new()","syntaxtree::argsforward::new()","syntaxtree::arrayliteral::new()","syntaxtree::arrayliteral::qsymbolsformatter::new()","syntaxtree::arrayliteral::qwordsformatter::new()","syntaxtree::arrayliteral::varrefsformatter::new()","syntaxtree::aryptn::new()","syntaxtree::aryptn::restformatter::new()","syntaxtree::assign::new()","syntaxtree::assoc::new()","syntaxtree::assocsplat::new()","syntaxtree::beginblock::new()","syntaxtree::backref::new()","syntaxtree::backtick::new()","syntaxtree::bareassochash::new()","syntaxtree::begin::new()","syntaxtree::binary::new()","syntaxtree::blockarg::new()","syntaxtree::blockformatter::new()","syntaxtree::blockformatter::blockopenformatter::new()","syntaxtree::blockvar::new()","syntaxtree::bodystmt::new()","syntaxtree::braceblock::new()","syntaxtree::break::new()","syntaxtree::char::new()","syntaxtree::cli::color::new()","syntaxtree::cvar::new()","syntaxtree::call::new()","syntaxtree::calloperatorformatter::new()","syntaxtree::case::new()","syntaxtree::classdeclaration::new()","syntaxtree::comma::new()","syntaxtree::command::new()","syntaxtree::commandcall::new()","syntaxtree::comment::new()","syntaxtree::comment::list::new()","syntaxtree::conditionalformatter::new()","syntaxtree::conditionalmodformatter::new()","syntaxtree::const::new()","syntaxtree::constpathfield::new()","syntaxtree::constpathref::new()","syntaxtree::constref::new()","syntaxtree::def::new()","syntaxtree::defendless::new()","syntaxtree::defined::new()","syntaxtree::defs::new()","syntaxtree::doblock::new()","syntaxtree::dot2::new()","syntaxtree::dot3::new()","syntaxtree::dotformatter::new()","syntaxtree::dynasymbol::new()","syntaxtree::endblock::new()","syntaxtree::else::new()","syntaxtree::elsif::new()","syntaxtree::embdoc::new()","syntaxtree::embexprbeg::new()","syntaxtree::embexprend::new()","syntaxtree::embvar::new()","syntaxtree::endcontent::new()","syntaxtree::ensure::new()","syntaxtree::excessedcomma::new()","syntaxtree::fcall::new()","syntaxtree::field::new()","syntaxtree::floatliteral::new()","syntaxtree::flowcontrolformatter::new()","syntaxtree::fndptn::new()","syntaxtree::for::new()","syntaxtree::formatter::new()","syntaxtree::gvar::new()","syntaxtree::hashliteral::new()","syntaxtree::heredoc::new()","syntaxtree::heredocbeg::new()","syntaxtree::hshptn::new()","syntaxtree::hshptn::keywordformatter::new()","syntaxtree::hshptn::keywordrestformatter::new()","syntaxtree::ivar::new()","syntaxtree::ident::new()","syntaxtree::if::new()","syntaxtree::ifmod::new()","syntaxtree::ifop::new()","syntaxtree::imaginary::new()","syntaxtree::in::new()","syntaxtree::int::new()","syntaxtree::kw::new()","syntaxtree::kwrestparam::new()","syntaxtree::lbrace::new()","syntaxtree::lbracket::new()","syntaxtree::lparen::new()","syntaxtree::label::new()","syntaxtree::labelend::new()","syntaxtree::lambda::new()","syntaxtree::languageserver::new()","syntaxtree::languageserver::inlayhints::new()","syntaxtree::location::new()","syntaxtree::loopformatter::new()","syntaxtree::massign::new()","syntaxtree::mlhs::new()","syntaxtree::mlhsparen::new()","syntaxtree::mrhs::new()","syntaxtree::methodaddblock::new()","syntaxtree::moduledeclaration::new()","syntaxtree::next::new()","syntaxtree::not::new()","syntaxtree::op::new()","syntaxtree::opassign::new()","syntaxtree::params::new()","syntaxtree::params::keywordformatter::new()","syntaxtree::params::keywordrestformatter::new()","syntaxtree::params::optionalformatter::new()","syntaxtree::paren::new()","syntaxtree::parser::new()","syntaxtree::parser::multibytestring::new()","syntaxtree::parser::parseerror::new()","syntaxtree::parser::singlebytestring::new()","syntaxtree::period::new()","syntaxtree::pinnedbegin::new()","syntaxtree::pinnedvarref::new()","syntaxtree::program::new()","syntaxtree::qsymbols::new()","syntaxtree::qsymbolsbeg::new()","syntaxtree::qwords::new()","syntaxtree::qwordsbeg::new()","syntaxtree::rassign::new()","syntaxtree::rbrace::new()","syntaxtree::rbracket::new()","syntaxtree::rparen::new()","syntaxtree::rationalliteral::new()","syntaxtree::redo::new()","syntaxtree::regexpbeg::new()","syntaxtree::regexpcontent::new()","syntaxtree::regexpend::new()","syntaxtree::regexpliteral::new()","syntaxtree::rescue::new()","syntaxtree::rescueex::new()","syntaxtree::rescuemod::new()","syntaxtree::restparam::new()","syntaxtree::retry::new()","syntaxtree::return::new()","syntaxtree::return0::new()","syntaxtree::sclass::new()","syntaxtree::statements::new()","syntaxtree::stringconcat::new()","syntaxtree::stringcontent::new()","syntaxtree::stringdvar::new()","syntaxtree::stringembexpr::new()","syntaxtree::stringliteral::new()","syntaxtree::super::new()","syntaxtree::symbeg::new()","syntaxtree::symbolcontent::new()","syntaxtree::symbolliteral::new()","syntaxtree::symbols::new()","syntaxtree::symbolsbeg::new()","syntaxtree::tlambeg::new()","syntaxtree::tlambda::new()","syntaxtree::tstringbeg::new()","syntaxtree::tstringcontent::new()","syntaxtree::tstringend::new()","syntaxtree::topconstfield::new()","syntaxtree::topconstref::new()","syntaxtree::unary::new()","syntaxtree::undef::new()","syntaxtree::undef::undefargumentformatter::new()","syntaxtree::unless::new()","syntaxtree::unlessmod::new()","syntaxtree::until::new()","syntaxtree::untilmod::new()","syntaxtree::vcall::new()","syntaxtree::varalias::new()","syntaxtree::varfield::new()","syntaxtree::varref::new()","syntaxtree::visitor::visitmethodchecker::new()","syntaxtree::visitor::visitmethoderror::new()","syntaxtree::voidstmt::new()","syntaxtree::when::new()","syntaxtree::while::new()","syntaxtree::whilemod::new()","syntaxtree::word::new()","syntaxtree::words::new()","syntaxtree::wordsbeg::new()","syntaxtree::xstring::new()","syntaxtree::xstringliteral::new()","syntaxtree::yield::new()","syntaxtree::yield0::new()","syntaxtree::zsuper::new()","syntaxtree::quotes::normalize()","syntaxtree::formatter#parent()","syntaxtree::formatter#parents()","syntaxtree::parse()","syntaxtree::languageserver::inlayhints#precedence_parentheses()","prettyprint::align#pretty_print()","prettyprint::breakparent#pretty_print()","prettyprint::breakable#pretty_print()","prettyprint::group#pretty_print()","prettyprint::ifbreak#pretty_print()","prettyprint::indent#pretty_print()","prettyprint::linesuffix#pretty_print()","prettyprint::text#pretty_print()","prettyprint::trim#pretty_print()","syntaxtree::aref#pretty_print()","syntaxtree::areffield#pretty_print()","syntaxtree::alias#pretty_print()","syntaxtree::argblock#pretty_print()","syntaxtree::argparen#pretty_print()","syntaxtree::argstar#pretty_print()","syntaxtree::args#pretty_print()","syntaxtree::argsforward#pretty_print()","syntaxtree::arrayliteral#pretty_print()","syntaxtree::aryptn#pretty_print()","syntaxtree::assign#pretty_print()","syntaxtree::assoc#pretty_print()","syntaxtree::assocsplat#pretty_print()","syntaxtree::beginblock#pretty_print()","syntaxtree::backref#pretty_print()","syntaxtree::backtick#pretty_print()","syntaxtree::bareassochash#pretty_print()","syntaxtree::begin#pretty_print()","syntaxtree::binary#pretty_print()","syntaxtree::blockarg#pretty_print()","syntaxtree::blockvar#pretty_print()","syntaxtree::bodystmt#pretty_print()","syntaxtree::braceblock#pretty_print()","syntaxtree::break#pretty_print()","syntaxtree::char#pretty_print()","syntaxtree::cvar#pretty_print()","syntaxtree::call#pretty_print()","syntaxtree::case#pretty_print()","syntaxtree::classdeclaration#pretty_print()","syntaxtree::command#pretty_print()","syntaxtree::commandcall#pretty_print()","syntaxtree::comment#pretty_print()","syntaxtree::comment::list#pretty_print()","syntaxtree::const#pretty_print()","syntaxtree::constpathfield#pretty_print()","syntaxtree::constpathref#pretty_print()","syntaxtree::constref#pretty_print()","syntaxtree::def#pretty_print()","syntaxtree::defendless#pretty_print()","syntaxtree::defined#pretty_print()","syntaxtree::defs#pretty_print()","syntaxtree::doblock#pretty_print()","syntaxtree::dot2#pretty_print()","syntaxtree::dot3#pretty_print()","syntaxtree::dynasymbol#pretty_print()","syntaxtree::endblock#pretty_print()","syntaxtree::else#pretty_print()","syntaxtree::elsif#pretty_print()","syntaxtree::embdoc#pretty_print()","syntaxtree::endcontent#pretty_print()","syntaxtree::ensure#pretty_print()","syntaxtree::excessedcomma#pretty_print()","syntaxtree::fcall#pretty_print()","syntaxtree::field#pretty_print()","syntaxtree::floatliteral#pretty_print()","syntaxtree::fndptn#pretty_print()","syntaxtree::for#pretty_print()","syntaxtree::gvar#pretty_print()","syntaxtree::hashliteral#pretty_print()","syntaxtree::heredoc#pretty_print()","syntaxtree::heredocbeg#pretty_print()","syntaxtree::hshptn#pretty_print()","syntaxtree::ivar#pretty_print()","syntaxtree::ident#pretty_print()","syntaxtree::if#pretty_print()","syntaxtree::ifmod#pretty_print()","syntaxtree::ifop#pretty_print()","syntaxtree::imaginary#pretty_print()","syntaxtree::in#pretty_print()","syntaxtree::int#pretty_print()","syntaxtree::kw#pretty_print()","syntaxtree::kwrestparam#pretty_print()","syntaxtree::lbrace#pretty_print()","syntaxtree::lbracket#pretty_print()","syntaxtree::lparen#pretty_print()","syntaxtree::label#pretty_print()","syntaxtree::lambda#pretty_print()","syntaxtree::massign#pretty_print()","syntaxtree::mlhs#pretty_print()","syntaxtree::mlhsparen#pretty_print()","syntaxtree::mrhs#pretty_print()","syntaxtree::methodaddblock#pretty_print()","syntaxtree::moduledeclaration#pretty_print()","syntaxtree::next#pretty_print()","syntaxtree::node#pretty_print()","syntaxtree::not#pretty_print()","syntaxtree::op#pretty_print()","syntaxtree::opassign#pretty_print()","syntaxtree::params#pretty_print()","syntaxtree::paren#pretty_print()","syntaxtree::period#pretty_print()","syntaxtree::pinnedbegin#pretty_print()","syntaxtree::pinnedvarref#pretty_print()","syntaxtree::program#pretty_print()","syntaxtree::qsymbols#pretty_print()","syntaxtree::qwords#pretty_print()","syntaxtree::rassign#pretty_print()","syntaxtree::rationalliteral#pretty_print()","syntaxtree::redo#pretty_print()","syntaxtree::regexpliteral#pretty_print()","syntaxtree::rescue#pretty_print()","syntaxtree::rescueex#pretty_print()","syntaxtree::rescuemod#pretty_print()","syntaxtree::restparam#pretty_print()","syntaxtree::retry#pretty_print()","syntaxtree::return#pretty_print()","syntaxtree::return0#pretty_print()","syntaxtree::sclass#pretty_print()","syntaxtree::statements#pretty_print()","syntaxtree::stringconcat#pretty_print()","syntaxtree::stringdvar#pretty_print()","syntaxtree::stringembexpr#pretty_print()","syntaxtree::stringliteral#pretty_print()","syntaxtree::super#pretty_print()","syntaxtree::symbolliteral#pretty_print()","syntaxtree::symbols#pretty_print()","syntaxtree::tstringcontent#pretty_print()","syntaxtree::topconstfield#pretty_print()","syntaxtree::topconstref#pretty_print()","syntaxtree::unary#pretty_print()","syntaxtree::undef#pretty_print()","syntaxtree::unless#pretty_print()","syntaxtree::unlessmod#pretty_print()","syntaxtree::until#pretty_print()","syntaxtree::untilmod#pretty_print()","syntaxtree::vcall#pretty_print()","syntaxtree::varalias#pretty_print()","syntaxtree::varfield#pretty_print()","syntaxtree::varref#pretty_print()","syntaxtree::voidstmt#pretty_print()","syntaxtree::when#pretty_print()","syntaxtree::while#pretty_print()","syntaxtree::whilemod#pretty_print()","syntaxtree::word#pretty_print()","syntaxtree::words#pretty_print()","syntaxtree::xstringliteral#pretty_print()","syntaxtree::yield#pretty_print()","syntaxtree::yield0#pretty_print()","syntaxtree::zsuper#pretty_print()","syntaxtree::read()","syntaxtree::cli::color::red()","syntaxtree::register_handler()","syntaxtree::cli::run()","syntaxtree::cli::ast#run()","syntaxtree::cli::action#run()","syntaxtree::cli::check#run()","syntaxtree::cli::debug#run()","syntaxtree::cli::doc#run()","syntaxtree::cli::format#run()","syntaxtree::cli::write#run()","syntaxtree::languageserver#run()","prettyprint::singleline_format()","syntaxtree::assignformatting::skip_indent?()","syntaxtree::cli::action#success()","syntaxtree::cli::check#success()","syntaxtree::cli::debug#success()","prettyprint#text()","prettyprint::singleline#text()","syntaxtree::location#to()","syntaxtree::aref#to_json()","syntaxtree::areffield#to_json()","syntaxtree::alias#to_json()","syntaxtree::argblock#to_json()","syntaxtree::argparen#to_json()","syntaxtree::argstar#to_json()","syntaxtree::args#to_json()","syntaxtree::argsforward#to_json()","syntaxtree::arrayliteral#to_json()","syntaxtree::aryptn#to_json()","syntaxtree::assign#to_json()","syntaxtree::assoc#to_json()","syntaxtree::assocsplat#to_json()","syntaxtree::beginblock#to_json()","syntaxtree::backref#to_json()","syntaxtree::backtick#to_json()","syntaxtree::bareassochash#to_json()","syntaxtree::begin#to_json()","syntaxtree::binary#to_json()","syntaxtree::blockarg#to_json()","syntaxtree::blockvar#to_json()","syntaxtree::bodystmt#to_json()","syntaxtree::braceblock#to_json()","syntaxtree::break#to_json()","syntaxtree::char#to_json()","syntaxtree::cvar#to_json()","syntaxtree::call#to_json()","syntaxtree::case#to_json()","syntaxtree::classdeclaration#to_json()","syntaxtree::command#to_json()","syntaxtree::commandcall#to_json()","syntaxtree::comment#to_json()","syntaxtree::const#to_json()","syntaxtree::constpathfield#to_json()","syntaxtree::constpathref#to_json()","syntaxtree::constref#to_json()","syntaxtree::def#to_json()","syntaxtree::defendless#to_json()","syntaxtree::defined#to_json()","syntaxtree::defs#to_json()","syntaxtree::doblock#to_json()","syntaxtree::dot2#to_json()","syntaxtree::dot3#to_json()","syntaxtree::dynasymbol#to_json()","syntaxtree::endblock#to_json()","syntaxtree::else#to_json()","syntaxtree::elsif#to_json()","syntaxtree::embdoc#to_json()","syntaxtree::endcontent#to_json()","syntaxtree::ensure#to_json()","syntaxtree::excessedcomma#to_json()","syntaxtree::fcall#to_json()","syntaxtree::field#to_json()","syntaxtree::floatliteral#to_json()","syntaxtree::fndptn#to_json()","syntaxtree::for#to_json()","syntaxtree::gvar#to_json()","syntaxtree::hashliteral#to_json()","syntaxtree::heredoc#to_json()","syntaxtree::heredocbeg#to_json()","syntaxtree::hshptn#to_json()","syntaxtree::ivar#to_json()","syntaxtree::ident#to_json()","syntaxtree::if#to_json()","syntaxtree::ifmod#to_json()","syntaxtree::ifop#to_json()","syntaxtree::imaginary#to_json()","syntaxtree::in#to_json()","syntaxtree::int#to_json()","syntaxtree::kw#to_json()","syntaxtree::kwrestparam#to_json()","syntaxtree::lbrace#to_json()","syntaxtree::lbracket#to_json()","syntaxtree::lparen#to_json()","syntaxtree::label#to_json()","syntaxtree::lambda#to_json()","syntaxtree::location#to_json()","syntaxtree::massign#to_json()","syntaxtree::mlhs#to_json()","syntaxtree::mlhsparen#to_json()","syntaxtree::mrhs#to_json()","syntaxtree::methodaddblock#to_json()","syntaxtree::moduledeclaration#to_json()","syntaxtree::next#to_json()","syntaxtree::node#to_json()","syntaxtree::not#to_json()","syntaxtree::op#to_json()","syntaxtree::opassign#to_json()","syntaxtree::params#to_json()","syntaxtree::paren#to_json()","syntaxtree::period#to_json()","syntaxtree::pinnedbegin#to_json()","syntaxtree::pinnedvarref#to_json()","syntaxtree::program#to_json()","syntaxtree::qsymbols#to_json()","syntaxtree::qwords#to_json()","syntaxtree::rassign#to_json()","syntaxtree::rationalliteral#to_json()","syntaxtree::redo#to_json()","syntaxtree::regexpliteral#to_json()","syntaxtree::rescue#to_json()","syntaxtree::rescueex#to_json()","syntaxtree::rescuemod#to_json()","syntaxtree::restparam#to_json()","syntaxtree::retry#to_json()","syntaxtree::return#to_json()","syntaxtree::return0#to_json()","syntaxtree::sclass#to_json()","syntaxtree::statements#to_json()","syntaxtree::stringconcat#to_json()","syntaxtree::stringdvar#to_json()","syntaxtree::stringembexpr#to_json()","syntaxtree::stringliteral#to_json()","syntaxtree::super#to_json()","syntaxtree::symbolliteral#to_json()","syntaxtree::symbols#to_json()","syntaxtree::tstringcontent#to_json()","syntaxtree::topconstfield#to_json()","syntaxtree::topconstref#to_json()","syntaxtree::unary#to_json()","syntaxtree::undef#to_json()","syntaxtree::unless#to_json()","syntaxtree::unlessmod#to_json()","syntaxtree::until#to_json()","syntaxtree::untilmod#to_json()","syntaxtree::vcall#to_json()","syntaxtree::varalias#to_json()","syntaxtree::varfield#to_json()","syntaxtree::varref#to_json()","syntaxtree::voidstmt#to_json()","syntaxtree::when#to_json()","syntaxtree::while#to_json()","syntaxtree::whilemod#to_json()","syntaxtree::word#to_json()","syntaxtree::words#to_json()","syntaxtree::xstringliteral#to_json()","syntaxtree::yield#to_json()","syntaxtree::yield0#to_json()","syntaxtree::zsuper#to_json()","syntaxtree::cli::color#to_s()","syntaxtree::location::token()","syntaxtree::comment#trailing!()","syntaxtree::comment#trailing?()","prettyprint#trim()","prettyprint::singleline#trim()","prettyprint::buffer::arraybuffer#trim!()","prettyprint::buffer::defaultbuffer#trim!()","prettyprint::buffer::stringbuffer#trim!()","syntaxtree::visitor#visit()","syntaxtree::visitor#visit_begin()","syntaxtree::visitor#visit_char()","syntaxtree::visitor#visit_end()","syntaxtree::visitor#visit___end__()","syntaxtree::visitor#visit_alias()","syntaxtree::visitor#visit_all()","syntaxtree::visitor#visit_aref()","syntaxtree::visitor#visit_aref_field()","syntaxtree::visitor#visit_arg_block()","syntaxtree::visitor#visit_arg_paren()","syntaxtree::visitor#visit_arg_star()","syntaxtree::visitor#visit_args()","syntaxtree::visitor#visit_args_forward()","syntaxtree::visitor#visit_array()","syntaxtree::visitor#visit_aryptn()","syntaxtree::visitor#visit_assign()","syntaxtree::visitor#visit_assoc()","syntaxtree::visitor#visit_assoc_splat()","syntaxtree::visitor#visit_backref()","syntaxtree::visitor#visit_backtick()","syntaxtree::visitor#visit_bare_assoc_hash()","syntaxtree::visitor#visit_begin()","syntaxtree::visitor#visit_binary()","syntaxtree::visitor#visit_block_arg()","syntaxtree::visitor#visit_block_var()","syntaxtree::visitor#visit_bodystmt()","syntaxtree::visitor#visit_brace_block()","syntaxtree::visitor#visit_break()","syntaxtree::visitor#visit_call()","syntaxtree::visitor#visit_case()","syntaxtree::visitor#visit_child_nodes()","syntaxtree::visitor#visit_class()","syntaxtree::visitor#visit_comma()","syntaxtree::visitor#visit_command()","syntaxtree::visitor#visit_command_call()","syntaxtree::visitor#visit_comment()","syntaxtree::visitor#visit_const()","syntaxtree::visitor#visit_const_path_field()","syntaxtree::visitor#visit_const_path_ref()","syntaxtree::visitor#visit_const_ref()","syntaxtree::visitor#visit_cvar()","syntaxtree::visitor#visit_def()","syntaxtree::visitor#visit_def_endless()","syntaxtree::visitor#visit_defined()","syntaxtree::visitor#visit_defs()","syntaxtree::visitor#visit_do_block()","syntaxtree::visitor#visit_dot2()","syntaxtree::visitor#visit_dot3()","syntaxtree::visitor#visit_dyna_symbol()","syntaxtree::visitor#visit_else()","syntaxtree::visitor#visit_elsif()","syntaxtree::visitor#visit_embdoc()","syntaxtree::visitor#visit_embexpr_beg()","syntaxtree::visitor#visit_embexpr_end()","syntaxtree::visitor#visit_embvar()","syntaxtree::visitor#visit_ensure()","syntaxtree::visitor#visit_excessed_comma()","syntaxtree::visitor#visit_fcall()","syntaxtree::visitor#visit_field()","syntaxtree::visitor#visit_float()","syntaxtree::visitor#visit_fndptn()","syntaxtree::visitor#visit_for()","syntaxtree::visitor#visit_gvar()","syntaxtree::visitor#visit_hash()","syntaxtree::visitor#visit_heredoc()","syntaxtree::visitor#visit_heredoc_beg()","syntaxtree::visitor#visit_hshptn()","syntaxtree::visitor#visit_ident()","syntaxtree::visitor#visit_if()","syntaxtree::visitor#visit_if_mod()","syntaxtree::visitor#visit_if_op()","syntaxtree::visitor#visit_imaginary()","syntaxtree::visitor#visit_in()","syntaxtree::visitor#visit_int()","syntaxtree::visitor#visit_ivar()","syntaxtree::visitor#visit_kw()","syntaxtree::visitor#visit_kwrest_param()","syntaxtree::visitor#visit_label()","syntaxtree::visitor#visit_label_end()","syntaxtree::visitor#visit_lambda()","syntaxtree::visitor#visit_lbrace()","syntaxtree::visitor#visit_lbracket()","syntaxtree::visitor#visit_lparen()","syntaxtree::visitor#visit_massign()","syntaxtree::visitor::visit_method()","syntaxtree::visitor#visit_method_add_block()","syntaxtree::visitor::visit_methods()","syntaxtree::visitor#visit_mlhs()","syntaxtree::visitor#visit_mlhs_paren()","syntaxtree::visitor#visit_module()","syntaxtree::visitor#visit_mrhs()","syntaxtree::visitor#visit_next()","syntaxtree::visitor#visit_not()","syntaxtree::visitor#visit_op()","syntaxtree::visitor#visit_op_assign()","syntaxtree::visitor#visit_params()","syntaxtree::visitor#visit_paren()","syntaxtree::visitor#visit_period()","syntaxtree::visitor#visit_pinned_begin()","syntaxtree::visitor#visit_pinned_var_ref()","syntaxtree::visitor#visit_program()","syntaxtree::visitor#visit_qsymbols()","syntaxtree::visitor#visit_qsymbols_beg()","syntaxtree::visitor#visit_qwords()","syntaxtree::visitor#visit_qwords_beg()","syntaxtree::visitor#visit_rassign()","syntaxtree::visitor#visit_rational()","syntaxtree::visitor#visit_rbrace()","syntaxtree::visitor#visit_rbracket()","syntaxtree::visitor#visit_redo()","syntaxtree::visitor#visit_regexp_beg()","syntaxtree::visitor#visit_regexp_content()","syntaxtree::visitor#visit_regexp_end()","syntaxtree::visitor#visit_regexp_literal()","syntaxtree::visitor#visit_rescue()","syntaxtree::visitor#visit_rescue_ex()","syntaxtree::visitor#visit_rescue_mod()","syntaxtree::visitor#visit_rest_param()","syntaxtree::visitor#visit_retry()","syntaxtree::visitor#visit_return()","syntaxtree::visitor#visit_return0()","syntaxtree::visitor#visit_rparen()","syntaxtree::visitor#visit_sclass()","syntaxtree::visitor#visit_statements()","syntaxtree::visitor#visit_string_concat()","syntaxtree::visitor#visit_string_content()","syntaxtree::visitor#visit_string_dvar()","syntaxtree::visitor#visit_string_embexpr()","syntaxtree::visitor#visit_string_literal()","syntaxtree::visitor#visit_super()","syntaxtree::visitor#visit_sym_beg()","syntaxtree::visitor#visit_symbol_content()","syntaxtree::visitor#visit_symbol_literal()","syntaxtree::visitor#visit_symbols()","syntaxtree::visitor#visit_symbols_beg()","syntaxtree::visitor#visit_tlambda()","syntaxtree::visitor#visit_tlambeg()","syntaxtree::visitor#visit_top_const_field()","syntaxtree::visitor#visit_top_const_ref()","syntaxtree::visitor#visit_tstring_beg()","syntaxtree::visitor#visit_tstring_content()","syntaxtree::visitor#visit_tstring_end()","syntaxtree::visitor#visit_unary()","syntaxtree::visitor#visit_undef()","syntaxtree::visitor#visit_unless()","syntaxtree::visitor#visit_unless_mod()","syntaxtree::visitor#visit_until()","syntaxtree::visitor#visit_until_mod()","syntaxtree::visitor#visit_var_alias()","syntaxtree::visitor#visit_var_field()","syntaxtree::visitor#visit_var_ref()","syntaxtree::visitor#visit_vcall()","syntaxtree::visitor#visit_void_stmt()","syntaxtree::visitor#visit_when()","syntaxtree::visitor#visit_while()","syntaxtree::visitor#visit_while_mod()","syntaxtree::visitor#visit_word()","syntaxtree::visitor#visit_words()","syntaxtree::visitor#visit_words_beg()","syntaxtree::visitor#visit_xstring()","syntaxtree::visitor#visit_xstring_literal()","syntaxtree::visitor#visit_yield()","syntaxtree::visitor#visit_yield0()","syntaxtree::visitor#visit_zsuper()","prettyprint#with_target()","syntaxtree::cli::color::yellow()","","","",""],"info":[["PrettyPrint","","PrettyPrint.html","","<p>This class implements a pretty printing algorithm. It finds line breaks and nice indentations for grouped …\n"],["PrettyPrint::Align","","PrettyPrint/Align.html","","<p>A node in the print tree that represents aligning nested nodes to a certain prefix width or string.\n"],["PrettyPrint::BreakParent","","PrettyPrint/BreakParent.html","","<p>A node in the print tree that forces the surrounding group to print out in the “break” mode …\n"],["PrettyPrint::Breakable","","PrettyPrint/Breakable.html","","<p>A node in the print tree that represents a place in the buffer that the content can be broken onto multiple …\n"],["PrettyPrint::Buffer","","PrettyPrint/Buffer.html","","<p>When building up the contents in the output buffer, it’s convenient to be able to trim trailing whitespace …\n"],["PrettyPrint::Buffer::ArrayBuffer","","PrettyPrint/Buffer/ArrayBuffer.html","","<p>This is an output buffer that wraps an array output object. It provides a trim! method that trims off …\n"],["PrettyPrint::Buffer::DefaultBuffer","","PrettyPrint/Buffer/DefaultBuffer.html","","<p>This is the default output buffer that provides a base implementation of trim! that does nothing. It’s …\n"],["PrettyPrint::Buffer::StringBuffer","","PrettyPrint/Buffer/StringBuffer.html","","<p>This is an output buffer that wraps a string output object. It provides a trim! method that trims off …\n"],["PrettyPrint::Group","","PrettyPrint/Group.html","","<p>A node in the print tree that represents a group of items which the printer should try to fit onto one …\n"],["PrettyPrint::IfBreak","","PrettyPrint/IfBreak.html","","<p>A node in the print tree that represents printing one thing if the surrounding group node is broken and …\n"],["PrettyPrint::IfBreakBuilder","","PrettyPrint/IfBreakBuilder.html","","<p>A small DSL-like object used for specifying the alternative contents to be printed if the surrounding …\n"],["PrettyPrint::Indent","","PrettyPrint/Indent.html","","<p>A node in the print tree that is a variant of the Align node that indents its contents by one level. …\n"],["PrettyPrint::IndentLevel","","PrettyPrint/IndentLevel.html","","<p>This object represents the current level of indentation within the printer. It has the ability to generate …\n"],["PrettyPrint::LineSuffix","","PrettyPrint/LineSuffix.html","","<p>A node in the print tree that has its own special buffer for implementing content that should flush before …\n"],["PrettyPrint::SingleLine","","PrettyPrint/SingleLine.html","","<p>PrettyPrint::SingleLine is used by PrettyPrint.singleline_format\n<p>It is passed to be similar to a PrettyPrint …\n"],["PrettyPrint::SingleLine::IfBreakBuilder","","PrettyPrint/SingleLine/IfBreakBuilder.html","","<p>A class that wraps the ability to call #if_flat. The contents of the #if_flat block are executed immediately, …\n"],["PrettyPrint::Text","","PrettyPrint/Text.html","","<p>A node in the print tree that represents plain content that cannot be broken up (by default this assumes …\n"],["PrettyPrint::Trim","","PrettyPrint/Trim.html","","<p>A node in the print tree that represents trimming all of the indentation of the current line, in the …\n"],["SyntaxTree","","SyntaxTree.html","",""],["SyntaxTree::ARef","","SyntaxTree/ARef.html","","<p>ARef represents when you’re pulling a value out of a collection at a specific index. Put another …\n"],["SyntaxTree::ARefField","","SyntaxTree/ARefField.html","","<p>ARefField represents assigning values into collections at specific indices. Put another way, it’s …\n"],["SyntaxTree::Alias","","SyntaxTree/Alias.html","","<p>Alias represents the use of the <code>alias</code> keyword with regular arguments (not global variables). The <code>alias</code> …\n"],["SyntaxTree::Alias::AliasArgumentFormatter","","SyntaxTree/Alias/AliasArgumentFormatter.html","",""],["SyntaxTree::ArgBlock","","SyntaxTree/ArgBlock.html","","<p>ArgBlock represents using a block operator on an expression.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">method</span>(<span class=\"ruby-operator\">&amp;</span><span class=\"ruby-identifier\">expression</span>)\n</pre>\n"],["SyntaxTree::ArgParen","","SyntaxTree/ArgParen.html","","<p>ArgParen represents wrapping arguments to a method inside a set of parentheses.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">method</span>(<span class=\"ruby-identifier\">argument</span>)\n</pre>\n<p>In the …\n"],["SyntaxTree::ArgStar","","SyntaxTree/ArgStar.html","","<p>Star represents using a splat operator on an expression.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">method</span>(<span class=\"ruby-operator\">*</span><span class=\"ruby-identifier\">arguments</span>)\n</pre>\n"],["SyntaxTree::Args","","SyntaxTree/Args.html","","<p>Args represents a list of arguments being passed to a method call or array literal.\n\n<pre>method(first, second, ...</pre>\n"],["SyntaxTree::ArgsForward","","SyntaxTree/ArgsForward.html","","<p>ArgsForward represents forwarding all kinds of arguments onto another method call.\n\n<pre>def request(method, ...</pre>\n"],["SyntaxTree::ArrayLiteral","","SyntaxTree/ArrayLiteral.html","","<p>ArrayLiteral represents an array literal, which can optionally contain elements.\n\n<pre class=\"ruby\">[]\n[<span class=\"ruby-identifier\">one</span>, <span class=\"ruby-identifier\">two</span>, <span class=\"ruby-identifier\">three</span>]\n</pre>\n"],["SyntaxTree::ArrayLiteral::QSymbolsFormatter","","SyntaxTree/ArrayLiteral/QSymbolsFormatter.html","",""],["SyntaxTree::ArrayLiteral::QWordsFormatter","","SyntaxTree/ArrayLiteral/QWordsFormatter.html","",""],["SyntaxTree::ArrayLiteral::VarRefsFormatter","","SyntaxTree/ArrayLiteral/VarRefsFormatter.html","",""],["SyntaxTree::AryPtn","","SyntaxTree/AryPtn.html","","<p>AryPtn represents matching against an array pattern using the Ruby 2.7+ pattern matching syntax. It’s …\n"],["SyntaxTree::AryPtn::RestFormatter","","SyntaxTree/AryPtn/RestFormatter.html","",""],["SyntaxTree::Assign","","SyntaxTree/Assign.html","","<p>Assign represents assigning something to a variable or constant. Generally, the left side of the assignment …\n"],["SyntaxTree::AssignFormatting","","SyntaxTree/AssignFormatting.html","","<p>Determins if the following value should be indented or not.\n"],["SyntaxTree::Assoc","","SyntaxTree/Assoc.html","","<p>Assoc represents a key-value pair within a hash. It is a child node of either an AssocListFromArgs or …\n"],["SyntaxTree::AssocSplat","","SyntaxTree/AssocSplat.html","","<p>AssocSplat represents double-splatting a value into a hash (either a hash literal or a bare hash in a …\n"],["SyntaxTree::BEGINBlock","","SyntaxTree/BEGINBlock.html","","<p>BEGINBlock represents the use of the <code>BEGIN</code> keyword, which hooks into the lifecycle of the interpreter. …\n"],["SyntaxTree::Backref","","SyntaxTree/Backref.html","","<p>Backref represents a global variable referencing a matched value. It comes in the form of a $ followed …\n"],["SyntaxTree::Backtick","","SyntaxTree/Backtick.html","","<p>Backtick represents the use of the ‘ operator. It’s usually found being used for an XStringLiteral …\n"],["SyntaxTree::BareAssocHash","","SyntaxTree/BareAssocHash.html","","<p>BareAssocHash represents a hash of contents being passed as a method argument (and therefore has omitted …\n"],["SyntaxTree::Begin","","SyntaxTree/Begin.html","","<p>Begin represents a begin..end chain.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">begin</span>\n  <span class=\"ruby-identifier\">value</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::Binary","","SyntaxTree/Binary.html","","<p>Binary represents any expression that involves two sub-expressions with an operator in between. This …\n"],["SyntaxTree::BlockArg","","SyntaxTree/BlockArg.html","","<p>BlockArg represents declaring a block parameter on a method definition.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">method</span>(<span class=\"ruby-operator\">&amp;</span><span class=\"ruby-identifier\">block</span>); <span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::BlockFormatter","","SyntaxTree/BlockFormatter.html","","<p>Responsible for formatting either a BraceBlock or a DoBlock.\n"],["SyntaxTree::BlockFormatter::BlockOpenFormatter","","SyntaxTree/BlockFormatter/BlockOpenFormatter.html","",""],["SyntaxTree::BlockVar","","SyntaxTree/BlockVar.html","","<p>BlockVar represents the parameters being declared for a block. Effectively this node is everything contained …\n"],["SyntaxTree::BodyStmt","","SyntaxTree/BodyStmt.html","","<p>bodystmt can’t actually determine its bounds appropriately because it doesn’t necessarily know …\n"],["SyntaxTree::BraceBlock","","SyntaxTree/BraceBlock.html","","<p>BraceBlock represents passing a block to a method call using the { } operators.\n\n<pre>method { |variable| variable ...</pre>\n"],["SyntaxTree::Break","","SyntaxTree/Break.html","","<p>Break represents using the <code>break</code> keyword.\n\n<pre>break</pre>\n<p>It can also optionally accept arguments, as in:\n"],["SyntaxTree::CHAR","","SyntaxTree/CHAR.html","","<p>CHAR irepresents a single codepoint in the script encoding.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">?a</span>\n</pre>\n<p>In the example above, the CHAR node represents …\n"],["SyntaxTree::CLI","","SyntaxTree/CLI.html","",""],["SyntaxTree::CLI::AST","","SyntaxTree/CLI/AST.html","","<p>An action of the CLI that prints out the AST for the given source.\n"],["SyntaxTree::CLI::Action","","SyntaxTree/CLI/Action.html","","<p>The parent action class for the CLI that implements the basics.\n"],["SyntaxTree::CLI::Check","","SyntaxTree/CLI/Check.html","","<p>An action of the CLI that ensures that the filepath is formatted as expected.\n"],["SyntaxTree::CLI::Check::UnformattedError","","SyntaxTree/CLI/Check/UnformattedError.html","",""],["SyntaxTree::CLI::Color","","SyntaxTree/CLI/Color.html","","<p>A utility wrapper around colored strings in the output.\n"],["SyntaxTree::CLI::Debug","","SyntaxTree/CLI/Debug.html","","<p>An action of the CLI that formats the source twice to check if the first format is not idempotent.\n"],["SyntaxTree::CLI::Debug::NonIdempotentFormatError","","SyntaxTree/CLI/Debug/NonIdempotentFormatError.html","",""],["SyntaxTree::CLI::Doc","","SyntaxTree/CLI/Doc.html","","<p>An action of the CLI that prints out the doc tree IR for the given source.\n"],["SyntaxTree::CLI::Format","","SyntaxTree/CLI/Format.html","","<p>An action of the CLI that formats the input source and prints it out.\n"],["SyntaxTree::CLI::Write","","SyntaxTree/CLI/Write.html","","<p>An action of the CLI that formats the input source and writes the formatted output back to the file. …\n"],["SyntaxTree::CVar","","SyntaxTree/CVar.html","","<p>CVar represents the use of a class variable.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">@@variable</span>\n</pre>\n"],["SyntaxTree::Call","","SyntaxTree/Call.html","","<p>Call represents a method call.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">receiver</span>.<span class=\"ruby-identifier\">message</span>\n</pre>\n"],["SyntaxTree::CallOperatorFormatter","","SyntaxTree/CallOperatorFormatter.html","","<p>Wraps a call operator (which can be a string literal  &mdash; or an Op node or a\n\n<p>Period node) and formats it when …\n"],["SyntaxTree::Case","","SyntaxTree/Case.html","","<p>Case represents the beginning of a case chain.\n\n<pre>case value\nwhen 1\n  &quot;one&quot;\nwhen 2\n  &quot;two&quot;\nelse\n  &quot;number&quot; ...</pre>\n"],["SyntaxTree::ClassDeclaration","","SyntaxTree/ClassDeclaration.html","","<p>Class represents defining a class using the <code>class</code> keyword.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Container</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n<p>Classes can have path names …\n"],["SyntaxTree::Comma","","SyntaxTree/Comma.html","","<p>Comma represents the use of the , operator.\n"],["SyntaxTree::Command","","SyntaxTree/Command.html","","<p>Command represents a method call with arguments and no parentheses. Note that Command nodes only happen …\n"],["SyntaxTree::CommandCall","","SyntaxTree/CommandCall.html","","<p>CommandCall represents a method call on an object with arguments and no parentheses.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">object</span>.<span class=\"ruby-identifier\">method</span> <span class=\"ruby-identifier\">argument</span>\n</pre>\n"],["SyntaxTree::Comment","","SyntaxTree/Comment.html","","<p>Comment represents a comment in the source.\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># comment</span>\n</pre>\n"],["SyntaxTree::Comment::List","","SyntaxTree/Comment/List.html","",""],["SyntaxTree::ConditionalFormatter","","SyntaxTree/ConditionalFormatter.html","","<p>Formats an If or Unless node.\n"],["SyntaxTree::ConditionalModFormatter","","SyntaxTree/ConditionalModFormatter.html","","<p>Formats an IfMod or UnlessMod node.\n"],["SyntaxTree::Const","","SyntaxTree/Const.html","","<p>Const represents a literal value that <em>looks</em> like a constant. This could actually be a reference to a …\n"],["SyntaxTree::ConstPathField","","SyntaxTree/ConstPathField.html","","<p>ConstPathField represents the child node of some kind of assignment. It represents when you’re assigning …\n"],["SyntaxTree::ConstPathRef","","SyntaxTree/ConstPathRef.html","","<p>ConstPathRef represents referencing a constant by a path.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">object</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Const</span>\n</pre>\n"],["SyntaxTree::ConstRef","","SyntaxTree/ConstRef.html","","<p>ConstRef represents the name of the constant being used in a class or module declaration.\n\n<pre>class Container ...</pre>\n"],["SyntaxTree::ContainsAssignment","","SyntaxTree/ContainsAssignment.html","","<p>If the predicate of a conditional or loop contains an assignment (in which case we can’t know for …\n"],["SyntaxTree::Def","","SyntaxTree/Def.html","","<p>Def represents defining a regular method on the current self object.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">method</span>(<span class=\"ruby-identifier\">param</span>) <span class=\"ruby-identifier\">result</span> <span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::DefEndless","","SyntaxTree/DefEndless.html","","<p>DefEndless represents defining a single-line method since Ruby 3.0+.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">method</span> = <span class=\"ruby-identifier\">result</span>\n</pre>\n"],["SyntaxTree::Defined","","SyntaxTree/Defined.html","","<p>Defined represents the use of the <code>defined?</code> operator. It can be used with and without parentheses.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">defined?</span>(<span class=\"ruby-identifier\">variable</span>)\n</pre>\n"],["SyntaxTree::Defs","","SyntaxTree/Defs.html","","<p>Defs represents defining a singleton method on an object.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">object</span>.<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-identifier\">param</span>) <span class=\"ruby-identifier\">result</span> <span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::DoBlock","","SyntaxTree/DoBlock.html","","<p>DoBlock represents passing a block to a method call using the <code>do</code> and <code>end</code> keywords.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">method</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">value</span><span class=\"ruby-operator\">|</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::Dot2","","SyntaxTree/Dot2.html","","<p>Dot2 represents using the .. operator between two expressions. Usually this is to create a range object. …\n"],["SyntaxTree::Dot3","","SyntaxTree/Dot3.html","","<p>Dot3 represents using the … operator between two expressions. Usually this is to create a range object. …\n"],["SyntaxTree::DotFormatter","","SyntaxTree/DotFormatter.html","","<p>Responsible for formatting Dot2 and Dot3 nodes.\n"],["SyntaxTree::DynaSymbol","","SyntaxTree/DynaSymbol.html","","<p>DynaSymbol represents a symbol literal that uses quotes to dynamically define its value.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:&quot;#{variable}&quot;</span>\n</pre>\n"],["SyntaxTree::ENDBlock","","SyntaxTree/ENDBlock.html","","<p>ENDBlock represents the use of the <code>END</code> keyword, which hooks into the lifecycle of the interpreter. Whatever …\n"],["SyntaxTree::Else","","SyntaxTree/Else.html","","<p>Else represents the end of an <code>if</code>, <code>unless</code>, or <code>case</code> chain.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">if</span> <span class=\"ruby-identifier\">variable</span>\n<span class=\"ruby-keyword\">else</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::Elsif","","SyntaxTree/Elsif.html","","<p>Elsif represents another clause in an <code>if</code> or <code>unless</code> chain.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">if</span> <span class=\"ruby-identifier\">variable</span>\n<span class=\"ruby-keyword\">elsif</span> <span class=\"ruby-identifier\">other_variable</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::EmbDoc","","SyntaxTree/EmbDoc.html","","<p>EmbDoc represents a multi-line comment.\n\n<pre class=\"ruby\"><span class=\"ruby-comment\">=begin\nfirst line\nsecond line\n=end</span>\n</pre>\n"],["SyntaxTree::EmbExprBeg","","SyntaxTree/EmbExprBeg.html","","<p>EmbExprBeg represents the beginning token for using interpolation inside of a parent node that accepts …\n"],["SyntaxTree::EmbExprEnd","","SyntaxTree/EmbExprEnd.html","","<p>EmbExprEnd represents the ending token for using interpolation inside of a parent node that accepts string …\n"],["SyntaxTree::EmbVar","","SyntaxTree/EmbVar.html","","<p>EmbVar represents the use of shorthand interpolation for an instance, class, or global variable into …\n"],["SyntaxTree::EndContent","","SyntaxTree/EndContent.html","","<p>EndContent represents the use of __END__ syntax, which allows individual scripts to keep content after …\n"],["SyntaxTree::Ensure","","SyntaxTree/Ensure.html","","<p>Ensure represents the use of the <code>ensure</code> keyword and its subsequent statements.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">begin</span>\n<span class=\"ruby-keyword\">ensure</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::ExcessedComma","","SyntaxTree/ExcessedComma.html","","<p>ExcessedComma represents a trailing comma in a list of block parameters. It changes the block parameters …\n"],["SyntaxTree::FCall","","SyntaxTree/FCall.html","","<p>FCall represents the piece of a method call that comes before any arguments (i.e., just the name of the …\n"],["SyntaxTree::Field","","SyntaxTree/Field.html","","<p>Field is always the child of an assignment. It represents assigning to a “field” on an object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">object</span>.<span class=\"ruby-identifier\">variable</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["SyntaxTree::FloatLiteral","","SyntaxTree/FloatLiteral.html","","<p>FloatLiteral represents a floating point number literal.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1.0</span>\n</pre>\n"],["SyntaxTree::FlowControlFormatter","","SyntaxTree/FlowControlFormatter.html","","<p>Formats either a Break or Next node.\n"],["SyntaxTree::FndPtn","","SyntaxTree/FndPtn.html","","<p>FndPtn represents matching against a pattern where you find a pattern in an array using the Ruby 3.0 …\n"],["SyntaxTree::For","","SyntaxTree/For.html","","<p>For represents using a <code>for</code> loop.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">for</span> <span class=\"ruby-identifier\">value</span> <span class=\"ruby-keyword\">in</span> <span class=\"ruby-identifier\">list</span> <span class=\"ruby-keyword\">do</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::Formatter","","SyntaxTree/Formatter.html","","<p>A slightly enhanced PP that knows how to format recursively including comments.\n"],["SyntaxTree::GVar","","SyntaxTree/GVar.html","","<p>GVar represents a global variable literal.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">$variable</span>\n</pre>\n"],["SyntaxTree::HashKeyFormatter","","SyntaxTree/HashKeyFormatter.html","","<p>This module is responsible for formatting the assocs contained within a hash or bare hash. It first determines …\n"],["SyntaxTree::HashKeyFormatter::Labels","","SyntaxTree/HashKeyFormatter/Labels.html","",""],["SyntaxTree::HashKeyFormatter::Rockets","","SyntaxTree/HashKeyFormatter/Rockets.html","",""],["SyntaxTree::HashLiteral","","SyntaxTree/HashLiteral.html","","<p>HashLiteral represents a hash literal.\n\n<pre class=\"ruby\">{ <span class=\"ruby-identifier\">key</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-identifier\">value</span> }\n</pre>\n"],["SyntaxTree::Heredoc","","SyntaxTree/Heredoc.html","","<p>Heredoc represents a heredoc string literal.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">&lt;&lt;~DOC</span>\n<span class=\"ruby-value\">  contents\n</span><span class=\"ruby-identifier\">DOC</span>\n</pre>\n"],["SyntaxTree::HeredocBeg","","SyntaxTree/HeredocBeg.html","","<p>HeredocBeg represents the beginning declaration of a heredoc.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">&lt;&lt;~DOC</span>\n<span class=\"ruby-value\">  contents\n</span><span class=\"ruby-identifier\">DOC</span>\n</pre>\n<p>In the example above …\n"],["SyntaxTree::HshPtn","","SyntaxTree/HshPtn.html","","<p>HshPtn represents matching against a hash pattern using the Ruby 2.7+ pattern matching syntax.\n\n<pre>case value ...</pre>\n"],["SyntaxTree::HshPtn::KeywordFormatter","","SyntaxTree/HshPtn/KeywordFormatter.html","",""],["SyntaxTree::HshPtn::KeywordRestFormatter","","SyntaxTree/HshPtn/KeywordRestFormatter.html","",""],["SyntaxTree::IVar","","SyntaxTree/IVar.html","","<p>IVar represents an instance variable literal.\n\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@variable</span>\n</pre>\n"],["SyntaxTree::Ident","","SyntaxTree/Ident.html","","<p>Ident represents an identifier anywhere in code. It can represent a very large number of things, depending …\n"],["SyntaxTree::If","","SyntaxTree/If.html","","<p>If represents the first clause in an <code>if</code> chain.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">if</span> <span class=\"ruby-identifier\">predicate</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::IfMod","","SyntaxTree/IfMod.html","","<p>IfMod represents the modifier form of an <code>if</code> statement.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">expression</span> <span class=\"ruby-keyword\">if</span> <span class=\"ruby-identifier\">predicate</span>\n</pre>\n"],["SyntaxTree::IfOp","","SyntaxTree/IfOp.html","","<p>IfOp represents a ternary clause.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">predicate</span> <span class=\"ruby-operator\">?</span> <span class=\"ruby-identifier\">truthy</span> <span class=\"ruby-operator\">:</span> <span class=\"ruby-identifier\">falsy</span>\n</pre>\n"],["SyntaxTree::Imaginary","","SyntaxTree/Imaginary.html","","<p>Imaginary represents an imaginary number literal.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1i</span>\n</pre>\n"],["SyntaxTree::In","","SyntaxTree/In.html","","<p>In represents using the <code>in</code> keyword within the Ruby 2.7+ pattern matching syntax.\n\n<pre>case value\nin pattern ...</pre>\n"],["SyntaxTree::Int","","SyntaxTree/Int.html","","<p>Int represents an integer number literal.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>\n</pre>\n"],["SyntaxTree::Kw","","SyntaxTree/Kw.html","","<p>Kw represents the use of a keyword. It can be almost anywhere in the syntax tree, so you end up seeing …\n"],["SyntaxTree::KwRestParam","","SyntaxTree/KwRestParam.html","","<p>KwRestParam represents defining a parameter in a method definition that accepts all remaining keyword …\n"],["SyntaxTree::LBrace","","SyntaxTree/LBrace.html","","<p>LBrace represents the use of a left brace, i.e., {.\n"],["SyntaxTree::LBracket","","SyntaxTree/LBracket.html","","<p>LBracket represents the use of a left bracket, i.e., [.\n"],["SyntaxTree::LParen","","SyntaxTree/LParen.html","","<p>LParen represents the use of a left parenthesis, i.e., (.\n"],["SyntaxTree::Label","","SyntaxTree/Label.html","","<p>Label represents the use of an identifier to associate with an object. You can find it in a hash key, …\n"],["SyntaxTree::LabelEnd","","SyntaxTree/LabelEnd.html","","<p>LabelEnd represents the end of a dynamic symbol.\n\n<pre class=\"ruby\">{ <span class=\"ruby-value\">&quot;key&quot;:</span> <span class=\"ruby-identifier\">value</span> }\n</pre>\n<p>In the example above, LabelEnd represents …\n"],["SyntaxTree::Lambda","","SyntaxTree/Lambda.html","","<p>Lambda represents using a lambda literal (not the lambda method call).\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">-&gt;</span>(<span class=\"ruby-identifier\">value</span>) { <span class=\"ruby-identifier\">value</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-value\">2</span> }\n</pre>\n"],["SyntaxTree::LanguageServer","","SyntaxTree/LanguageServer.html","",""],["SyntaxTree::LanguageServer::InlayHints","","SyntaxTree/LanguageServer/InlayHints.html","",""],["SyntaxTree::Location","","SyntaxTree/Location.html","","<p>Represents the location of a node in the tree from the source code.\n"],["SyntaxTree::LoopFormatter","","SyntaxTree/LoopFormatter.html","","<p>Formats an Until, UntilMod, While, or WhileMod node.\n"],["SyntaxTree::MAssign","","SyntaxTree/MAssign.html","","<p>MAssign is a parent node of any kind of multiple assignment. This includes splitting out variables on …\n"],["SyntaxTree::MLHS","","SyntaxTree/MLHS.html","","<p>MLHS represents a list of values being destructured on the left-hand side of a multiple assignment.\n\n<pre>first, ...</pre>\n"],["SyntaxTree::MLHSParen","","SyntaxTree/MLHSParen.html","","<p>MLHSParen represents parentheses being used to destruct values in a multiple assignment on the left hand …\n"],["SyntaxTree::MRHS","","SyntaxTree/MRHS.html","","<p>MRHS represents the values that are being assigned on the right-hand side of a multiple assignment.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">values</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["SyntaxTree::MethodAddBlock","","SyntaxTree/MethodAddBlock.html","","<p>MethodAddBlock represents a method call with a block argument.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">method</span> {}\n</pre>\n"],["SyntaxTree::ModuleDeclaration","","SyntaxTree/ModuleDeclaration.html","","<p>ModuleDeclaration represents defining a module using the <code>module</code> keyword.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">Namespace</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::Next","","SyntaxTree/Next.html","","<p>Next represents using the <code>next</code> keyword.\n\n<pre>next</pre>\n<p>The <code>next</code> keyword can also optionally be called with an argument: …\n"],["SyntaxTree::Node","","SyntaxTree/Node.html","","<p>This is the parent node of all of the syntax tree nodes. It’s pretty much exclusively here to make …\n"],["SyntaxTree::Not","","SyntaxTree/Not.html","","<p>Not represents the unary <code>not</code> method being called on an expression.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">not</span> <span class=\"ruby-identifier\">value</span>\n</pre>\n"],["SyntaxTree::Op","","SyntaxTree/Op.html","","<p>Op represents an operator literal in the source.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">2</span>\n</pre>\n<p>In the example above, the Op node represents the …\n"],["SyntaxTree::OpAssign","","SyntaxTree/OpAssign.html","","<p>OpAssign represents assigning a value to a variable or constant using an operator like += or ||=.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">variable</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["SyntaxTree::Params","","SyntaxTree/Params.html","","<p>Params represents defining parameters on a method or lambda.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">method</span>(<span class=\"ruby-identifier\">param</span>) <span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::Params::KeywordFormatter","","SyntaxTree/Params/KeywordFormatter.html","",""],["SyntaxTree::Params::KeywordRestFormatter","","SyntaxTree/Params/KeywordRestFormatter.html","",""],["SyntaxTree::Params::OptionalFormatter","","SyntaxTree/Params/OptionalFormatter.html","",""],["SyntaxTree::Paren","","SyntaxTree/Paren.html","","<p>Paren represents using balanced parentheses in a couple places in a Ruby program. In general parentheses …\n"],["SyntaxTree::Parentheses","","SyntaxTree/Parentheses.html","","<p>If you have a modifier statement (for instance a modifier if statement or a modifier while loop) there …\n"],["SyntaxTree::Parser","","SyntaxTree/Parser.html","",""],["SyntaxTree::Parser::MultiByteString","","SyntaxTree/Parser/MultiByteString.html","","<p>Represents a line in the source. If this class is being used, it means that there are characters in the …\n"],["SyntaxTree::Parser::ParseError","","SyntaxTree/Parser/ParseError.html","","<p>A special parser error so that we can get nice syntax displays on the error message when prettier prints …\n"],["SyntaxTree::Parser::SingleByteString","","SyntaxTree/Parser/SingleByteString.html","","<p>Represents a line in the source. If this class is being used, it means that every character in the string …\n"],["SyntaxTree::Period","","SyntaxTree/Period.html","","<p>Period represents the use of the <code>.</code> operator. It is usually found in method calls.\n"],["SyntaxTree::PinnedBegin","","SyntaxTree/PinnedBegin.html","","<p>PinnedBegin represents a pinning a nested statement within pattern matching.\n\n<pre>case value\nin ^(statement) ...</pre>\n"],["SyntaxTree::PinnedVarRef","","SyntaxTree/PinnedVarRef.html","","<p>PinnedVarRef represents a pinned variable reference within a pattern matching pattern.\n\n<pre>case value\nin ^variable ...</pre>\n"],["SyntaxTree::Program","","SyntaxTree/Program.html","","<p>Program represents the overall syntax tree.\n"],["SyntaxTree::QSymbols","","SyntaxTree/QSymbols.html","","<p>QSymbols represents a symbol literal array without interpolation.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%i[one two three]</span>\n</pre>\n"],["SyntaxTree::QSymbolsBeg","","SyntaxTree/QSymbolsBeg.html","","<p>QSymbolsBeg represents the beginning of a symbol literal array.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%i[one two three]</span>\n</pre>\n<p>In the snippet above, …\n"],["SyntaxTree::QWords","","SyntaxTree/QWords.html","","<p>QWords represents a string literal array without interpolation.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w[one two three]</span>\n</pre>\n"],["SyntaxTree::QWordsBeg","","SyntaxTree/QWordsBeg.html","","<p>QWordsBeg represents the beginning of a string literal array.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w[one two three]</span>\n</pre>\n<p>In the snippet above,  …\n"],["SyntaxTree::Quotes","","SyntaxTree/Quotes.html","","<p>Responsible for providing information about quotes to be used for strings and dynamic symbols.\n"],["SyntaxTree::RAssign","","SyntaxTree/RAssign.html","","<p>RAssign represents a single-line pattern match.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">value</span> <span class=\"ruby-keyword\">in</span> <span class=\"ruby-identifier\">pattern</span>\n<span class=\"ruby-identifier\">value</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-identifier\">pattern</span>\n</pre>\n"],["SyntaxTree::RBrace","","SyntaxTree/RBrace.html","","<p>RBrace represents the use of a right brace, i.e., +++.\n"],["SyntaxTree::RBracket","","SyntaxTree/RBracket.html","","<p>RBracket represents the use of a right bracket, i.e., <code>]</code>.\n"],["SyntaxTree::RParen","","SyntaxTree/RParen.html","","<p>RParen represents the use of a right parenthesis, i.e., +)+.\n"],["SyntaxTree::RationalLiteral","","SyntaxTree/RationalLiteral.html","","<p>RationalLiteral represents the use of a rational number literal.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1r</span>\n</pre>\n"],["SyntaxTree::Redo","","SyntaxTree/Redo.html","","<p>Redo represents the use of the <code>redo</code> keyword.\n\n<pre>redo</pre>\n"],["SyntaxTree::RegexpBeg","","SyntaxTree/RegexpBeg.html","","<p>RegexpBeg represents the start of a regular expression literal.\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/.+/</span>\n</pre>\n<p>In the example above, RegexpBeg represents …\n"],["SyntaxTree::RegexpContent","","SyntaxTree/RegexpContent.html","","<p>RegexpContent represents the body of a regular expression.\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/.+ #{pattern} .+/</span>\n</pre>\n<p>In the example above, a  …\n"],["SyntaxTree::RegexpEnd","","SyntaxTree/RegexpEnd.html","","<p>RegexpEnd represents the end of a regular expression literal.\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/.+/m</span>\n</pre>\n<p>In the example above, the RegexpEnd …\n"],["SyntaxTree::RegexpLiteral","","SyntaxTree/RegexpLiteral.html","","<p>RegexpLiteral represents a regular expression literal.\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/.+/</span>\n</pre>\n"],["SyntaxTree::RemoveBreaks","","SyntaxTree/RemoveBreaks.html","","<p>This module will remove any breakables from the list of contents so that no newlines are present in the …\n"],["SyntaxTree::Rescue","","SyntaxTree/Rescue.html","","<p>Rescue represents the use of the rescue keyword inside of a BodyStmt node.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">begin</span>\n<span class=\"ruby-keyword\">rescue</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::RescueEx","","SyntaxTree/RescueEx.html","","<p>RescueEx represents the list of exceptions being rescued in a rescue clause.\n\n<pre>begin\nrescue Exception =&gt; ...</pre>\n"],["SyntaxTree::RescueMod","","SyntaxTree/RescueMod.html","","<p>RescueMod represents the use of the modifier form of a <code>rescue</code> clause.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">expression</span> <span class=\"ruby-keyword\">rescue</span> <span class=\"ruby-identifier\">value</span>\n</pre>\n"],["SyntaxTree::RestParam","","SyntaxTree/RestParam.html","","<p>RestParam represents defining a parameter in a method definition that accepts all remaining positional …\n"],["SyntaxTree::Retry","","SyntaxTree/Retry.html","","<p>Retry represents the use of the <code>retry</code> keyword.\n\n<pre>retry</pre>\n"],["SyntaxTree::Return","","SyntaxTree/Return.html","","<p>Return represents using the <code>return</code> keyword with arguments.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">return</span> <span class=\"ruby-identifier\">value</span>\n</pre>\n"],["SyntaxTree::Return0","","SyntaxTree/Return0.html","","<p>Return0 represents the bare <code>return</code> keyword with no arguments.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">return</span>\n</pre>\n"],["SyntaxTree::SClass","","SyntaxTree/SClass.html","","<p>SClass represents a block of statements that should be evaluated within the context of the singleton …\n"],["SyntaxTree::Statements","","SyntaxTree/Statements.html","","<p>Everything that has a block of code inside of it has a list of statements. Normally we would just track …\n"],["SyntaxTree::StringConcat","","SyntaxTree/StringConcat.html","","<p>StringConcat represents concatenating two strings together using a backward slash.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;first&quot;</span> \\\n  <span class=\"ruby-string\">&quot;second&quot;</span>\n</pre>\n"],["SyntaxTree::StringContent","","SyntaxTree/StringContent.html","","<p>StringContent represents the contents of a string-like value.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;string&quot;</span>\n</pre>\n"],["SyntaxTree::StringDVar","","SyntaxTree/StringDVar.html","","<p>StringDVar represents shorthand interpolation of a variable into a string. It allows you to take an instance …\n"],["SyntaxTree::StringEmbExpr","","SyntaxTree/StringEmbExpr.html","","<p>StringEmbExpr represents interpolated content. It can be contained within a couple of different parent …\n"],["SyntaxTree::StringLiteral","","SyntaxTree/StringLiteral.html","","<p>StringLiteral represents a string literal.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;string&quot;</span>\n</pre>\n"],["SyntaxTree::Super","","SyntaxTree/Super.html","","<p>Super represents using the <code>super</code> keyword with arguments. It can optionally use parentheses.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">super</span>(<span class=\"ruby-identifier\">value</span>)\n</pre>\n"],["SyntaxTree::SymBeg","","SyntaxTree/SymBeg.html","","<p>SymBeg represents the beginning of a symbol literal.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:symbol</span>\n</pre>\n<p>SymBeg is also used for dynamic symbols, as …\n"],["SyntaxTree::SymbolContent","","SyntaxTree/SymbolContent.html","","<p>SymbolContent represents symbol contents and is always the child of a SymbolLiteral node.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:symbol</span>\n</pre>\n"],["SyntaxTree::SymbolLiteral","","SyntaxTree/SymbolLiteral.html","","<p>SymbolLiteral represents a symbol in the system with no interpolation (as opposed to a DynaSymbol which …\n"],["SyntaxTree::Symbols","","SyntaxTree/Symbols.html","","<p>Symbols represents a symbol array literal with interpolation.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%I[one two three]</span>\n</pre>\n"],["SyntaxTree::SymbolsBeg","","SyntaxTree/SymbolsBeg.html","","<p>SymbolsBeg represents the start of a symbol array literal with interpolation.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%I[one two three]</span>\n</pre>\n<p>In the …\n"],["SyntaxTree::TLamBeg","","SyntaxTree/TLamBeg.html","","<p>TLamBeg represents the beginning of the body of a lambda literal using braces.\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">-&gt;</span> { <span class=\"ruby-identifier\">value</span> }\n</pre>\n<p>In the example …\n"],["SyntaxTree::TLambda","","SyntaxTree/TLambda.html","","<p>TLambda represents the beginning of a lambda literal.\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">-&gt;</span> { <span class=\"ruby-identifier\">value</span> }\n</pre>\n<p>In the example above the TLambda represents …\n"],["SyntaxTree::TStringBeg","","SyntaxTree/TStringBeg.html","","<p>TStringBeg represents the beginning of a string literal.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;string&quot;</span>\n</pre>\n<p>In the example above, TStringBeg represents …\n"],["SyntaxTree::TStringContent","","SyntaxTree/TStringContent.html","","<p>TStringContent represents plain characters inside of an entity that accepts string content like a string, …\n"],["SyntaxTree::TStringEnd","","SyntaxTree/TStringEnd.html","","<p>TStringEnd represents the end of a string literal.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;string&quot;</span>\n</pre>\n<p>In the example above, TStringEnd represents …\n"],["SyntaxTree::TopConstField","","SyntaxTree/TopConstField.html","","<p>TopConstField is always the child node of some kind of assignment. It represents when you’re assigning …\n"],["SyntaxTree::TopConstRef","","SyntaxTree/TopConstRef.html","","<p>TopConstRef is very similar to TopConstField except that it is not involved in an assignment.\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Constant</span>\n</pre>\n"],["SyntaxTree::Unary","","SyntaxTree/Unary.html","","<p>Unary represents a unary method being called on an expression, as in +!+ or +~+.\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">!</span><span class=\"ruby-identifier\">value</span>\n</pre>\n"],["SyntaxTree::Undef","","SyntaxTree/Undef.html","","<p>Undef represents the use of the <code>undef</code> keyword.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">undef</span> <span class=\"ruby-identifier\">method</span>\n</pre>\n"],["SyntaxTree::Undef::UndefArgumentFormatter","","SyntaxTree/Undef/UndefArgumentFormatter.html","",""],["SyntaxTree::Unless","","SyntaxTree/Unless.html","","<p>Unless represents the first clause in an <code>unless</code> chain.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">unless</span> <span class=\"ruby-identifier\">predicate</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::UnlessMod","","SyntaxTree/UnlessMod.html","","<p>UnlessMod represents the modifier form of an <code>unless</code> statement.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">expression</span> <span class=\"ruby-keyword\">unless</span> <span class=\"ruby-identifier\">predicate</span>\n</pre>\n"],["SyntaxTree::Until","","SyntaxTree/Until.html","","<p>Until represents an <code>until</code> loop.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">until</span> <span class=\"ruby-identifier\">predicate</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::UntilMod","","SyntaxTree/UntilMod.html","","<p>UntilMod represents the modifier form of a <code>until</code> loop.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">expression</span> <span class=\"ruby-keyword\">until</span> <span class=\"ruby-identifier\">predicate</span>\n</pre>\n"],["SyntaxTree::VCall","","SyntaxTree/VCall.html","","<p>VCall represent any plain named object with Ruby that could be either a local variable or a method call. …\n"],["SyntaxTree::VarAlias","","SyntaxTree/VarAlias.html","","<p>VarAlias represents when you’re using the <code>alias</code> keyword with global variable arguments.\n\n<pre>alias $new ...</pre>\n"],["SyntaxTree::VarField","","SyntaxTree/VarField.html","","<p>VarField represents a variable that is being assigned a value. As such, it is always a child of an assignment …\n"],["SyntaxTree::VarRef","","SyntaxTree/VarRef.html","","<p>VarRef represents a variable reference.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">true</span>\n</pre>\n<p>This can be a plain local variable like the example above. …\n"],["SyntaxTree::Visitor","","SyntaxTree/Visitor.html","",""],["SyntaxTree::Visitor::VisitMethodChecker","","SyntaxTree/Visitor/VisitMethodChecker.html","","<p>This class is used by DidYouMean to offer corrections to invalid visit method names.\n"],["SyntaxTree::Visitor::VisitMethodError","","SyntaxTree/Visitor/VisitMethodError.html","","<p>This is raised when you use the Visitor.visit_method method and it fails. It is correctable to through …\n"],["SyntaxTree::VoidStmt","","SyntaxTree/VoidStmt.html","","<p>VoidStmt represents an empty lexical block of code.\n\n<pre class=\"ruby\">;;\n</pre>\n"],["SyntaxTree::When","","SyntaxTree/When.html","","<p>When represents a <code>when</code> clause in a <code>case</code> chain.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">case</span> <span class=\"ruby-identifier\">value</span>\n<span class=\"ruby-keyword\">when</span> <span class=\"ruby-identifier\">predicate</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::While","","SyntaxTree/While.html","","<p>While represents a <code>while</code> loop.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">while</span> <span class=\"ruby-identifier\">predicate</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::WhileMod","","SyntaxTree/WhileMod.html","","<p>WhileMod represents the modifier form of a <code>while</code> loop.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">expression</span> <span class=\"ruby-keyword\">while</span> <span class=\"ruby-identifier\">predicate</span>\n</pre>\n"],["SyntaxTree::Word","","SyntaxTree/Word.html","","<p>Word represents an element within a special array literal that accepts interpolation.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%W[a#{b}c xyz]</span>\n</pre>\n<p>In …\n"],["SyntaxTree::Words","","SyntaxTree/Words.html","","<p>Words represents a string literal array with interpolation.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%W[one two three]</span>\n</pre>\n"],["SyntaxTree::WordsBeg","","SyntaxTree/WordsBeg.html","","<p>WordsBeg represents the beginning of a string literal array with interpolation.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%W[one two three]</span>\n</pre>\n<p>In the …\n"],["SyntaxTree::XString","","SyntaxTree/XString.html","","<p>XString represents the contents of an XStringLiteral.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">`ls`</span>\n</pre>\n"],["SyntaxTree::XStringLiteral","","SyntaxTree/XStringLiteral.html","","<p>XStringLiteral represents a string that gets executed.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">`ls`</span>\n</pre>\n"],["SyntaxTree::Yield","","SyntaxTree/Yield.html","","<p>Yield represents using the <code>yield</code> keyword with arguments.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">yield</span> <span class=\"ruby-identifier\">value</span>\n</pre>\n"],["SyntaxTree::Yield0","","SyntaxTree/Yield0.html","","<p>Yield0 represents the bare <code>yield</code> keyword with no arguments.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">yield</span>\n</pre>\n"],["SyntaxTree::ZSuper","","SyntaxTree/ZSuper.html","","<p>ZSuper represents the bare <code>super</code> keyword with no arguments.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">super</span>\n</pre>\n"],["<<","PrettyPrint::Buffer::DefaultBuffer","PrettyPrint/Buffer/DefaultBuffer.html#method-i-3C-3C","(object)",""],["==","SyntaxTree::Location","SyntaxTree/Location.html#method-i-3D-3D","(other)",""],["[]","SyntaxTree::Parser::MultiByteString","SyntaxTree/Parser/MultiByteString.html#method-i-5B-5D","(byteindex)","<p>Technically it’s possible for the column index to be a negative value if there’s a BOM at the …\n"],["[]","SyntaxTree::Parser::SingleByteString","SyntaxTree/Parser/SingleByteString.html#method-i-5B-5D","(byteindex)",""],["accept","SyntaxTree::ARef","SyntaxTree/ARef.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ARefField","SyntaxTree/ARefField.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Alias","SyntaxTree/Alias.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ArgBlock","SyntaxTree/ArgBlock.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ArgParen","SyntaxTree/ArgParen.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ArgStar","SyntaxTree/ArgStar.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Args","SyntaxTree/Args.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ArgsForward","SyntaxTree/ArgsForward.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ArrayLiteral","SyntaxTree/ArrayLiteral.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::AryPtn","SyntaxTree/AryPtn.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Assign","SyntaxTree/Assign.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Assoc","SyntaxTree/Assoc.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::AssocSplat","SyntaxTree/AssocSplat.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::BEGINBlock","SyntaxTree/BEGINBlock.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Backref","SyntaxTree/Backref.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Backtick","SyntaxTree/Backtick.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::BareAssocHash","SyntaxTree/BareAssocHash.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Begin","SyntaxTree/Begin.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Binary","SyntaxTree/Binary.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::BlockArg","SyntaxTree/BlockArg.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::BlockVar","SyntaxTree/BlockVar.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::BodyStmt","SyntaxTree/BodyStmt.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::BraceBlock","SyntaxTree/BraceBlock.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Break","SyntaxTree/Break.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::CHAR","SyntaxTree/CHAR.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::CVar","SyntaxTree/CVar.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Call","SyntaxTree/Call.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Case","SyntaxTree/Case.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ClassDeclaration","SyntaxTree/ClassDeclaration.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Comma","SyntaxTree/Comma.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Command","SyntaxTree/Command.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::CommandCall","SyntaxTree/CommandCall.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Comment","SyntaxTree/Comment.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Const","SyntaxTree/Const.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ConstPathField","SyntaxTree/ConstPathField.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ConstPathRef","SyntaxTree/ConstPathRef.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ConstRef","SyntaxTree/ConstRef.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Def","SyntaxTree/Def.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::DefEndless","SyntaxTree/DefEndless.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Defined","SyntaxTree/Defined.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Defs","SyntaxTree/Defs.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::DoBlock","SyntaxTree/DoBlock.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Dot2","SyntaxTree/Dot2.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Dot3","SyntaxTree/Dot3.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::DynaSymbol","SyntaxTree/DynaSymbol.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ENDBlock","SyntaxTree/ENDBlock.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Else","SyntaxTree/Else.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Elsif","SyntaxTree/Elsif.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::EmbDoc","SyntaxTree/EmbDoc.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::EmbExprBeg","SyntaxTree/EmbExprBeg.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::EmbExprEnd","SyntaxTree/EmbExprEnd.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::EmbVar","SyntaxTree/EmbVar.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::EndContent","SyntaxTree/EndContent.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Ensure","SyntaxTree/Ensure.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ExcessedComma","SyntaxTree/ExcessedComma.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::FCall","SyntaxTree/FCall.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Field","SyntaxTree/Field.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::FloatLiteral","SyntaxTree/FloatLiteral.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::FndPtn","SyntaxTree/FndPtn.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::For","SyntaxTree/For.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::GVar","SyntaxTree/GVar.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::HashLiteral","SyntaxTree/HashLiteral.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Heredoc","SyntaxTree/Heredoc.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::HeredocBeg","SyntaxTree/HeredocBeg.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::HshPtn","SyntaxTree/HshPtn.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::IVar","SyntaxTree/IVar.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Ident","SyntaxTree/Ident.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::If","SyntaxTree/If.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::IfMod","SyntaxTree/IfMod.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::IfOp","SyntaxTree/IfOp.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Imaginary","SyntaxTree/Imaginary.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::In","SyntaxTree/In.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Int","SyntaxTree/Int.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Kw","SyntaxTree/Kw.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::KwRestParam","SyntaxTree/KwRestParam.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::LBrace","SyntaxTree/LBrace.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::LBracket","SyntaxTree/LBracket.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::LParen","SyntaxTree/LParen.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Label","SyntaxTree/Label.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::LabelEnd","SyntaxTree/LabelEnd.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Lambda","SyntaxTree/Lambda.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::MAssign","SyntaxTree/MAssign.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::MLHS","SyntaxTree/MLHS.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::MLHSParen","SyntaxTree/MLHSParen.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::MRHS","SyntaxTree/MRHS.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::MethodAddBlock","SyntaxTree/MethodAddBlock.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ModuleDeclaration","SyntaxTree/ModuleDeclaration.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Next","SyntaxTree/Next.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Node","SyntaxTree/Node.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Not","SyntaxTree/Not.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Op","SyntaxTree/Op.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::OpAssign","SyntaxTree/OpAssign.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Params","SyntaxTree/Params.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Paren","SyntaxTree/Paren.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Period","SyntaxTree/Period.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::PinnedBegin","SyntaxTree/PinnedBegin.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::PinnedVarRef","SyntaxTree/PinnedVarRef.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Program","SyntaxTree/Program.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::QSymbols","SyntaxTree/QSymbols.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::QSymbolsBeg","SyntaxTree/QSymbolsBeg.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::QWords","SyntaxTree/QWords.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::QWordsBeg","SyntaxTree/QWordsBeg.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::RAssign","SyntaxTree/RAssign.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::RBrace","SyntaxTree/RBrace.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::RBracket","SyntaxTree/RBracket.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::RParen","SyntaxTree/RParen.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::RationalLiteral","SyntaxTree/RationalLiteral.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Redo","SyntaxTree/Redo.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::RegexpBeg","SyntaxTree/RegexpBeg.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::RegexpContent","SyntaxTree/RegexpContent.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::RegexpEnd","SyntaxTree/RegexpEnd.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::RegexpLiteral","SyntaxTree/RegexpLiteral.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Rescue","SyntaxTree/Rescue.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::RescueEx","SyntaxTree/RescueEx.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::RescueMod","SyntaxTree/RescueMod.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::RestParam","SyntaxTree/RestParam.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Retry","SyntaxTree/Retry.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Return","SyntaxTree/Return.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Return0","SyntaxTree/Return0.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::SClass","SyntaxTree/SClass.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Statements","SyntaxTree/Statements.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::StringConcat","SyntaxTree/StringConcat.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::StringContent","SyntaxTree/StringContent.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::StringDVar","SyntaxTree/StringDVar.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::StringEmbExpr","SyntaxTree/StringEmbExpr.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::StringLiteral","SyntaxTree/StringLiteral.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Super","SyntaxTree/Super.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::SymBeg","SyntaxTree/SymBeg.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::SymbolContent","SyntaxTree/SymbolContent.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::SymbolLiteral","SyntaxTree/SymbolLiteral.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Symbols","SyntaxTree/Symbols.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::SymbolsBeg","SyntaxTree/SymbolsBeg.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::TLamBeg","SyntaxTree/TLamBeg.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::TLambda","SyntaxTree/TLambda.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::TStringBeg","SyntaxTree/TStringBeg.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::TStringContent","SyntaxTree/TStringContent.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::TStringEnd","SyntaxTree/TStringEnd.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::TopConstField","SyntaxTree/TopConstField.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::TopConstRef","SyntaxTree/TopConstRef.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Unary","SyntaxTree/Unary.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Undef","SyntaxTree/Undef.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Unless","SyntaxTree/Unless.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::UnlessMod","SyntaxTree/UnlessMod.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Until","SyntaxTree/Until.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::UntilMod","SyntaxTree/UntilMod.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::VCall","SyntaxTree/VCall.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::VarAlias","SyntaxTree/VarAlias.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::VarField","SyntaxTree/VarField.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::VarRef","SyntaxTree/VarRef.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::VoidStmt","SyntaxTree/VoidStmt.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::When","SyntaxTree/When.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::While","SyntaxTree/While.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::WhileMod","SyntaxTree/WhileMod.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Word","SyntaxTree/Word.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Words","SyntaxTree/Words.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::WordsBeg","SyntaxTree/WordsBeg.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::XString","SyntaxTree/XString.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::XStringLiteral","SyntaxTree/XStringLiteral.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Yield","SyntaxTree/Yield.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Yield0","SyntaxTree/Yield0.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ZSuper","SyntaxTree/ZSuper.html#method-i-accept","(visitor)",""],["add","PrettyPrint::Text","PrettyPrint/Text.html#method-i-add","(object: \"\", width: object.length)",""],["align","PrettyPrint::IndentLevel","PrettyPrint/IndentLevel.html#method-i-align","(n)","<p>This can accept a whole lot of different kinds of objects, due to the nature of the flexibility of the …\n"],["bare_rescue","SyntaxTree::LanguageServer::InlayHints","SyntaxTree/LanguageServer/InlayHints.html#method-i-bare_rescue","(location)","<p>Adds the implicitly rescued StandardError into a bare rescue clause. For example,\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">begin</span>\n<span class=\"ruby-keyword\">rescue</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n<p>becomes …\n"],["bind","SyntaxTree::BodyStmt","SyntaxTree/BodyStmt.html#method-i-bind","(start_char, end_char)",""],["bind","SyntaxTree::Statements","SyntaxTree/Statements.html#method-i-bind","(start_char, end_char)",""],["bind_end","SyntaxTree::Rescue","SyntaxTree/Rescue.html#method-i-bind_end","(end_char)",""],["bind_end","SyntaxTree::Statements","SyntaxTree/Statements.html#method-i-bind_end","(end_char)",""],["bold","SyntaxTree::CLI::Color","SyntaxTree/CLI/Color.html#method-c-bold","(value)",""],["break","PrettyPrint::Group","PrettyPrint/Group.html#method-i-break","()",""],["break","SyntaxTree::Parentheses","SyntaxTree/Parentheses.html#method-c-break","(q)",""],["break?","PrettyPrint::Group","PrettyPrint/Group.html#method-i-break-3F","()",""],["break_parent","PrettyPrint","PrettyPrint.html#method-i-break_parent","()","<p>This inserts a BreakParent node into the print tree which forces the surrounding and all parent group …\n"],["break_parent","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-break_parent","()","<p>Here for compatibility, does nothing.\n"],["breakable","PrettyPrint","PrettyPrint.html#method-i-breakable","( separator = \" \", width = separator.length, indent: true, force: false )","<p>This says “you can break a line here if necessary”, and a <code>width</code>-column text <code>separator</code> is inserted …\n"],["breakable","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-breakable","( separator = \" \", width = separator.length, indent: nil, force: nil )","<p>Appends <code>separator</code> to the text to be output. By default <code>separator</code> is ‘ ’\n<p>The <code>width</code>, <code>indent</code>, and …\n"],["call","SyntaxTree::ContainsAssignment","SyntaxTree/ContainsAssignment.html#method-c-call","(parent)",""],["call","SyntaxTree::RemoveBreaks","SyntaxTree/RemoveBreaks.html#method-c-call","(doc)",""],["child_nodes","SyntaxTree::ARef","SyntaxTree/ARef.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ARefField","SyntaxTree/ARefField.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Alias","SyntaxTree/Alias.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ArgBlock","SyntaxTree/ArgBlock.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ArgParen","SyntaxTree/ArgParen.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ArgStar","SyntaxTree/ArgStar.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Args","SyntaxTree/Args.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ArgsForward","SyntaxTree/ArgsForward.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ArrayLiteral","SyntaxTree/ArrayLiteral.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::AryPtn","SyntaxTree/AryPtn.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Assign","SyntaxTree/Assign.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Assoc","SyntaxTree/Assoc.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::AssocSplat","SyntaxTree/AssocSplat.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::BEGINBlock","SyntaxTree/BEGINBlock.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Backref","SyntaxTree/Backref.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Backtick","SyntaxTree/Backtick.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::BareAssocHash","SyntaxTree/BareAssocHash.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Begin","SyntaxTree/Begin.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Binary","SyntaxTree/Binary.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::BlockArg","SyntaxTree/BlockArg.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::BlockVar","SyntaxTree/BlockVar.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::BodyStmt","SyntaxTree/BodyStmt.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::BraceBlock","SyntaxTree/BraceBlock.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Break","SyntaxTree/Break.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::CHAR","SyntaxTree/CHAR.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::CVar","SyntaxTree/CVar.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Call","SyntaxTree/Call.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Case","SyntaxTree/Case.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ClassDeclaration","SyntaxTree/ClassDeclaration.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Command","SyntaxTree/Command.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::CommandCall","SyntaxTree/CommandCall.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Comment","SyntaxTree/Comment.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Const","SyntaxTree/Const.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ConstPathField","SyntaxTree/ConstPathField.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ConstPathRef","SyntaxTree/ConstPathRef.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ConstRef","SyntaxTree/ConstRef.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Def","SyntaxTree/Def.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::DefEndless","SyntaxTree/DefEndless.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Defined","SyntaxTree/Defined.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Defs","SyntaxTree/Defs.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::DoBlock","SyntaxTree/DoBlock.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Dot2","SyntaxTree/Dot2.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Dot3","SyntaxTree/Dot3.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::DynaSymbol","SyntaxTree/DynaSymbol.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ENDBlock","SyntaxTree/ENDBlock.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Else","SyntaxTree/Else.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Elsif","SyntaxTree/Elsif.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::EmbDoc","SyntaxTree/EmbDoc.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::EndContent","SyntaxTree/EndContent.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Ensure","SyntaxTree/Ensure.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ExcessedComma","SyntaxTree/ExcessedComma.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::FCall","SyntaxTree/FCall.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Field","SyntaxTree/Field.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::FloatLiteral","SyntaxTree/FloatLiteral.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::FndPtn","SyntaxTree/FndPtn.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::For","SyntaxTree/For.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::GVar","SyntaxTree/GVar.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::HashLiteral","SyntaxTree/HashLiteral.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Heredoc","SyntaxTree/Heredoc.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::HeredocBeg","SyntaxTree/HeredocBeg.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::HshPtn","SyntaxTree/HshPtn.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::IVar","SyntaxTree/IVar.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Ident","SyntaxTree/Ident.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::If","SyntaxTree/If.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::IfMod","SyntaxTree/IfMod.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::IfOp","SyntaxTree/IfOp.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Imaginary","SyntaxTree/Imaginary.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::In","SyntaxTree/In.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Int","SyntaxTree/Int.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Kw","SyntaxTree/Kw.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::KwRestParam","SyntaxTree/KwRestParam.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::LBrace","SyntaxTree/LBrace.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::LBracket","SyntaxTree/LBracket.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::LParen","SyntaxTree/LParen.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Label","SyntaxTree/Label.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Lambda","SyntaxTree/Lambda.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::MAssign","SyntaxTree/MAssign.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::MLHS","SyntaxTree/MLHS.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::MLHSParen","SyntaxTree/MLHSParen.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::MRHS","SyntaxTree/MRHS.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::MethodAddBlock","SyntaxTree/MethodAddBlock.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ModuleDeclaration","SyntaxTree/ModuleDeclaration.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Next","SyntaxTree/Next.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Node","SyntaxTree/Node.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Not","SyntaxTree/Not.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Op","SyntaxTree/Op.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::OpAssign","SyntaxTree/OpAssign.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Params","SyntaxTree/Params.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Paren","SyntaxTree/Paren.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Period","SyntaxTree/Period.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::PinnedBegin","SyntaxTree/PinnedBegin.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::PinnedVarRef","SyntaxTree/PinnedVarRef.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Program","SyntaxTree/Program.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::QSymbols","SyntaxTree/QSymbols.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::QWords","SyntaxTree/QWords.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::RAssign","SyntaxTree/RAssign.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::RationalLiteral","SyntaxTree/RationalLiteral.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Redo","SyntaxTree/Redo.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::RegexpLiteral","SyntaxTree/RegexpLiteral.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Rescue","SyntaxTree/Rescue.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::RescueEx","SyntaxTree/RescueEx.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::RescueMod","SyntaxTree/RescueMod.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::RestParam","SyntaxTree/RestParam.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Retry","SyntaxTree/Retry.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Return","SyntaxTree/Return.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Return0","SyntaxTree/Return0.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::SClass","SyntaxTree/SClass.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Statements","SyntaxTree/Statements.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::StringConcat","SyntaxTree/StringConcat.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::StringDVar","SyntaxTree/StringDVar.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::StringEmbExpr","SyntaxTree/StringEmbExpr.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::StringLiteral","SyntaxTree/StringLiteral.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Super","SyntaxTree/Super.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::SymbolLiteral","SyntaxTree/SymbolLiteral.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Symbols","SyntaxTree/Symbols.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::TStringContent","SyntaxTree/TStringContent.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::TopConstField","SyntaxTree/TopConstField.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::TopConstRef","SyntaxTree/TopConstRef.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Unary","SyntaxTree/Unary.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Undef","SyntaxTree/Undef.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Unless","SyntaxTree/Unless.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::UnlessMod","SyntaxTree/UnlessMod.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Until","SyntaxTree/Until.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::UntilMod","SyntaxTree/UntilMod.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::VCall","SyntaxTree/VCall.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::VarAlias","SyntaxTree/VarAlias.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::VarField","SyntaxTree/VarField.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::VarRef","SyntaxTree/VarRef.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::VoidStmt","SyntaxTree/VoidStmt.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::When","SyntaxTree/When.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::While","SyntaxTree/While.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::WhileMod","SyntaxTree/WhileMod.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Word","SyntaxTree/Word.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Words","SyntaxTree/Words.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::XStringLiteral","SyntaxTree/XStringLiteral.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Yield","SyntaxTree/Yield.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Yield0","SyntaxTree/Yield0.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ZSuper","SyntaxTree/ZSuper.html#method-i-child_nodes","()",""],["comments","SyntaxTree::Alias::AliasArgumentFormatter","SyntaxTree/Alias/AliasArgumentFormatter.html#method-i-comments","()",""],["comments","SyntaxTree::AryPtn::RestFormatter","SyntaxTree/AryPtn/RestFormatter.html#method-i-comments","()",""],["comments","SyntaxTree::BlockFormatter::BlockOpenFormatter","SyntaxTree/BlockFormatter/BlockOpenFormatter.html#method-i-comments","()",""],["comments","SyntaxTree::CallOperatorFormatter","SyntaxTree/CallOperatorFormatter.html#method-i-comments","()",""],["comments","SyntaxTree::Comment","SyntaxTree/Comment.html#method-i-comments","()",""],["comments","SyntaxTree::EmbDoc","SyntaxTree/EmbDoc.html#method-i-comments","()",""],["comments","SyntaxTree::HshPtn::KeywordFormatter","SyntaxTree/HshPtn/KeywordFormatter.html#method-i-comments","()",""],["comments","SyntaxTree::HshPtn::KeywordRestFormatter","SyntaxTree/HshPtn/KeywordRestFormatter.html#method-i-comments","()",""],["comments","SyntaxTree::Params::KeywordFormatter","SyntaxTree/Params/KeywordFormatter.html#method-i-comments","()",""],["comments","SyntaxTree::Params::KeywordRestFormatter","SyntaxTree/Params/KeywordRestFormatter.html#method-i-comments","()",""],["comments","SyntaxTree::Params::OptionalFormatter","SyntaxTree/Params/OptionalFormatter.html#method-i-comments","()",""],["comments","SyntaxTree::Undef::UndefArgumentFormatter","SyntaxTree/Undef/UndefArgumentFormatter.html#method-i-comments","()",""],["corrections","SyntaxTree::Visitor::VisitMethodChecker","SyntaxTree/Visitor/VisitMethodChecker.html#method-i-corrections","()",""],["current_group","PrettyPrint","PrettyPrint.html#method-i-current_group","()","<p>Returns the group most recently added to the stack.\n<p>Contrived example:\n\n<pre>out = &quot;&quot;\n=&gt; &quot;&quot;\nq = PrettyPrint.new(out) ...</pre>\n"],["deconstruct","SyntaxTree::ARef","SyntaxTree/ARef.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ARefField","SyntaxTree/ARefField.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Alias","SyntaxTree/Alias.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ArgBlock","SyntaxTree/ArgBlock.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ArgParen","SyntaxTree/ArgParen.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ArgStar","SyntaxTree/ArgStar.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Args","SyntaxTree/Args.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ArgsForward","SyntaxTree/ArgsForward.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ArrayLiteral","SyntaxTree/ArrayLiteral.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::AryPtn","SyntaxTree/AryPtn.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Assign","SyntaxTree/Assign.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Assoc","SyntaxTree/Assoc.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::AssocSplat","SyntaxTree/AssocSplat.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::BEGINBlock","SyntaxTree/BEGINBlock.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Backref","SyntaxTree/Backref.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Backtick","SyntaxTree/Backtick.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::BareAssocHash","SyntaxTree/BareAssocHash.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Begin","SyntaxTree/Begin.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Binary","SyntaxTree/Binary.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::BlockArg","SyntaxTree/BlockArg.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::BlockVar","SyntaxTree/BlockVar.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::BodyStmt","SyntaxTree/BodyStmt.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::BraceBlock","SyntaxTree/BraceBlock.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Break","SyntaxTree/Break.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::CHAR","SyntaxTree/CHAR.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::CVar","SyntaxTree/CVar.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Call","SyntaxTree/Call.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Case","SyntaxTree/Case.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ClassDeclaration","SyntaxTree/ClassDeclaration.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Command","SyntaxTree/Command.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::CommandCall","SyntaxTree/CommandCall.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Comment","SyntaxTree/Comment.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Const","SyntaxTree/Const.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ConstPathField","SyntaxTree/ConstPathField.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ConstPathRef","SyntaxTree/ConstPathRef.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ConstRef","SyntaxTree/ConstRef.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Def","SyntaxTree/Def.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::DefEndless","SyntaxTree/DefEndless.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Defined","SyntaxTree/Defined.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Defs","SyntaxTree/Defs.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::DoBlock","SyntaxTree/DoBlock.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Dot2","SyntaxTree/Dot2.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Dot3","SyntaxTree/Dot3.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::DynaSymbol","SyntaxTree/DynaSymbol.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ENDBlock","SyntaxTree/ENDBlock.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Else","SyntaxTree/Else.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Elsif","SyntaxTree/Elsif.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::EmbDoc","SyntaxTree/EmbDoc.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::EndContent","SyntaxTree/EndContent.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Ensure","SyntaxTree/Ensure.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ExcessedComma","SyntaxTree/ExcessedComma.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::FCall","SyntaxTree/FCall.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Field","SyntaxTree/Field.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::FloatLiteral","SyntaxTree/FloatLiteral.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::FndPtn","SyntaxTree/FndPtn.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::For","SyntaxTree/For.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::GVar","SyntaxTree/GVar.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::HashLiteral","SyntaxTree/HashLiteral.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Heredoc","SyntaxTree/Heredoc.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::HeredocBeg","SyntaxTree/HeredocBeg.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::HshPtn","SyntaxTree/HshPtn.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::IVar","SyntaxTree/IVar.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Ident","SyntaxTree/Ident.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::If","SyntaxTree/If.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::IfMod","SyntaxTree/IfMod.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::IfOp","SyntaxTree/IfOp.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Imaginary","SyntaxTree/Imaginary.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::In","SyntaxTree/In.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Int","SyntaxTree/Int.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Kw","SyntaxTree/Kw.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::KwRestParam","SyntaxTree/KwRestParam.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::LBrace","SyntaxTree/LBrace.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::LBracket","SyntaxTree/LBracket.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::LParen","SyntaxTree/LParen.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Label","SyntaxTree/Label.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Lambda","SyntaxTree/Lambda.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::MAssign","SyntaxTree/MAssign.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::MLHS","SyntaxTree/MLHS.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::MLHSParen","SyntaxTree/MLHSParen.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::MRHS","SyntaxTree/MRHS.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::MethodAddBlock","SyntaxTree/MethodAddBlock.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ModuleDeclaration","SyntaxTree/ModuleDeclaration.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Next","SyntaxTree/Next.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Node","SyntaxTree/Node.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Not","SyntaxTree/Not.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Op","SyntaxTree/Op.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::OpAssign","SyntaxTree/OpAssign.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Params","SyntaxTree/Params.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Paren","SyntaxTree/Paren.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Period","SyntaxTree/Period.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::PinnedBegin","SyntaxTree/PinnedBegin.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::PinnedVarRef","SyntaxTree/PinnedVarRef.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Program","SyntaxTree/Program.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::QSymbols","SyntaxTree/QSymbols.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::QWords","SyntaxTree/QWords.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::RAssign","SyntaxTree/RAssign.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::RationalLiteral","SyntaxTree/RationalLiteral.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Redo","SyntaxTree/Redo.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::RegexpLiteral","SyntaxTree/RegexpLiteral.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Rescue","SyntaxTree/Rescue.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::RescueEx","SyntaxTree/RescueEx.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::RescueMod","SyntaxTree/RescueMod.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::RestParam","SyntaxTree/RestParam.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Retry","SyntaxTree/Retry.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Return","SyntaxTree/Return.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Return0","SyntaxTree/Return0.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::SClass","SyntaxTree/SClass.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Statements","SyntaxTree/Statements.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::StringConcat","SyntaxTree/StringConcat.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::StringDVar","SyntaxTree/StringDVar.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::StringEmbExpr","SyntaxTree/StringEmbExpr.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::StringLiteral","SyntaxTree/StringLiteral.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Super","SyntaxTree/Super.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::SymbolLiteral","SyntaxTree/SymbolLiteral.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Symbols","SyntaxTree/Symbols.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::TStringContent","SyntaxTree/TStringContent.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::TopConstField","SyntaxTree/TopConstField.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::TopConstRef","SyntaxTree/TopConstRef.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Unary","SyntaxTree/Unary.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Undef","SyntaxTree/Undef.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Unless","SyntaxTree/Unless.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::UnlessMod","SyntaxTree/UnlessMod.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Until","SyntaxTree/Until.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::UntilMod","SyntaxTree/UntilMod.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::VCall","SyntaxTree/VCall.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::VarAlias","SyntaxTree/VarAlias.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::VarField","SyntaxTree/VarField.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::VarRef","SyntaxTree/VarRef.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::VoidStmt","SyntaxTree/VoidStmt.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::When","SyntaxTree/When.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::While","SyntaxTree/While.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::WhileMod","SyntaxTree/WhileMod.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Word","SyntaxTree/Word.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Words","SyntaxTree/Words.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::XStringLiteral","SyntaxTree/XStringLiteral.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Yield","SyntaxTree/Yield.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Yield0","SyntaxTree/Yield0.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ZSuper","SyntaxTree/ZSuper.html#method-i-deconstruct","()",""],["deconstruct_keys","SyntaxTree::ARef","SyntaxTree/ARef.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::ARefField","SyntaxTree/ARefField.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Alias","SyntaxTree/Alias.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::ArgBlock","SyntaxTree/ArgBlock.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::ArgParen","SyntaxTree/ArgParen.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::ArgStar","SyntaxTree/ArgStar.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Args","SyntaxTree/Args.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::ArgsForward","SyntaxTree/ArgsForward.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::ArrayLiteral","SyntaxTree/ArrayLiteral.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::AryPtn","SyntaxTree/AryPtn.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Assign","SyntaxTree/Assign.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Assoc","SyntaxTree/Assoc.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::AssocSplat","SyntaxTree/AssocSplat.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::BEGINBlock","SyntaxTree/BEGINBlock.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Backref","SyntaxTree/Backref.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Backtick","SyntaxTree/Backtick.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::BareAssocHash","SyntaxTree/BareAssocHash.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Begin","SyntaxTree/Begin.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Binary","SyntaxTree/Binary.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::BlockArg","SyntaxTree/BlockArg.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::BlockVar","SyntaxTree/BlockVar.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::BodyStmt","SyntaxTree/BodyStmt.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::BraceBlock","SyntaxTree/BraceBlock.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Break","SyntaxTree/Break.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::CHAR","SyntaxTree/CHAR.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::CVar","SyntaxTree/CVar.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Call","SyntaxTree/Call.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Case","SyntaxTree/Case.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::ClassDeclaration","SyntaxTree/ClassDeclaration.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Command","SyntaxTree/Command.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::CommandCall","SyntaxTree/CommandCall.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Comment","SyntaxTree/Comment.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Const","SyntaxTree/Const.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::ConstPathField","SyntaxTree/ConstPathField.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::ConstPathRef","SyntaxTree/ConstPathRef.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::ConstRef","SyntaxTree/ConstRef.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Def","SyntaxTree/Def.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::DefEndless","SyntaxTree/DefEndless.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Defined","SyntaxTree/Defined.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Defs","SyntaxTree/Defs.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::DoBlock","SyntaxTree/DoBlock.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Dot2","SyntaxTree/Dot2.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Dot3","SyntaxTree/Dot3.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::DynaSymbol","SyntaxTree/DynaSymbol.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::ENDBlock","SyntaxTree/ENDBlock.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Else","SyntaxTree/Else.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Elsif","SyntaxTree/Elsif.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::EmbDoc","SyntaxTree/EmbDoc.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::EndContent","SyntaxTree/EndContent.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Ensure","SyntaxTree/Ensure.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::ExcessedComma","SyntaxTree/ExcessedComma.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::FCall","SyntaxTree/FCall.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Field","SyntaxTree/Field.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::FloatLiteral","SyntaxTree/FloatLiteral.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::FndPtn","SyntaxTree/FndPtn.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::For","SyntaxTree/For.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::GVar","SyntaxTree/GVar.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::HashLiteral","SyntaxTree/HashLiteral.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Heredoc","SyntaxTree/Heredoc.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::HeredocBeg","SyntaxTree/HeredocBeg.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::HshPtn","SyntaxTree/HshPtn.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::IVar","SyntaxTree/IVar.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Ident","SyntaxTree/Ident.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::If","SyntaxTree/If.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::IfMod","SyntaxTree/IfMod.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::IfOp","SyntaxTree/IfOp.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Imaginary","SyntaxTree/Imaginary.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::In","SyntaxTree/In.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Int","SyntaxTree/Int.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Kw","SyntaxTree/Kw.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::KwRestParam","SyntaxTree/KwRestParam.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::LBrace","SyntaxTree/LBrace.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::LBracket","SyntaxTree/LBracket.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::LParen","SyntaxTree/LParen.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Label","SyntaxTree/Label.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Lambda","SyntaxTree/Lambda.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::MAssign","SyntaxTree/MAssign.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::MLHS","SyntaxTree/MLHS.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::MLHSParen","SyntaxTree/MLHSParen.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::MRHS","SyntaxTree/MRHS.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::MethodAddBlock","SyntaxTree/MethodAddBlock.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::ModuleDeclaration","SyntaxTree/ModuleDeclaration.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Next","SyntaxTree/Next.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Node","SyntaxTree/Node.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Not","SyntaxTree/Not.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Op","SyntaxTree/Op.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::OpAssign","SyntaxTree/OpAssign.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Params","SyntaxTree/Params.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Paren","SyntaxTree/Paren.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Period","SyntaxTree/Period.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::PinnedBegin","SyntaxTree/PinnedBegin.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::PinnedVarRef","SyntaxTree/PinnedVarRef.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Program","SyntaxTree/Program.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::QSymbols","SyntaxTree/QSymbols.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::QWords","SyntaxTree/QWords.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::RAssign","SyntaxTree/RAssign.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::RationalLiteral","SyntaxTree/RationalLiteral.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Redo","SyntaxTree/Redo.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::RegexpLiteral","SyntaxTree/RegexpLiteral.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Rescue","SyntaxTree/Rescue.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::RescueEx","SyntaxTree/RescueEx.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::RescueMod","SyntaxTree/RescueMod.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::RestParam","SyntaxTree/RestParam.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Retry","SyntaxTree/Retry.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Return","SyntaxTree/Return.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Return0","SyntaxTree/Return0.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::SClass","SyntaxTree/SClass.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Statements","SyntaxTree/Statements.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::StringConcat","SyntaxTree/StringConcat.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::StringDVar","SyntaxTree/StringDVar.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::StringEmbExpr","SyntaxTree/StringEmbExpr.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::StringLiteral","SyntaxTree/StringLiteral.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Super","SyntaxTree/Super.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::SymbolLiteral","SyntaxTree/SymbolLiteral.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Symbols","SyntaxTree/Symbols.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::TStringContent","SyntaxTree/TStringContent.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::TopConstField","SyntaxTree/TopConstField.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::TopConstRef","SyntaxTree/TopConstRef.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Unary","SyntaxTree/Unary.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Undef","SyntaxTree/Undef.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Unless","SyntaxTree/Unless.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::UnlessMod","SyntaxTree/UnlessMod.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Until","SyntaxTree/Until.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::UntilMod","SyntaxTree/UntilMod.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::VCall","SyntaxTree/VCall.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::VarAlias","SyntaxTree/VarAlias.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::VarField","SyntaxTree/VarField.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::VarRef","SyntaxTree/VarRef.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::VoidStmt","SyntaxTree/VoidStmt.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::When","SyntaxTree/When.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::While","SyntaxTree/While.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::WhileMod","SyntaxTree/WhileMod.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Word","SyntaxTree/Word.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Words","SyntaxTree/Words.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::XStringLiteral","SyntaxTree/XStringLiteral.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Yield","SyntaxTree/Yield.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Yield0","SyntaxTree/Yield0.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::ZSuper","SyntaxTree/ZSuper.html#method-i-deconstruct_keys","(keys)",""],["empty?","SyntaxTree::BodyStmt","SyntaxTree/BodyStmt.html#method-i-empty-3F","()",""],["empty?","SyntaxTree::Params","SyntaxTree/Params.html#method-i-empty-3F","()","<p>Params nodes are the most complicated in the tree. Occasionally you want to know if they are “empty”, …\n"],["empty?","SyntaxTree::Statements","SyntaxTree/Statements.html#method-i-empty-3F","()",""],["failure","SyntaxTree::CLI::Action","SyntaxTree/CLI/Action.html#method-i-failure","()",""],["failure","SyntaxTree::CLI::Check","SyntaxTree/CLI/Check.html#method-i-failure","()",""],["failure","SyntaxTree::CLI::Debug","SyntaxTree/CLI/Debug.html#method-i-failure","()",""],["fill_breakable","PrettyPrint","PrettyPrint.html#method-i-fill_breakable","(separator = \" \", width = separator.length)","<p>This is similar to #breakable except the decision to break or not is determined individually.\n<p>Two #fill_breakable …\n"],["fill_breakable","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-fill_breakable","(separator = \" \", width = separator.length)","<p>Appends <code>separator</code> to the output buffer. <code>width</code> is a noop here for compatibility.\n"],["find","SyntaxTree::LanguageServer::InlayHints","SyntaxTree/LanguageServer/InlayHints.html#method-c-find","(program)",""],["fixed","SyntaxTree::Location","SyntaxTree/Location.html#method-c-fixed","(line:, char:)",""],["flat","SyntaxTree::Parentheses","SyntaxTree/Parentheses.html#method-c-flat","(q)",""],["flush","PrettyPrint","PrettyPrint.html#method-i-flush","()","<p>Flushes all of the generated print tree onto the output buffer, then clears the generated tree from memory. …\n"],["flush","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-flush","()","<p>Flushes the line suffixes onto the output buffer.\n"],["for","PrettyPrint::Buffer","PrettyPrint/Buffer.html#method-c-for","(output)","<p>This is a switch for building the correct output buffer wrapper class for the given output object.\n"],["for","SyntaxTree::HashKeyFormatter","SyntaxTree/HashKeyFormatter.html#method-c-for","(container)",""],["force?","PrettyPrint::Breakable","PrettyPrint/Breakable.html#method-i-force-3F","()",""],["format","PrettyPrint","PrettyPrint.html#method-c-format","( output = \"\".dup, maxwidth = 80, newline = DEFAULT_NEWLINE, genspace = DEFAULT_GENSPACE )","<p>This is a convenience method which is same as follows:\n\n<pre>begin\n  q = PrettyPrint.new(output, maxwidth, newline, ...</pre>\n"],["format","SyntaxTree","SyntaxTree.html#method-c-format","(source)","<p>Parses the given source and returns the formatted source.\n"],["format","SyntaxTree::ARef","SyntaxTree/ARef.html#method-i-format","(q)",""],["format","SyntaxTree::ARefField","SyntaxTree/ARefField.html#method-i-format","(q)",""],["format","SyntaxTree::Alias","SyntaxTree/Alias.html#method-i-format","(q)",""],["format","SyntaxTree::Alias::AliasArgumentFormatter","SyntaxTree/Alias/AliasArgumentFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::ArgBlock","SyntaxTree/ArgBlock.html#method-i-format","(q)",""],["format","SyntaxTree::ArgParen","SyntaxTree/ArgParen.html#method-i-format","(q)",""],["format","SyntaxTree::ArgStar","SyntaxTree/ArgStar.html#method-i-format","(q)",""],["format","SyntaxTree::Args","SyntaxTree/Args.html#method-i-format","(q)",""],["format","SyntaxTree::ArgsForward","SyntaxTree/ArgsForward.html#method-i-format","(q)",""],["format","SyntaxTree::ArrayLiteral","SyntaxTree/ArrayLiteral.html#method-i-format","(q)",""],["format","SyntaxTree::ArrayLiteral::QSymbolsFormatter","SyntaxTree/ArrayLiteral/QSymbolsFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::ArrayLiteral::QWordsFormatter","SyntaxTree/ArrayLiteral/QWordsFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::ArrayLiteral::VarRefsFormatter","SyntaxTree/ArrayLiteral/VarRefsFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::AryPtn","SyntaxTree/AryPtn.html#method-i-format","(q)",""],["format","SyntaxTree::AryPtn::RestFormatter","SyntaxTree/AryPtn/RestFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::Assign","SyntaxTree/Assign.html#method-i-format","(q)",""],["format","SyntaxTree::Assoc","SyntaxTree/Assoc.html#method-i-format","(q)",""],["format","SyntaxTree::AssocSplat","SyntaxTree/AssocSplat.html#method-i-format","(q)",""],["format","SyntaxTree::BEGINBlock","SyntaxTree/BEGINBlock.html#method-i-format","(q)",""],["format","SyntaxTree::Backref","SyntaxTree/Backref.html#method-i-format","(q)",""],["format","SyntaxTree::Backtick","SyntaxTree/Backtick.html#method-i-format","(q)",""],["format","SyntaxTree::BareAssocHash","SyntaxTree/BareAssocHash.html#method-i-format","(q)",""],["format","SyntaxTree::Begin","SyntaxTree/Begin.html#method-i-format","(q)",""],["format","SyntaxTree::Binary","SyntaxTree/Binary.html#method-i-format","(q)",""],["format","SyntaxTree::BlockArg","SyntaxTree/BlockArg.html#method-i-format","(q)",""],["format","SyntaxTree::BlockFormatter","SyntaxTree/BlockFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::BlockFormatter::BlockOpenFormatter","SyntaxTree/BlockFormatter/BlockOpenFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::BlockVar","SyntaxTree/BlockVar.html#method-i-format","(q)",""],["format","SyntaxTree::BodyStmt","SyntaxTree/BodyStmt.html#method-i-format","(q)",""],["format","SyntaxTree::BraceBlock","SyntaxTree/BraceBlock.html#method-i-format","(q)",""],["format","SyntaxTree::Break","SyntaxTree/Break.html#method-i-format","(q)",""],["format","SyntaxTree::CHAR","SyntaxTree/CHAR.html#method-i-format","(q)",""],["format","SyntaxTree::CVar","SyntaxTree/CVar.html#method-i-format","(q)",""],["format","SyntaxTree::Call","SyntaxTree/Call.html#method-i-format","(q)",""],["format","SyntaxTree::CallOperatorFormatter","SyntaxTree/CallOperatorFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::Case","SyntaxTree/Case.html#method-i-format","(q)",""],["format","SyntaxTree::ClassDeclaration","SyntaxTree/ClassDeclaration.html#method-i-format","(q)",""],["format","SyntaxTree::Command","SyntaxTree/Command.html#method-i-format","(q)",""],["format","SyntaxTree::CommandCall","SyntaxTree/CommandCall.html#method-i-format","(q)",""],["format","SyntaxTree::Comment","SyntaxTree/Comment.html#method-i-format","(q)",""],["format","SyntaxTree::ConditionalFormatter","SyntaxTree/ConditionalFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::ConditionalModFormatter","SyntaxTree/ConditionalModFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::Const","SyntaxTree/Const.html#method-i-format","(q)",""],["format","SyntaxTree::ConstPathField","SyntaxTree/ConstPathField.html#method-i-format","(q)",""],["format","SyntaxTree::ConstPathRef","SyntaxTree/ConstPathRef.html#method-i-format","(q)",""],["format","SyntaxTree::ConstRef","SyntaxTree/ConstRef.html#method-i-format","(q)",""],["format","SyntaxTree::Def","SyntaxTree/Def.html#method-i-format","(q)",""],["format","SyntaxTree::DefEndless","SyntaxTree/DefEndless.html#method-i-format","(q)",""],["format","SyntaxTree::Defined","SyntaxTree/Defined.html#method-i-format","(q)",""],["format","SyntaxTree::Defs","SyntaxTree/Defs.html#method-i-format","(q)",""],["format","SyntaxTree::DoBlock","SyntaxTree/DoBlock.html#method-i-format","(q)",""],["format","SyntaxTree::Dot2","SyntaxTree/Dot2.html#method-i-format","(q)",""],["format","SyntaxTree::Dot3","SyntaxTree/Dot3.html#method-i-format","(q)",""],["format","SyntaxTree::DotFormatter","SyntaxTree/DotFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::DynaSymbol","SyntaxTree/DynaSymbol.html#method-i-format","(q)",""],["format","SyntaxTree::ENDBlock","SyntaxTree/ENDBlock.html#method-i-format","(q)",""],["format","SyntaxTree::Else","SyntaxTree/Else.html#method-i-format","(q)",""],["format","SyntaxTree::Elsif","SyntaxTree/Elsif.html#method-i-format","(q)",""],["format","SyntaxTree::EmbDoc","SyntaxTree/EmbDoc.html#method-i-format","(q)",""],["format","SyntaxTree::EndContent","SyntaxTree/EndContent.html#method-i-format","(q)",""],["format","SyntaxTree::Ensure","SyntaxTree/Ensure.html#method-i-format","(q)",""],["format","SyntaxTree::ExcessedComma","SyntaxTree/ExcessedComma.html#method-i-format","(q)",""],["format","SyntaxTree::FCall","SyntaxTree/FCall.html#method-i-format","(q)",""],["format","SyntaxTree::Field","SyntaxTree/Field.html#method-i-format","(q)",""],["format","SyntaxTree::FloatLiteral","SyntaxTree/FloatLiteral.html#method-i-format","(q)",""],["format","SyntaxTree::FlowControlFormatter","SyntaxTree/FlowControlFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::FndPtn","SyntaxTree/FndPtn.html#method-i-format","(q)",""],["format","SyntaxTree::For","SyntaxTree/For.html#method-i-format","(q)",""],["format","SyntaxTree::Formatter","SyntaxTree/Formatter.html#method-i-format","(node, stackable: true)",""],["format","SyntaxTree::GVar","SyntaxTree/GVar.html#method-i-format","(q)",""],["format","SyntaxTree::HashLiteral","SyntaxTree/HashLiteral.html#method-i-format","(q)",""],["format","SyntaxTree::Heredoc","SyntaxTree/Heredoc.html#method-i-format","(q)",""],["format","SyntaxTree::HeredocBeg","SyntaxTree/HeredocBeg.html#method-i-format","(q)",""],["format","SyntaxTree::HshPtn","SyntaxTree/HshPtn.html#method-i-format","(q)",""],["format","SyntaxTree::HshPtn::KeywordFormatter","SyntaxTree/HshPtn/KeywordFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::HshPtn::KeywordRestFormatter","SyntaxTree/HshPtn/KeywordRestFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::IVar","SyntaxTree/IVar.html#method-i-format","(q)",""],["format","SyntaxTree::Ident","SyntaxTree/Ident.html#method-i-format","(q)",""],["format","SyntaxTree::If","SyntaxTree/If.html#method-i-format","(q)",""],["format","SyntaxTree::IfMod","SyntaxTree/IfMod.html#method-i-format","(q)",""],["format","SyntaxTree::IfOp","SyntaxTree/IfOp.html#method-i-format","(q)",""],["format","SyntaxTree::Imaginary","SyntaxTree/Imaginary.html#method-i-format","(q)",""],["format","SyntaxTree::In","SyntaxTree/In.html#method-i-format","(q)",""],["format","SyntaxTree::Int","SyntaxTree/Int.html#method-i-format","(q)",""],["format","SyntaxTree::Kw","SyntaxTree/Kw.html#method-i-format","(q)",""],["format","SyntaxTree::KwRestParam","SyntaxTree/KwRestParam.html#method-i-format","(q)",""],["format","SyntaxTree::LBrace","SyntaxTree/LBrace.html#method-i-format","(q)",""],["format","SyntaxTree::LBracket","SyntaxTree/LBracket.html#method-i-format","(q)",""],["format","SyntaxTree::LParen","SyntaxTree/LParen.html#method-i-format","(q)",""],["format","SyntaxTree::Label","SyntaxTree/Label.html#method-i-format","(q)",""],["format","SyntaxTree::Lambda","SyntaxTree/Lambda.html#method-i-format","(q)",""],["format","SyntaxTree::LoopFormatter","SyntaxTree/LoopFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::MAssign","SyntaxTree/MAssign.html#method-i-format","(q)",""],["format","SyntaxTree::MLHS","SyntaxTree/MLHS.html#method-i-format","(q)",""],["format","SyntaxTree::MLHSParen","SyntaxTree/MLHSParen.html#method-i-format","(q)",""],["format","SyntaxTree::MRHS","SyntaxTree/MRHS.html#method-i-format","(q)",""],["format","SyntaxTree::MethodAddBlock","SyntaxTree/MethodAddBlock.html#method-i-format","(q)",""],["format","SyntaxTree::ModuleDeclaration","SyntaxTree/ModuleDeclaration.html#method-i-format","(q)",""],["format","SyntaxTree::Next","SyntaxTree/Next.html#method-i-format","(q)",""],["format","SyntaxTree::Node","SyntaxTree/Node.html#method-i-format","(q)",""],["format","SyntaxTree::Not","SyntaxTree/Not.html#method-i-format","(q)",""],["format","SyntaxTree::Op","SyntaxTree/Op.html#method-i-format","(q)",""],["format","SyntaxTree::OpAssign","SyntaxTree/OpAssign.html#method-i-format","(q)",""],["format","SyntaxTree::Params","SyntaxTree/Params.html#method-i-format","(q)",""],["format","SyntaxTree::Params::KeywordFormatter","SyntaxTree/Params/KeywordFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::Params::KeywordRestFormatter","SyntaxTree/Params/KeywordRestFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::Params::OptionalFormatter","SyntaxTree/Params/OptionalFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::Paren","SyntaxTree/Paren.html#method-i-format","(q)",""],["format","SyntaxTree::Period","SyntaxTree/Period.html#method-i-format","(q)",""],["format","SyntaxTree::PinnedBegin","SyntaxTree/PinnedBegin.html#method-i-format","(q)",""],["format","SyntaxTree::PinnedVarRef","SyntaxTree/PinnedVarRef.html#method-i-format","(q)",""],["format","SyntaxTree::Program","SyntaxTree/Program.html#method-i-format","(q)",""],["format","SyntaxTree::QSymbols","SyntaxTree/QSymbols.html#method-i-format","(q)",""],["format","SyntaxTree::QWords","SyntaxTree/QWords.html#method-i-format","(q)",""],["format","SyntaxTree::RAssign","SyntaxTree/RAssign.html#method-i-format","(q)",""],["format","SyntaxTree::RationalLiteral","SyntaxTree/RationalLiteral.html#method-i-format","(q)",""],["format","SyntaxTree::Redo","SyntaxTree/Redo.html#method-i-format","(q)",""],["format","SyntaxTree::RegexpLiteral","SyntaxTree/RegexpLiteral.html#method-i-format","(q)",""],["format","SyntaxTree::Rescue","SyntaxTree/Rescue.html#method-i-format","(q)",""],["format","SyntaxTree::RescueEx","SyntaxTree/RescueEx.html#method-i-format","(q)",""],["format","SyntaxTree::RescueMod","SyntaxTree/RescueMod.html#method-i-format","(q)",""],["format","SyntaxTree::RestParam","SyntaxTree/RestParam.html#method-i-format","(q)",""],["format","SyntaxTree::Retry","SyntaxTree/Retry.html#method-i-format","(q)",""],["format","SyntaxTree::Return","SyntaxTree/Return.html#method-i-format","(q)",""],["format","SyntaxTree::Return0","SyntaxTree/Return0.html#method-i-format","(q)",""],["format","SyntaxTree::SClass","SyntaxTree/SClass.html#method-i-format","(q)",""],["format","SyntaxTree::Statements","SyntaxTree/Statements.html#method-i-format","(q)",""],["format","SyntaxTree::StringConcat","SyntaxTree/StringConcat.html#method-i-format","(q)",""],["format","SyntaxTree::StringDVar","SyntaxTree/StringDVar.html#method-i-format","(q)",""],["format","SyntaxTree::StringEmbExpr","SyntaxTree/StringEmbExpr.html#method-i-format","(q)",""],["format","SyntaxTree::StringLiteral","SyntaxTree/StringLiteral.html#method-i-format","(q)",""],["format","SyntaxTree::Super","SyntaxTree/Super.html#method-i-format","(q)",""],["format","SyntaxTree::SymbolLiteral","SyntaxTree/SymbolLiteral.html#method-i-format","(q)",""],["format","SyntaxTree::Symbols","SyntaxTree/Symbols.html#method-i-format","(q)",""],["format","SyntaxTree::TStringContent","SyntaxTree/TStringContent.html#method-i-format","(q)",""],["format","SyntaxTree::TopConstField","SyntaxTree/TopConstField.html#method-i-format","(q)",""],["format","SyntaxTree::TopConstRef","SyntaxTree/TopConstRef.html#method-i-format","(q)",""],["format","SyntaxTree::Unary","SyntaxTree/Unary.html#method-i-format","(q)",""],["format","SyntaxTree::Undef","SyntaxTree/Undef.html#method-i-format","(q)",""],["format","SyntaxTree::Undef::UndefArgumentFormatter","SyntaxTree/Undef/UndefArgumentFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::Unless","SyntaxTree/Unless.html#method-i-format","(q)",""],["format","SyntaxTree::UnlessMod","SyntaxTree/UnlessMod.html#method-i-format","(q)",""],["format","SyntaxTree::Until","SyntaxTree/Until.html#method-i-format","(q)",""],["format","SyntaxTree::UntilMod","SyntaxTree/UntilMod.html#method-i-format","(q)",""],["format","SyntaxTree::VCall","SyntaxTree/VCall.html#method-i-format","(q)",""],["format","SyntaxTree::VarAlias","SyntaxTree/VarAlias.html#method-i-format","(q)",""],["format","SyntaxTree::VarField","SyntaxTree/VarField.html#method-i-format","(q)",""],["format","SyntaxTree::VarRef","SyntaxTree/VarRef.html#method-i-format","(q)",""],["format","SyntaxTree::VoidStmt","SyntaxTree/VoidStmt.html#method-i-format","(q)",""],["format","SyntaxTree::When","SyntaxTree/When.html#method-i-format","(q)",""],["format","SyntaxTree::While","SyntaxTree/While.html#method-i-format","(q)",""],["format","SyntaxTree::WhileMod","SyntaxTree/WhileMod.html#method-i-format","(q)",""],["format","SyntaxTree::Word","SyntaxTree/Word.html#method-i-format","(q)",""],["format","SyntaxTree::Words","SyntaxTree/Words.html#method-i-format","(q)",""],["format","SyntaxTree::XStringLiteral","SyntaxTree/XStringLiteral.html#method-i-format","(q)",""],["format","SyntaxTree::Yield","SyntaxTree/Yield.html#method-i-format","(q)",""],["format","SyntaxTree::Yield0","SyntaxTree/Yield0.html#method-i-format","(q)",""],["format","SyntaxTree::ZSuper","SyntaxTree/ZSuper.html#method-i-format","(q)",""],["format_each","SyntaxTree::Formatter","SyntaxTree/Formatter.html#method-i-format_each","(nodes)",""],["format_key","SyntaxTree::BareAssocHash","SyntaxTree/BareAssocHash.html#method-i-format_key","(q, key)",""],["format_key","SyntaxTree::HashKeyFormatter::Labels","SyntaxTree/HashKeyFormatter/Labels.html#method-i-format_key","(q, key)",""],["format_key","SyntaxTree::HashKeyFormatter::Rockets","SyntaxTree/HashKeyFormatter/Rockets.html#method-i-format_key","(q, key)",""],["format_key","SyntaxTree::HashLiteral","SyntaxTree/HashLiteral.html#method-i-format_key","(q, key)",""],["gray","SyntaxTree::CLI::Color","SyntaxTree/CLI/Color.html#method-c-gray","(value)",""],["group","PrettyPrint","PrettyPrint.html#method-i-group","( indent = 0, open_object = \"\", close_object = \"\", open_width = open_object.length, close_width = close_object.length )","<p>Groups line break hints added in the block. The line break hints are all to be used or not.\n<p>If <code>indent</code> …\n"],["group","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-group","( indent = nil, open_object = \"\", close_object = \"\", open_width = nil, close_width = nil )","<p>Opens a block for grouping objects to be pretty printed.\n<p>Arguments:\n<p><code>indent</code> - noop argument. Present for …\n"],["if_break","PrettyPrint","PrettyPrint.html#method-i-if_break","()","<p>Inserts an IfBreak node with the contents of the block being added to its list of nodes that should be …\n"],["if_break","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-if_break","()","<p>Effectively unnecessary, but here for compatibility.\n"],["if_flat","PrettyPrint::IfBreakBuilder","PrettyPrint/IfBreakBuilder.html#method-i-if_flat","(&block)",""],["if_flat","PrettyPrint::SingleLine::IfBreakBuilder","PrettyPrint/SingleLine/IfBreakBuilder.html#method-i-if_flat","()",""],["ignore?","SyntaxTree::Comment","SyntaxTree/Comment.html#method-i-ignore-3F","()",""],["ignore?","SyntaxTree::EmbDoc","SyntaxTree/EmbDoc.html#method-i-ignore-3F","()",""],["indent","PrettyPrint","PrettyPrint.html#method-i-indent","()","<p>Very similar to the #nest method, this indents the nested content by one level by inserting an Indent …\n"],["indent","PrettyPrint::IndentLevel","PrettyPrint/IndentLevel.html#method-i-indent","(part = IndentPart)",""],["indent","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-indent","()","<p>A noop that immediately yields.\n"],["indent?","PrettyPrint::Breakable","PrettyPrint/Breakable.html#method-i-indent-3F","()",""],["inline?","SyntaxTree::EmbDoc","SyntaxTree/EmbDoc.html#method-i-inline-3F","()",""],["leading!","SyntaxTree::Comment","SyntaxTree/Comment.html#method-i-leading-21","()",""],["leading?","SyntaxTree::Comment","SyntaxTree/Comment.html#method-i-leading-3F","()",""],["line_suffix","PrettyPrint","PrettyPrint.html#method-i-line_suffix","(priority: LineSuffix::DEFAULT_PRIORITY)","<p>Inserts a LineSuffix node into the print tree. The contents of the node are determined by the block. …\n"],["line_suffix","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-line_suffix","()","<p>Changes the target output buffer to the line suffix output buffer which will get flushed at the end of …\n"],["lines","SyntaxTree::Location","SyntaxTree/Location.html#method-i-lines","()",""],["locked?","SyntaxTree::Quotes","SyntaxTree/Quotes.html#method-c-locked-3F","(node)","<p>If there is some part of this string that matches an escape sequence or that contains the interpolation …\n"],["match?","SyntaxTree::TStringContent","SyntaxTree/TStringContent.html#method-i-match-3F","(pattern)",""],["match?","SyntaxTree::Word","SyntaxTree/Word.html#method-i-match-3F","(pattern)",""],["matching","SyntaxTree::Quotes","SyntaxTree/Quotes.html#method-c-matching","(quote)","<p>Find the matching closing quote for the given opening quote.\n"],["missing_hash_value","SyntaxTree::LanguageServer::InlayHints","SyntaxTree/LanguageServer/InlayHints.html#method-i-missing_hash_value","(key, location)","<p>Adds the implicitly referenced value (local variable or method call) that is added into a hash when the …\n"],["nest","PrettyPrint","PrettyPrint.html#method-i-nest","(indent)","<p>Increases left margin after newline with <code>indent</code> for line breaks added in the block.\n"],["nest","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-nest","(indent)","<p>Takes <code>indent</code> arg, but does nothing with it.\n<p>Yields to a block.\n"],["new","PrettyPrint","PrettyPrint.html#method-c-new","( output = \"\".dup, maxwidth = 80, newline = DEFAULT_NEWLINE, &genspace )","<p>Creates a buffer for pretty printing.\n<p><code>output</code> is an output target. If it is not specified, ” is …\n"],["new","PrettyPrint::Align","PrettyPrint/Align.html#method-c-new","(indent:, contents: [])",""],["new","PrettyPrint::Breakable","PrettyPrint/Breakable.html#method-c-new","( separator = \" \", width = separator.length, force: false, indent: true )",""],["new","PrettyPrint::Buffer::ArrayBuffer","PrettyPrint/Buffer/ArrayBuffer.html#method-c-new","(output = [])",""],["new","PrettyPrint::Buffer::DefaultBuffer","PrettyPrint/Buffer/DefaultBuffer.html#method-c-new","(output = [])",""],["new","PrettyPrint::Buffer::StringBuffer","PrettyPrint/Buffer/StringBuffer.html#method-c-new","(output = \"\".dup)",""],["new","PrettyPrint::Group","PrettyPrint/Group.html#method-c-new","(depth, contents: [])",""],["new","PrettyPrint::IfBreak","PrettyPrint/IfBreak.html#method-c-new","(break_contents: [], flat_contents: [])",""],["new","PrettyPrint::IfBreakBuilder","PrettyPrint/IfBreakBuilder.html#method-c-new","(builder, if_break)",""],["new","PrettyPrint::Indent","PrettyPrint/Indent.html#method-c-new","(contents: [])",""],["new","PrettyPrint::IndentLevel","PrettyPrint/IndentLevel.html#method-c-new","( genspace:, value: genspace.call(0), length: 0, queue: [], root: nil )",""],["new","PrettyPrint::LineSuffix","PrettyPrint/LineSuffix.html#method-c-new","(priority: DEFAULT_PRIORITY, contents: [])",""],["new","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-c-new","(output, maxwidth = nil, newline = nil)","<p>Create a PrettyPrint::SingleLine object\n<p>Arguments:\n<p><code>output</code> - String (or similar) to store rendered text. …\n"],["new","PrettyPrint::Text","PrettyPrint/Text.html#method-c-new","()",""],["new","SyntaxTree::ARef","SyntaxTree/ARef.html#method-c-new","(collection:, index:, location:, comments: [])",""],["new","SyntaxTree::ARefField","SyntaxTree/ARefField.html#method-c-new","(collection:, index:, location:, comments: [])",""],["new","SyntaxTree::Alias","SyntaxTree/Alias.html#method-c-new","(left:, right:, location:, comments: [])",""],["new","SyntaxTree::Alias::AliasArgumentFormatter","SyntaxTree/Alias/AliasArgumentFormatter.html#method-c-new","(argument)",""],["new","SyntaxTree::ArgBlock","SyntaxTree/ArgBlock.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::ArgParen","SyntaxTree/ArgParen.html#method-c-new","(arguments:, location:, comments: [])",""],["new","SyntaxTree::ArgStar","SyntaxTree/ArgStar.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Args","SyntaxTree/Args.html#method-c-new","(parts:, location:, comments: [])",""],["new","SyntaxTree::ArgsForward","SyntaxTree/ArgsForward.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::ArrayLiteral","SyntaxTree/ArrayLiteral.html#method-c-new","(lbracket:, contents:, location:, comments: [])",""],["new","SyntaxTree::ArrayLiteral::QSymbolsFormatter","SyntaxTree/ArrayLiteral/QSymbolsFormatter.html#method-c-new","(contents)",""],["new","SyntaxTree::ArrayLiteral::QWordsFormatter","SyntaxTree/ArrayLiteral/QWordsFormatter.html#method-c-new","(contents)",""],["new","SyntaxTree::ArrayLiteral::VarRefsFormatter","SyntaxTree/ArrayLiteral/VarRefsFormatter.html#method-c-new","(contents)",""],["new","SyntaxTree::AryPtn","SyntaxTree/AryPtn.html#method-c-new","( constant:, requireds:, rest:, posts:, location:, comments: [] )",""],["new","SyntaxTree::AryPtn::RestFormatter","SyntaxTree/AryPtn/RestFormatter.html#method-c-new","(value)",""],["new","SyntaxTree::Assign","SyntaxTree/Assign.html#method-c-new","(target:, value:, location:, comments: [])",""],["new","SyntaxTree::Assoc","SyntaxTree/Assoc.html#method-c-new","(key:, value:, location:, comments: [])",""],["new","SyntaxTree::AssocSplat","SyntaxTree/AssocSplat.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::BEGINBlock","SyntaxTree/BEGINBlock.html#method-c-new","(lbrace:, statements:, location:, comments: [])",""],["new","SyntaxTree::Backref","SyntaxTree/Backref.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Backtick","SyntaxTree/Backtick.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::BareAssocHash","SyntaxTree/BareAssocHash.html#method-c-new","(assocs:, location:, comments: [])",""],["new","SyntaxTree::Begin","SyntaxTree/Begin.html#method-c-new","(bodystmt:, location:, comments: [])",""],["new","SyntaxTree::Binary","SyntaxTree/Binary.html#method-c-new","(left:, operator:, right:, location:, comments: [])",""],["new","SyntaxTree::BlockArg","SyntaxTree/BlockArg.html#method-c-new","(name:, location:, comments: [])",""],["new","SyntaxTree::BlockFormatter","SyntaxTree/BlockFormatter.html#method-c-new","(node, block_open, block_close, statements)",""],["new","SyntaxTree::BlockFormatter::BlockOpenFormatter","SyntaxTree/BlockFormatter/BlockOpenFormatter.html#method-c-new","(text, node)",""],["new","SyntaxTree::BlockVar","SyntaxTree/BlockVar.html#method-c-new","(params:, locals:, location:, comments: [])",""],["new","SyntaxTree::BodyStmt","SyntaxTree/BodyStmt.html#method-c-new","( statements:, rescue_clause:, else_clause:, ensure_clause:, location:, comments: [] )",""],["new","SyntaxTree::BraceBlock","SyntaxTree/BraceBlock.html#method-c-new","(lbrace:, block_var:, statements:, location:, comments: [])",""],["new","SyntaxTree::Break","SyntaxTree/Break.html#method-c-new","(arguments:, location:, comments: [])",""],["new","SyntaxTree::CHAR","SyntaxTree/CHAR.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::CLI::Color","SyntaxTree/CLI/Color.html#method-c-new","(value, code)",""],["new","SyntaxTree::CVar","SyntaxTree/CVar.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Call","SyntaxTree/Call.html#method-c-new","( receiver:, operator:, message:, arguments:, location:, comments: [] )",""],["new","SyntaxTree::CallOperatorFormatter","SyntaxTree/CallOperatorFormatter.html#method-c-new","(operator)",""],["new","SyntaxTree::Case","SyntaxTree/Case.html#method-c-new","(keyword:, value:, consequent:, location:, comments: [])",""],["new","SyntaxTree::ClassDeclaration","SyntaxTree/ClassDeclaration.html#method-c-new","(constant:, superclass:, bodystmt:, location:, comments: [])",""],["new","SyntaxTree::Comma","SyntaxTree/Comma.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::Command","SyntaxTree/Command.html#method-c-new","(message:, arguments:, location:, comments: [])",""],["new","SyntaxTree::CommandCall","SyntaxTree/CommandCall.html#method-c-new","( receiver:, operator:, message:, arguments:, location:, comments: [] )",""],["new","SyntaxTree::Comment","SyntaxTree/Comment.html#method-c-new","(value:, inline:, location:)",""],["new","SyntaxTree::Comment::List","SyntaxTree/Comment/List.html#method-c-new","(comments)",""],["new","SyntaxTree::ConditionalFormatter","SyntaxTree/ConditionalFormatter.html#method-c-new","(keyword, node)",""],["new","SyntaxTree::ConditionalModFormatter","SyntaxTree/ConditionalModFormatter.html#method-c-new","(keyword, node)",""],["new","SyntaxTree::Const","SyntaxTree/Const.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::ConstPathField","SyntaxTree/ConstPathField.html#method-c-new","(parent:, constant:, location:, comments: [])",""],["new","SyntaxTree::ConstPathRef","SyntaxTree/ConstPathRef.html#method-c-new","(parent:, constant:, location:, comments: [])",""],["new","SyntaxTree::ConstRef","SyntaxTree/ConstRef.html#method-c-new","(constant:, location:, comments: [])",""],["new","SyntaxTree::Def","SyntaxTree/Def.html#method-c-new","(name:, params:, bodystmt:, location:, comments: [])",""],["new","SyntaxTree::DefEndless","SyntaxTree/DefEndless.html#method-c-new","( target:, operator:, name:, paren:, statement:, location:, comments: [] )",""],["new","SyntaxTree::Defined","SyntaxTree/Defined.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Defs","SyntaxTree/Defs.html#method-c-new","( target:, operator:, name:, params:, bodystmt:, location:, comments: [] )",""],["new","SyntaxTree::DoBlock","SyntaxTree/DoBlock.html#method-c-new","(keyword:, block_var:, bodystmt:, location:, comments: [])",""],["new","SyntaxTree::Dot2","SyntaxTree/Dot2.html#method-c-new","(left:, right:, location:, comments: [])",""],["new","SyntaxTree::Dot3","SyntaxTree/Dot3.html#method-c-new","(left:, right:, location:, comments: [])",""],["new","SyntaxTree::DotFormatter","SyntaxTree/DotFormatter.html#method-c-new","(operator, node)",""],["new","SyntaxTree::DynaSymbol","SyntaxTree/DynaSymbol.html#method-c-new","(parts:, quote:, location:, comments: [])",""],["new","SyntaxTree::ENDBlock","SyntaxTree/ENDBlock.html#method-c-new","(lbrace:, statements:, location:, comments: [])",""],["new","SyntaxTree::Else","SyntaxTree/Else.html#method-c-new","(statements:, location:, comments: [])",""],["new","SyntaxTree::Elsif","SyntaxTree/Elsif.html#method-c-new","( predicate:, statements:, consequent:, location:, comments: [] )",""],["new","SyntaxTree::EmbDoc","SyntaxTree/EmbDoc.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::EmbExprBeg","SyntaxTree/EmbExprBeg.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::EmbExprEnd","SyntaxTree/EmbExprEnd.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::EmbVar","SyntaxTree/EmbVar.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::EndContent","SyntaxTree/EndContent.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Ensure","SyntaxTree/Ensure.html#method-c-new","(keyword:, statements:, location:, comments: [])",""],["new","SyntaxTree::ExcessedComma","SyntaxTree/ExcessedComma.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::FCall","SyntaxTree/FCall.html#method-c-new","(value:, arguments:, location:, comments: [])",""],["new","SyntaxTree::Field","SyntaxTree/Field.html#method-c-new","(parent:, operator:, name:, location:, comments: [])",""],["new","SyntaxTree::FloatLiteral","SyntaxTree/FloatLiteral.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::FlowControlFormatter","SyntaxTree/FlowControlFormatter.html#method-c-new","(keyword, node)",""],["new","SyntaxTree::FndPtn","SyntaxTree/FndPtn.html#method-c-new","(constant:, left:, values:, right:, location:, comments: [])",""],["new","SyntaxTree::For","SyntaxTree/For.html#method-c-new","(index:, collection:, statements:, location:, comments: [])",""],["new","SyntaxTree::Formatter","SyntaxTree/Formatter.html#method-c-new","(source, ...)",""],["new","SyntaxTree::GVar","SyntaxTree/GVar.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::HashLiteral","SyntaxTree/HashLiteral.html#method-c-new","(lbrace:, assocs:, location:, comments: [])",""],["new","SyntaxTree::Heredoc","SyntaxTree/Heredoc.html#method-c-new","(beginning:, ending: nil, parts: [], location:, comments: [])",""],["new","SyntaxTree::HeredocBeg","SyntaxTree/HeredocBeg.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::HshPtn","SyntaxTree/HshPtn.html#method-c-new","(constant:, keywords:, keyword_rest:, location:, comments: [])",""],["new","SyntaxTree::HshPtn::KeywordFormatter","SyntaxTree/HshPtn/KeywordFormatter.html#method-c-new","(key, value)",""],["new","SyntaxTree::HshPtn::KeywordRestFormatter","SyntaxTree/HshPtn/KeywordRestFormatter.html#method-c-new","(keyword_rest)",""],["new","SyntaxTree::IVar","SyntaxTree/IVar.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Ident","SyntaxTree/Ident.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::If","SyntaxTree/If.html#method-c-new","( predicate:, statements:, consequent:, location:, comments: [] )",""],["new","SyntaxTree::IfMod","SyntaxTree/IfMod.html#method-c-new","(statement:, predicate:, location:, comments: [])",""],["new","SyntaxTree::IfOp","SyntaxTree/IfOp.html#method-c-new","(predicate:, truthy:, falsy:, location:, comments: [])",""],["new","SyntaxTree::Imaginary","SyntaxTree/Imaginary.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::In","SyntaxTree/In.html#method-c-new","(pattern:, statements:, consequent:, location:, comments: [])",""],["new","SyntaxTree::Int","SyntaxTree/Int.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Kw","SyntaxTree/Kw.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::KwRestParam","SyntaxTree/KwRestParam.html#method-c-new","(name:, location:, comments: [])",""],["new","SyntaxTree::LBrace","SyntaxTree/LBrace.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::LBracket","SyntaxTree/LBracket.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::LParen","SyntaxTree/LParen.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Label","SyntaxTree/Label.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::LabelEnd","SyntaxTree/LabelEnd.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::Lambda","SyntaxTree/Lambda.html#method-c-new","(params:, statements:, location:, comments: [])",""],["new","SyntaxTree::LanguageServer","SyntaxTree/LanguageServer.html#method-c-new","(input: STDIN, output: STDOUT)",""],["new","SyntaxTree::LanguageServer::InlayHints","SyntaxTree/LanguageServer/InlayHints.html#method-c-new","()",""],["new","SyntaxTree::Location","SyntaxTree/Location.html#method-c-new","(start_line:, start_char:, end_line:, end_char:)",""],["new","SyntaxTree::LoopFormatter","SyntaxTree/LoopFormatter.html#method-c-new","(keyword, node, statements)",""],["new","SyntaxTree::MAssign","SyntaxTree/MAssign.html#method-c-new","(target:, value:, location:, comments: [])",""],["new","SyntaxTree::MLHS","SyntaxTree/MLHS.html#method-c-new","(parts:, comma: false, location:, comments: [])",""],["new","SyntaxTree::MLHSParen","SyntaxTree/MLHSParen.html#method-c-new","(contents:, location:, comments: [])",""],["new","SyntaxTree::MRHS","SyntaxTree/MRHS.html#method-c-new","(parts:, location:, comments: [])",""],["new","SyntaxTree::MethodAddBlock","SyntaxTree/MethodAddBlock.html#method-c-new","(call:, block:, location:, comments: [])",""],["new","SyntaxTree::ModuleDeclaration","SyntaxTree/ModuleDeclaration.html#method-c-new","(constant:, bodystmt:, location:, comments: [])",""],["new","SyntaxTree::Next","SyntaxTree/Next.html#method-c-new","(arguments:, location:, comments: [])",""],["new","SyntaxTree::Not","SyntaxTree/Not.html#method-c-new","(statement:, parentheses:, location:, comments: [])",""],["new","SyntaxTree::Op","SyntaxTree/Op.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::OpAssign","SyntaxTree/OpAssign.html#method-c-new","(target:, operator:, value:, location:, comments: [])",""],["new","SyntaxTree::Params","SyntaxTree/Params.html#method-c-new","( requireds: [], optionals: [], rest: nil, posts: [], keywords: [], keyword_rest: nil, block: nil, location:, comments: [] )",""],["new","SyntaxTree::Params::KeywordFormatter","SyntaxTree/Params/KeywordFormatter.html#method-c-new","(name, value)",""],["new","SyntaxTree::Params::KeywordRestFormatter","SyntaxTree/Params/KeywordRestFormatter.html#method-c-new","(value)",""],["new","SyntaxTree::Params::OptionalFormatter","SyntaxTree/Params/OptionalFormatter.html#method-c-new","(name, value)",""],["new","SyntaxTree::Paren","SyntaxTree/Paren.html#method-c-new","(lparen:, contents:, location:, comments: [])",""],["new","SyntaxTree::Parser","SyntaxTree/Parser.html#method-c-new","(source, *)",""],["new","SyntaxTree::Parser::MultiByteString","SyntaxTree/Parser/MultiByteString.html#method-c-new","(start, line)",""],["new","SyntaxTree::Parser::ParseError","SyntaxTree/Parser/ParseError.html#method-c-new","(error, lineno, column)",""],["new","SyntaxTree::Parser::SingleByteString","SyntaxTree/Parser/SingleByteString.html#method-c-new","(start)",""],["new","SyntaxTree::Period","SyntaxTree/Period.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::PinnedBegin","SyntaxTree/PinnedBegin.html#method-c-new","(statement:, location:, comments: [])",""],["new","SyntaxTree::PinnedVarRef","SyntaxTree/PinnedVarRef.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Program","SyntaxTree/Program.html#method-c-new","(statements:, location:, comments: [])",""],["new","SyntaxTree::QSymbols","SyntaxTree/QSymbols.html#method-c-new","(beginning:, elements:, location:, comments: [])",""],["new","SyntaxTree::QSymbolsBeg","SyntaxTree/QSymbolsBeg.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::QWords","SyntaxTree/QWords.html#method-c-new","(beginning:, elements:, location:, comments: [])",""],["new","SyntaxTree::QWordsBeg","SyntaxTree/QWordsBeg.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::RAssign","SyntaxTree/RAssign.html#method-c-new","(value:, operator:, pattern:, location:, comments: [])",""],["new","SyntaxTree::RBrace","SyntaxTree/RBrace.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::RBracket","SyntaxTree/RBracket.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::RParen","SyntaxTree/RParen.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::RationalLiteral","SyntaxTree/RationalLiteral.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Redo","SyntaxTree/Redo.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::RegexpBeg","SyntaxTree/RegexpBeg.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::RegexpContent","SyntaxTree/RegexpContent.html#method-c-new","(beginning:, parts:, location:)",""],["new","SyntaxTree::RegexpEnd","SyntaxTree/RegexpEnd.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::RegexpLiteral","SyntaxTree/RegexpLiteral.html#method-c-new","(beginning:, ending:, parts:, location:, comments: [])",""],["new","SyntaxTree::Rescue","SyntaxTree/Rescue.html#method-c-new","( exception:, statements:, consequent:, location:, comments: [] )",""],["new","SyntaxTree::RescueEx","SyntaxTree/RescueEx.html#method-c-new","(exceptions:, variable:, location:, comments: [])",""],["new","SyntaxTree::RescueMod","SyntaxTree/RescueMod.html#method-c-new","(statement:, value:, location:, comments: [])",""],["new","SyntaxTree::RestParam","SyntaxTree/RestParam.html#method-c-new","(name:, location:, comments: [])",""],["new","SyntaxTree::Retry","SyntaxTree/Retry.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Return","SyntaxTree/Return.html#method-c-new","(arguments:, location:, comments: [])",""],["new","SyntaxTree::Return0","SyntaxTree/Return0.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::SClass","SyntaxTree/SClass.html#method-c-new","(target:, bodystmt:, location:, comments: [])",""],["new","SyntaxTree::Statements","SyntaxTree/Statements.html#method-c-new","(parser, body:, location:, comments: [])",""],["new","SyntaxTree::StringConcat","SyntaxTree/StringConcat.html#method-c-new","(left:, right:, location:, comments: [])",""],["new","SyntaxTree::StringContent","SyntaxTree/StringContent.html#method-c-new","(parts:, location:)",""],["new","SyntaxTree::StringDVar","SyntaxTree/StringDVar.html#method-c-new","(variable:, location:, comments: [])",""],["new","SyntaxTree::StringEmbExpr","SyntaxTree/StringEmbExpr.html#method-c-new","(statements:, location:, comments: [])",""],["new","SyntaxTree::StringLiteral","SyntaxTree/StringLiteral.html#method-c-new","(parts:, quote:, location:, comments: [])",""],["new","SyntaxTree::Super","SyntaxTree/Super.html#method-c-new","(arguments:, location:, comments: [])",""],["new","SyntaxTree::SymBeg","SyntaxTree/SymBeg.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::SymbolContent","SyntaxTree/SymbolContent.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::SymbolLiteral","SyntaxTree/SymbolLiteral.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Symbols","SyntaxTree/Symbols.html#method-c-new","(beginning:, elements:, location:, comments: [])",""],["new","SyntaxTree::SymbolsBeg","SyntaxTree/SymbolsBeg.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::TLamBeg","SyntaxTree/TLamBeg.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::TLambda","SyntaxTree/TLambda.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::TStringBeg","SyntaxTree/TStringBeg.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::TStringContent","SyntaxTree/TStringContent.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::TStringEnd","SyntaxTree/TStringEnd.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::TopConstField","SyntaxTree/TopConstField.html#method-c-new","(constant:, location:, comments: [])",""],["new","SyntaxTree::TopConstRef","SyntaxTree/TopConstRef.html#method-c-new","(constant:, location:, comments: [])",""],["new","SyntaxTree::Unary","SyntaxTree/Unary.html#method-c-new","(operator:, statement:, location:, comments: [])",""],["new","SyntaxTree::Undef","SyntaxTree/Undef.html#method-c-new","(symbols:, location:, comments: [])",""],["new","SyntaxTree::Undef::UndefArgumentFormatter","SyntaxTree/Undef/UndefArgumentFormatter.html#method-c-new","(node)",""],["new","SyntaxTree::Unless","SyntaxTree/Unless.html#method-c-new","( predicate:, statements:, consequent:, location:, comments: [] )",""],["new","SyntaxTree::UnlessMod","SyntaxTree/UnlessMod.html#method-c-new","(statement:, predicate:, location:, comments: [])",""],["new","SyntaxTree::Until","SyntaxTree/Until.html#method-c-new","(predicate:, statements:, location:, comments: [])",""],["new","SyntaxTree::UntilMod","SyntaxTree/UntilMod.html#method-c-new","(statement:, predicate:, location:, comments: [])",""],["new","SyntaxTree::VCall","SyntaxTree/VCall.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::VarAlias","SyntaxTree/VarAlias.html#method-c-new","(left:, right:, location:, comments: [])",""],["new","SyntaxTree::VarField","SyntaxTree/VarField.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::VarRef","SyntaxTree/VarRef.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Visitor::VisitMethodChecker","SyntaxTree/Visitor/VisitMethodChecker.html#method-c-new","(error)",""],["new","SyntaxTree::Visitor::VisitMethodError","SyntaxTree/Visitor/VisitMethodError.html#method-c-new","(visit_method)",""],["new","SyntaxTree::VoidStmt","SyntaxTree/VoidStmt.html#method-c-new","(location:, comments: [])",""],["new","SyntaxTree::When","SyntaxTree/When.html#method-c-new","( arguments:, statements:, consequent:, location:, comments: [] )",""],["new","SyntaxTree::While","SyntaxTree/While.html#method-c-new","(predicate:, statements:, location:, comments: [])",""],["new","SyntaxTree::WhileMod","SyntaxTree/WhileMod.html#method-c-new","(statement:, predicate:, location:, comments: [])",""],["new","SyntaxTree::Word","SyntaxTree/Word.html#method-c-new","(parts:, location:, comments: [])",""],["new","SyntaxTree::Words","SyntaxTree/Words.html#method-c-new","(beginning:, elements:, location:, comments: [])",""],["new","SyntaxTree::WordsBeg","SyntaxTree/WordsBeg.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::XString","SyntaxTree/XString.html#method-c-new","(parts:, location:)",""],["new","SyntaxTree::XStringLiteral","SyntaxTree/XStringLiteral.html#method-c-new","(parts:, location:, comments: [])",""],["new","SyntaxTree::Yield","SyntaxTree/Yield.html#method-c-new","(arguments:, location:, comments: [])",""],["new","SyntaxTree::Yield0","SyntaxTree/Yield0.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::ZSuper","SyntaxTree/ZSuper.html#method-c-new","(value:, location:, comments: [])",""],["normalize","SyntaxTree::Quotes","SyntaxTree/Quotes.html#method-c-normalize","(content, enclosing)","<p>Escape and unescape single and double quotes as needed to be able to enclose <code>content</code> with <code>enclosing</code>. …\n"],["parent","SyntaxTree::Formatter","SyntaxTree/Formatter.html#method-i-parent","()",""],["parents","SyntaxTree::Formatter","SyntaxTree/Formatter.html#method-i-parents","()",""],["parse","SyntaxTree","SyntaxTree.html#method-c-parse","(source)","<p>Parses the given source and returns the syntax tree.\n"],["precedence_parentheses","SyntaxTree::LanguageServer::InlayHints","SyntaxTree/LanguageServer/InlayHints.html#method-i-precedence_parentheses","(location)","<p>Adds implicit parentheses around certain expressions to make it clear which subexpression will be evaluated …\n"],["pretty_print","PrettyPrint::Align","PrettyPrint/Align.html#method-i-pretty_print","(q)",""],["pretty_print","PrettyPrint::BreakParent","PrettyPrint/BreakParent.html#method-i-pretty_print","(q)",""],["pretty_print","PrettyPrint::Breakable","PrettyPrint/Breakable.html#method-i-pretty_print","(q)",""],["pretty_print","PrettyPrint::Group","PrettyPrint/Group.html#method-i-pretty_print","(q)",""],["pretty_print","PrettyPrint::IfBreak","PrettyPrint/IfBreak.html#method-i-pretty_print","(q)",""],["pretty_print","PrettyPrint::Indent","PrettyPrint/Indent.html#method-i-pretty_print","(q)",""],["pretty_print","PrettyPrint::LineSuffix","PrettyPrint/LineSuffix.html#method-i-pretty_print","(q)",""],["pretty_print","PrettyPrint::Text","PrettyPrint/Text.html#method-i-pretty_print","(q)",""],["pretty_print","PrettyPrint::Trim","PrettyPrint/Trim.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::ARef","SyntaxTree/ARef.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::ARefField","SyntaxTree/ARefField.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Alias","SyntaxTree/Alias.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::ArgBlock","SyntaxTree/ArgBlock.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::ArgParen","SyntaxTree/ArgParen.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::ArgStar","SyntaxTree/ArgStar.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Args","SyntaxTree/Args.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::ArgsForward","SyntaxTree/ArgsForward.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::ArrayLiteral","SyntaxTree/ArrayLiteral.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::AryPtn","SyntaxTree/AryPtn.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Assign","SyntaxTree/Assign.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Assoc","SyntaxTree/Assoc.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::AssocSplat","SyntaxTree/AssocSplat.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::BEGINBlock","SyntaxTree/BEGINBlock.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Backref","SyntaxTree/Backref.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Backtick","SyntaxTree/Backtick.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::BareAssocHash","SyntaxTree/BareAssocHash.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Begin","SyntaxTree/Begin.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Binary","SyntaxTree/Binary.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::BlockArg","SyntaxTree/BlockArg.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::BlockVar","SyntaxTree/BlockVar.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::BodyStmt","SyntaxTree/BodyStmt.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::BraceBlock","SyntaxTree/BraceBlock.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Break","SyntaxTree/Break.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::CHAR","SyntaxTree/CHAR.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::CVar","SyntaxTree/CVar.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Call","SyntaxTree/Call.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Case","SyntaxTree/Case.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::ClassDeclaration","SyntaxTree/ClassDeclaration.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Command","SyntaxTree/Command.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::CommandCall","SyntaxTree/CommandCall.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Comment","SyntaxTree/Comment.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Comment::List","SyntaxTree/Comment/List.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Const","SyntaxTree/Const.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::ConstPathField","SyntaxTree/ConstPathField.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::ConstPathRef","SyntaxTree/ConstPathRef.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::ConstRef","SyntaxTree/ConstRef.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Def","SyntaxTree/Def.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::DefEndless","SyntaxTree/DefEndless.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Defined","SyntaxTree/Defined.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Defs","SyntaxTree/Defs.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::DoBlock","SyntaxTree/DoBlock.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Dot2","SyntaxTree/Dot2.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Dot3","SyntaxTree/Dot3.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::DynaSymbol","SyntaxTree/DynaSymbol.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::ENDBlock","SyntaxTree/ENDBlock.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Else","SyntaxTree/Else.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Elsif","SyntaxTree/Elsif.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::EmbDoc","SyntaxTree/EmbDoc.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::EndContent","SyntaxTree/EndContent.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Ensure","SyntaxTree/Ensure.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::ExcessedComma","SyntaxTree/ExcessedComma.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::FCall","SyntaxTree/FCall.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Field","SyntaxTree/Field.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::FloatLiteral","SyntaxTree/FloatLiteral.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::FndPtn","SyntaxTree/FndPtn.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::For","SyntaxTree/For.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::GVar","SyntaxTree/GVar.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::HashLiteral","SyntaxTree/HashLiteral.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Heredoc","SyntaxTree/Heredoc.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::HeredocBeg","SyntaxTree/HeredocBeg.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::HshPtn","SyntaxTree/HshPtn.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::IVar","SyntaxTree/IVar.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Ident","SyntaxTree/Ident.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::If","SyntaxTree/If.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::IfMod","SyntaxTree/IfMod.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::IfOp","SyntaxTree/IfOp.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Imaginary","SyntaxTree/Imaginary.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::In","SyntaxTree/In.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Int","SyntaxTree/Int.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Kw","SyntaxTree/Kw.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::KwRestParam","SyntaxTree/KwRestParam.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::LBrace","SyntaxTree/LBrace.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::LBracket","SyntaxTree/LBracket.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::LParen","SyntaxTree/LParen.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Label","SyntaxTree/Label.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Lambda","SyntaxTree/Lambda.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::MAssign","SyntaxTree/MAssign.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::MLHS","SyntaxTree/MLHS.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::MLHSParen","SyntaxTree/MLHSParen.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::MRHS","SyntaxTree/MRHS.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::MethodAddBlock","SyntaxTree/MethodAddBlock.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::ModuleDeclaration","SyntaxTree/ModuleDeclaration.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Next","SyntaxTree/Next.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Node","SyntaxTree/Node.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Not","SyntaxTree/Not.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Op","SyntaxTree/Op.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::OpAssign","SyntaxTree/OpAssign.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Params","SyntaxTree/Params.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Paren","SyntaxTree/Paren.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Period","SyntaxTree/Period.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::PinnedBegin","SyntaxTree/PinnedBegin.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::PinnedVarRef","SyntaxTree/PinnedVarRef.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Program","SyntaxTree/Program.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::QSymbols","SyntaxTree/QSymbols.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::QWords","SyntaxTree/QWords.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::RAssign","SyntaxTree/RAssign.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::RationalLiteral","SyntaxTree/RationalLiteral.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Redo","SyntaxTree/Redo.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::RegexpLiteral","SyntaxTree/RegexpLiteral.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Rescue","SyntaxTree/Rescue.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::RescueEx","SyntaxTree/RescueEx.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::RescueMod","SyntaxTree/RescueMod.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::RestParam","SyntaxTree/RestParam.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Retry","SyntaxTree/Retry.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Return","SyntaxTree/Return.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Return0","SyntaxTree/Return0.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::SClass","SyntaxTree/SClass.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Statements","SyntaxTree/Statements.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::StringConcat","SyntaxTree/StringConcat.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::StringDVar","SyntaxTree/StringDVar.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::StringEmbExpr","SyntaxTree/StringEmbExpr.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::StringLiteral","SyntaxTree/StringLiteral.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Super","SyntaxTree/Super.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::SymbolLiteral","SyntaxTree/SymbolLiteral.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Symbols","SyntaxTree/Symbols.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::TStringContent","SyntaxTree/TStringContent.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::TopConstField","SyntaxTree/TopConstField.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::TopConstRef","SyntaxTree/TopConstRef.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Unary","SyntaxTree/Unary.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Undef","SyntaxTree/Undef.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Unless","SyntaxTree/Unless.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::UnlessMod","SyntaxTree/UnlessMod.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Until","SyntaxTree/Until.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::UntilMod","SyntaxTree/UntilMod.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::VCall","SyntaxTree/VCall.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::VarAlias","SyntaxTree/VarAlias.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::VarField","SyntaxTree/VarField.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::VarRef","SyntaxTree/VarRef.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::VoidStmt","SyntaxTree/VoidStmt.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::When","SyntaxTree/When.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::While","SyntaxTree/While.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::WhileMod","SyntaxTree/WhileMod.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Word","SyntaxTree/Word.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Words","SyntaxTree/Words.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::XStringLiteral","SyntaxTree/XStringLiteral.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Yield","SyntaxTree/Yield.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::Yield0","SyntaxTree/Yield0.html#method-i-pretty_print","(q)",""],["pretty_print","SyntaxTree::ZSuper","SyntaxTree/ZSuper.html#method-i-pretty_print","(q)",""],["read","SyntaxTree","SyntaxTree.html#method-c-read","(filepath)","<p>Returns the source from the given filepath taking into account any potential magic encoding comments. …\n"],["red","SyntaxTree::CLI::Color","SyntaxTree/CLI/Color.html#method-c-red","(value)",""],["register_handler","SyntaxTree","SyntaxTree.html#method-c-register_handler","(extension, handler)","<p>This is a hook provided so that plugins can register themselves as the handler for a particular file …\n"],["run","SyntaxTree::CLI","SyntaxTree/CLI.html#method-c-run","(argv)","<p>Run the CLI over the given array of strings that make up the arguments passed to the invocation.\n"],["run","SyntaxTree::CLI::AST","SyntaxTree/CLI/AST.html#method-i-run","(handler, filepath, source)",""],["run","SyntaxTree::CLI::Action","SyntaxTree/CLI/Action.html#method-i-run","(handler, filepath, source)",""],["run","SyntaxTree::CLI::Check","SyntaxTree/CLI/Check.html#method-i-run","(handler, filepath, source)",""],["run","SyntaxTree::CLI::Debug","SyntaxTree/CLI/Debug.html#method-i-run","(handler, filepath, source)",""],["run","SyntaxTree::CLI::Doc","SyntaxTree/CLI/Doc.html#method-i-run","(handler, filepath, source)",""],["run","SyntaxTree::CLI::Format","SyntaxTree/CLI/Format.html#method-i-run","(handler, filepath, source)",""],["run","SyntaxTree::CLI::Write","SyntaxTree/CLI/Write.html#method-i-run","(handler, filepath, source)",""],["run","SyntaxTree::LanguageServer","SyntaxTree/LanguageServer.html#method-i-run","()",""],["singleline_format","PrettyPrint","PrettyPrint.html#method-c-singleline_format","( output = \"\".dup, maxwidth = nil, newline = nil, genspace = nil )","<p>This is similar to PrettyPrint::format but the result has no breaks.\n<p><code>maxwidth</code>, <code>newline</code> and <code>genspace</code> are …\n"],["skip_indent?","SyntaxTree::AssignFormatting","SyntaxTree/AssignFormatting.html#method-c-skip_indent-3F","(value)",""],["success","SyntaxTree::CLI::Action","SyntaxTree/CLI/Action.html#method-i-success","()",""],["success","SyntaxTree::CLI::Check","SyntaxTree/CLI/Check.html#method-i-success","()",""],["success","SyntaxTree::CLI::Debug","SyntaxTree/CLI/Debug.html#method-i-success","()",""],["text","PrettyPrint","PrettyPrint.html#method-i-text","(object = \"\", width = object.length)","<p>This adds <code>object</code> as a text of <code>width</code> columns in width.\n<p>If <code>width</code> is not specified, object.length is used. …\n"],["text","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-text","(object = \"\", width = nil)","<p>Add <code>object</code> to the text to be output.\n<p><code>width</code> argument is here for compatibility. It is a noop argument. …\n"],["to","SyntaxTree::Location","SyntaxTree/Location.html#method-i-to","(other)",""],["to_json","SyntaxTree::ARef","SyntaxTree/ARef.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::ARefField","SyntaxTree/ARefField.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Alias","SyntaxTree/Alias.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::ArgBlock","SyntaxTree/ArgBlock.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::ArgParen","SyntaxTree/ArgParen.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::ArgStar","SyntaxTree/ArgStar.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Args","SyntaxTree/Args.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::ArgsForward","SyntaxTree/ArgsForward.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::ArrayLiteral","SyntaxTree/ArrayLiteral.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::AryPtn","SyntaxTree/AryPtn.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Assign","SyntaxTree/Assign.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Assoc","SyntaxTree/Assoc.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::AssocSplat","SyntaxTree/AssocSplat.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::BEGINBlock","SyntaxTree/BEGINBlock.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Backref","SyntaxTree/Backref.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Backtick","SyntaxTree/Backtick.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::BareAssocHash","SyntaxTree/BareAssocHash.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Begin","SyntaxTree/Begin.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Binary","SyntaxTree/Binary.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::BlockArg","SyntaxTree/BlockArg.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::BlockVar","SyntaxTree/BlockVar.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::BodyStmt","SyntaxTree/BodyStmt.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::BraceBlock","SyntaxTree/BraceBlock.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Break","SyntaxTree/Break.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::CHAR","SyntaxTree/CHAR.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::CVar","SyntaxTree/CVar.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Call","SyntaxTree/Call.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Case","SyntaxTree/Case.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::ClassDeclaration","SyntaxTree/ClassDeclaration.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Command","SyntaxTree/Command.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::CommandCall","SyntaxTree/CommandCall.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Comment","SyntaxTree/Comment.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Const","SyntaxTree/Const.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::ConstPathField","SyntaxTree/ConstPathField.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::ConstPathRef","SyntaxTree/ConstPathRef.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::ConstRef","SyntaxTree/ConstRef.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Def","SyntaxTree/Def.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::DefEndless","SyntaxTree/DefEndless.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Defined","SyntaxTree/Defined.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Defs","SyntaxTree/Defs.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::DoBlock","SyntaxTree/DoBlock.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Dot2","SyntaxTree/Dot2.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Dot3","SyntaxTree/Dot3.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::DynaSymbol","SyntaxTree/DynaSymbol.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::ENDBlock","SyntaxTree/ENDBlock.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Else","SyntaxTree/Else.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Elsif","SyntaxTree/Elsif.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::EmbDoc","SyntaxTree/EmbDoc.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::EndContent","SyntaxTree/EndContent.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Ensure","SyntaxTree/Ensure.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::ExcessedComma","SyntaxTree/ExcessedComma.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::FCall","SyntaxTree/FCall.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Field","SyntaxTree/Field.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::FloatLiteral","SyntaxTree/FloatLiteral.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::FndPtn","SyntaxTree/FndPtn.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::For","SyntaxTree/For.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::GVar","SyntaxTree/GVar.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::HashLiteral","SyntaxTree/HashLiteral.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Heredoc","SyntaxTree/Heredoc.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::HeredocBeg","SyntaxTree/HeredocBeg.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::HshPtn","SyntaxTree/HshPtn.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::IVar","SyntaxTree/IVar.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Ident","SyntaxTree/Ident.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::If","SyntaxTree/If.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::IfMod","SyntaxTree/IfMod.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::IfOp","SyntaxTree/IfOp.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Imaginary","SyntaxTree/Imaginary.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::In","SyntaxTree/In.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Int","SyntaxTree/Int.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Kw","SyntaxTree/Kw.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::KwRestParam","SyntaxTree/KwRestParam.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::LBrace","SyntaxTree/LBrace.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::LBracket","SyntaxTree/LBracket.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::LParen","SyntaxTree/LParen.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Label","SyntaxTree/Label.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Lambda","SyntaxTree/Lambda.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Location","SyntaxTree/Location.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::MAssign","SyntaxTree/MAssign.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::MLHS","SyntaxTree/MLHS.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::MLHSParen","SyntaxTree/MLHSParen.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::MRHS","SyntaxTree/MRHS.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::MethodAddBlock","SyntaxTree/MethodAddBlock.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::ModuleDeclaration","SyntaxTree/ModuleDeclaration.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Next","SyntaxTree/Next.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Node","SyntaxTree/Node.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Not","SyntaxTree/Not.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Op","SyntaxTree/Op.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::OpAssign","SyntaxTree/OpAssign.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Params","SyntaxTree/Params.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Paren","SyntaxTree/Paren.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Period","SyntaxTree/Period.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::PinnedBegin","SyntaxTree/PinnedBegin.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::PinnedVarRef","SyntaxTree/PinnedVarRef.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Program","SyntaxTree/Program.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::QSymbols","SyntaxTree/QSymbols.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::QWords","SyntaxTree/QWords.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::RAssign","SyntaxTree/RAssign.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::RationalLiteral","SyntaxTree/RationalLiteral.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Redo","SyntaxTree/Redo.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::RegexpLiteral","SyntaxTree/RegexpLiteral.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Rescue","SyntaxTree/Rescue.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::RescueEx","SyntaxTree/RescueEx.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::RescueMod","SyntaxTree/RescueMod.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::RestParam","SyntaxTree/RestParam.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Retry","SyntaxTree/Retry.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Return","SyntaxTree/Return.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Return0","SyntaxTree/Return0.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::SClass","SyntaxTree/SClass.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Statements","SyntaxTree/Statements.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::StringConcat","SyntaxTree/StringConcat.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::StringDVar","SyntaxTree/StringDVar.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::StringEmbExpr","SyntaxTree/StringEmbExpr.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::StringLiteral","SyntaxTree/StringLiteral.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Super","SyntaxTree/Super.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::SymbolLiteral","SyntaxTree/SymbolLiteral.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Symbols","SyntaxTree/Symbols.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::TStringContent","SyntaxTree/TStringContent.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::TopConstField","SyntaxTree/TopConstField.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::TopConstRef","SyntaxTree/TopConstRef.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Unary","SyntaxTree/Unary.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Undef","SyntaxTree/Undef.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Unless","SyntaxTree/Unless.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::UnlessMod","SyntaxTree/UnlessMod.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Until","SyntaxTree/Until.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::UntilMod","SyntaxTree/UntilMod.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::VCall","SyntaxTree/VCall.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::VarAlias","SyntaxTree/VarAlias.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::VarField","SyntaxTree/VarField.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::VarRef","SyntaxTree/VarRef.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::VoidStmt","SyntaxTree/VoidStmt.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::When","SyntaxTree/When.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::While","SyntaxTree/While.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::WhileMod","SyntaxTree/WhileMod.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Word","SyntaxTree/Word.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Words","SyntaxTree/Words.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::XStringLiteral","SyntaxTree/XStringLiteral.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Yield","SyntaxTree/Yield.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::Yield0","SyntaxTree/Yield0.html#method-i-to_json","(*opts)",""],["to_json","SyntaxTree::ZSuper","SyntaxTree/ZSuper.html#method-i-to_json","(*opts)",""],["to_s","SyntaxTree::CLI::Color","SyntaxTree/CLI/Color.html#method-i-to_s","()",""],["token","SyntaxTree::Location","SyntaxTree/Location.html#method-c-token","(line:, char:, size:)",""],["trailing!","SyntaxTree::Comment","SyntaxTree/Comment.html#method-i-trailing-21","()",""],["trailing?","SyntaxTree::Comment","SyntaxTree/Comment.html#method-i-trailing-3F","()",""],["trim","PrettyPrint","PrettyPrint.html#method-i-trim","()","<p>This inserts a Trim node into the print tree which, when printed, will clear all whitespace at the end …\n"],["trim","PrettyPrint::SingleLine","PrettyPrint/SingleLine.html#method-i-trim","()","<p>Immediately trims the output buffer.\n"],["trim!","PrettyPrint::Buffer::ArrayBuffer","PrettyPrint/Buffer/ArrayBuffer.html#method-i-trim-21","()",""],["trim!","PrettyPrint::Buffer::DefaultBuffer","PrettyPrint/Buffer/DefaultBuffer.html#method-i-trim-21","()",""],["trim!","PrettyPrint::Buffer::StringBuffer","PrettyPrint/Buffer/StringBuffer.html#method-i-trim-21","()",""],["visit","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit","(node)",""],["visit_BEGIN","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_BEGIN","(node)","<p>Visit a BEGINBlock node.\n"],["visit_CHAR","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_CHAR","(node)","<p>Visit a CHAR node.\n"],["visit_END","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_END","(node)","<p>Visit an ENDBlock node.\n"],["visit___end__","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit___end__","(node)","<p>Visit an EndContent node.\n"],["visit_alias","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_alias","(node)","<p>Visit an Alias node.\n"],["visit_all","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_all","(nodes)",""],["visit_aref","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_aref","(node)","<p>Visit an ARef node.\n"],["visit_aref_field","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_aref_field","(node)","<p>Visit an ARefField node.\n"],["visit_arg_block","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_arg_block","(node)","<p>Visit an ArgBlock node.\n"],["visit_arg_paren","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_arg_paren","(node)","<p>Visit an ArgParen node.\n"],["visit_arg_star","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_arg_star","(node)","<p>Visit an ArgStar node.\n"],["visit_args","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_args","(node)","<p>Visit an Args node.\n"],["visit_args_forward","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_args_forward","(node)","<p>Visit an ArgsForward node.\n"],["visit_array","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_array","(node)","<p>Visit an ArrayLiteral node.\n"],["visit_aryptn","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_aryptn","(node)","<p>Visit an AryPtn node.\n"],["visit_assign","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_assign","(node)","<p>Visit an Assign node.\n"],["visit_assoc","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_assoc","(node)","<p>Visit an Assoc node.\n"],["visit_assoc_splat","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_assoc_splat","(node)","<p>Visit an AssocSplat node.\n"],["visit_backref","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_backref","(node)","<p>Visit a Backref node.\n"],["visit_backtick","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_backtick","(node)","<p>Visit a Backtick node.\n"],["visit_bare_assoc_hash","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_bare_assoc_hash","(node)","<p>Visit a BareAssocHash node.\n"],["visit_begin","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_begin","(node)","<p>Visit a Begin node.\n"],["visit_binary","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_binary","(node)","<p>Visit a Binary node.\n"],["visit_block_arg","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_block_arg","(node)","<p>Visit a BlockArg node.\n"],["visit_block_var","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_block_var","(node)","<p>Visit a BlockVar node.\n"],["visit_bodystmt","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_bodystmt","(node)","<p>Visit a BodyStmt node.\n"],["visit_brace_block","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_brace_block","(node)","<p>Visit a BraceBlock node.\n"],["visit_break","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_break","(node)","<p>Visit a Break node.\n"],["visit_call","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_call","(node)","<p>Visit a Call node.\n"],["visit_case","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_case","(node)","<p>Visit a Case node.\n"],["visit_child_nodes","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_child_nodes","(node)",""],["visit_class","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_class","(node)","<p>Visit a ClassDeclaration node.\n"],["visit_comma","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_comma","(node)","<p>Visit a Comma node.\n"],["visit_command","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_command","(node)","<p>Visit a Command node.\n"],["visit_command_call","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_command_call","(node)","<p>Visit a CommandCall node.\n"],["visit_comment","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_comment","(node)","<p>Visit a Comment node.\n"],["visit_const","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_const","(node)","<p>Visit a Const node.\n"],["visit_const_path_field","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_const_path_field","(node)","<p>Visit a ConstPathField node.\n"],["visit_const_path_ref","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_const_path_ref","(node)","<p>Visit a ConstPathRef node.\n"],["visit_const_ref","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_const_ref","(node)","<p>Visit a ConstRef node.\n"],["visit_cvar","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_cvar","(node)","<p>Visit a CVar node.\n"],["visit_def","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_def","(node)","<p>Visit a Def node.\n"],["visit_def_endless","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_def_endless","(node)","<p>Visit a DefEndless node.\n"],["visit_defined","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_defined","(node)","<p>Visit a Defined node.\n"],["visit_defs","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_defs","(node)","<p>Visit a Defs node.\n"],["visit_do_block","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_do_block","(node)","<p>Visit a DoBlock node.\n"],["visit_dot2","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_dot2","(node)","<p>Visit a Dot2 node.\n"],["visit_dot3","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_dot3","(node)","<p>Visit a Dot3 node.\n"],["visit_dyna_symbol","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_dyna_symbol","(node)","<p>Visit a DynaSymbol node.\n"],["visit_else","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_else","(node)","<p>Visit an Else node.\n"],["visit_elsif","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_elsif","(node)","<p>Visit an Elsif node.\n"],["visit_embdoc","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_embdoc","(node)","<p>Visit an EmbDoc node.\n"],["visit_embexpr_beg","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_embexpr_beg","(node)","<p>Visit an EmbExprBeg node.\n"],["visit_embexpr_end","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_embexpr_end","(node)","<p>Visit an EmbExprEnd node.\n"],["visit_embvar","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_embvar","(node)","<p>Visit an EmbVar node.\n"],["visit_ensure","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_ensure","(node)","<p>Visit an Ensure node.\n"],["visit_excessed_comma","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_excessed_comma","(node)","<p>Visit an ExcessedComma node.\n"],["visit_fcall","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_fcall","(node)","<p>Visit a FCall node.\n"],["visit_field","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_field","(node)","<p>Visit a Field node.\n"],["visit_float","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_float","(node)","<p>Visit a FloatLiteral node.\n"],["visit_fndptn","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_fndptn","(node)","<p>Visit a FndPtn node.\n"],["visit_for","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_for","(node)","<p>Visit a For node.\n"],["visit_gvar","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_gvar","(node)","<p>Visit a GVar node.\n"],["visit_hash","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_hash","(node)","<p>Visit a HashLiteral node.\n"],["visit_heredoc","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_heredoc","(node)","<p>Visit a Heredoc node.\n"],["visit_heredoc_beg","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_heredoc_beg","(node)","<p>Visit a HeredocBeg node.\n"],["visit_hshptn","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_hshptn","(node)","<p>Visit a HshPtn node.\n"],["visit_ident","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_ident","(node)","<p>Visit an Ident node.\n"],["visit_if","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_if","(node)","<p>Visit an If node.\n"],["visit_if_mod","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_if_mod","(node)","<p>Visit an IfMod node.\n"],["visit_if_op","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_if_op","(node)","<p>Visit an IfOp node.\n"],["visit_imaginary","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_imaginary","(node)","<p>Visit an Imaginary node.\n"],["visit_in","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_in","(node)","<p>Visit an In node.\n"],["visit_int","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_int","(node)","<p>Visit an Int node.\n"],["visit_ivar","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_ivar","(node)","<p>Visit an IVar node.\n"],["visit_kw","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_kw","(node)","<p>Visit a Kw node.\n"],["visit_kwrest_param","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_kwrest_param","(node)","<p>Visit a KwRestParam node.\n"],["visit_label","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_label","(node)","<p>Visit a Label node.\n"],["visit_label_end","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_label_end","(node)","<p>Visit a LabelEnd node.\n"],["visit_lambda","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_lambda","(node)","<p>Visit a Lambda node.\n"],["visit_lbrace","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_lbrace","(node)","<p>Visit a LBrace node.\n"],["visit_lbracket","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_lbracket","(node)","<p>Visit a LBracket node.\n"],["visit_lparen","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_lparen","(node)","<p>Visit a LParen node.\n"],["visit_massign","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_massign","(node)","<p>Visit a MAssign node.\n"],["visit_method","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-c-visit_method","(method_name)","<p>This method is here to help folks write visitors.\n<p>It’s not always easy to ensure you’re writing …\n"],["visit_method_add_block","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_method_add_block","(node)","<p>Visit a MethodAddBlock node.\n"],["visit_methods","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-c-visit_methods","()","<p>This is the list of all of the valid visit methods.\n"],["visit_mlhs","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_mlhs","(node)","<p>Visit a MLHS node.\n"],["visit_mlhs_paren","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_mlhs_paren","(node)","<p>Visit a MLHSParen node.\n"],["visit_module","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_module","(node)","<p>Visit a ModuleDeclaration node.\n"],["visit_mrhs","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_mrhs","(node)","<p>Visit a MRHS node.\n"],["visit_next","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_next","(node)","<p>Visit a Next node.\n"],["visit_not","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_not","(node)","<p>Visit a Not node.\n"],["visit_op","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_op","(node)","<p>Visit an Op node.\n"],["visit_op_assign","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_op_assign","(node)","<p>Visit an OpAssign node.\n"],["visit_params","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_params","(node)","<p>Visit a Params node.\n"],["visit_paren","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_paren","(node)","<p>Visit a Paren node.\n"],["visit_period","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_period","(node)","<p>Visit a Period node.\n"],["visit_pinned_begin","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_pinned_begin","(node)","<p>Visit a PinnedBegin node.\n"],["visit_pinned_var_ref","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_pinned_var_ref","(node)","<p>Visit a PinnedVarRef node.\n"],["visit_program","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_program","(node)","<p>Visit a Program node.\n"],["visit_qsymbols","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_qsymbols","(node)","<p>Visit a QSymbols node.\n"],["visit_qsymbols_beg","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_qsymbols_beg","(node)","<p>Visit a QSymbolsBeg node.\n"],["visit_qwords","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_qwords","(node)","<p>Visit a QWords node.\n"],["visit_qwords_beg","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_qwords_beg","(node)","<p>Visit a QWordsBeg node.\n"],["visit_rassign","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_rassign","(node)","<p>Visit a RAssign node.\n"],["visit_rational","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_rational","(node)","<p>Visit a RationalLiteral node.\n"],["visit_rbrace","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_rbrace","(node)","<p>Visit a RBrace node.\n"],["visit_rbracket","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_rbracket","(node)","<p>Visit a RBracket node.\n"],["visit_redo","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_redo","(node)","<p>Visit a Redo node.\n"],["visit_regexp_beg","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_regexp_beg","(node)","<p>Visit a RegexpBeg node.\n"],["visit_regexp_content","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_regexp_content","(node)","<p>Visit a RegexpContent node.\n"],["visit_regexp_end","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_regexp_end","(node)","<p>Visit a RegexpEnd node.\n"],["visit_regexp_literal","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_regexp_literal","(node)","<p>Visit a RegexpLiteral node.\n"],["visit_rescue","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_rescue","(node)","<p>Visit a Rescue node.\n"],["visit_rescue_ex","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_rescue_ex","(node)","<p>Visit a RescueEx node.\n"],["visit_rescue_mod","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_rescue_mod","(node)","<p>Visit a RescueMod node.\n"],["visit_rest_param","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_rest_param","(node)","<p>Visit a RestParam node.\n"],["visit_retry","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_retry","(node)","<p>Visit a Retry node.\n"],["visit_return","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_return","(node)","<p>Visit a Return node.\n"],["visit_return0","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_return0","(node)","<p>Visit a Return0 node.\n"],["visit_rparen","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_rparen","(node)","<p>Visit a RParen node.\n"],["visit_sclass","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_sclass","(node)","<p>Visit a SClass node.\n"],["visit_statements","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_statements","(node)","<p>Visit a Statements node.\n"],["visit_string_concat","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_string_concat","(node)","<p>Visit a StringConcat node.\n"],["visit_string_content","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_string_content","(node)","<p>Visit a StringContent node.\n"],["visit_string_dvar","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_string_dvar","(node)","<p>Visit a StringDVar node.\n"],["visit_string_embexpr","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_string_embexpr","(node)","<p>Visit a StringEmbExpr node.\n"],["visit_string_literal","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_string_literal","(node)","<p>Visit a StringLiteral node.\n"],["visit_super","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_super","(node)","<p>Visit a Super node.\n"],["visit_sym_beg","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_sym_beg","(node)","<p>Visit a SymBeg node.\n"],["visit_symbol_content","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_symbol_content","(node)","<p>Visit a SymbolContent node.\n"],["visit_symbol_literal","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_symbol_literal","(node)","<p>Visit a SymbolLiteral node.\n"],["visit_symbols","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_symbols","(node)","<p>Visit a Symbols node.\n"],["visit_symbols_beg","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_symbols_beg","(node)","<p>Visit a SymbolsBeg node.\n"],["visit_tlambda","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_tlambda","(node)","<p>Visit a TLambda node.\n"],["visit_tlambeg","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_tlambeg","(node)","<p>Visit a TLamBeg node.\n"],["visit_top_const_field","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_top_const_field","(node)","<p>Visit a TopConstField node.\n"],["visit_top_const_ref","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_top_const_ref","(node)","<p>Visit a TopConstRef node.\n"],["visit_tstring_beg","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_tstring_beg","(node)","<p>Visit a TStringBeg node.\n"],["visit_tstring_content","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_tstring_content","(node)","<p>Visit a TStringContent node.\n"],["visit_tstring_end","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_tstring_end","(node)","<p>Visit a TStringEnd node.\n"],["visit_unary","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_unary","(node)","<p>Visit an Unary node.\n"],["visit_undef","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_undef","(node)","<p>Visit an Undef node.\n"],["visit_unless","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_unless","(node)","<p>Visit an Unless node.\n"],["visit_unless_mod","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_unless_mod","(node)","<p>Visit an UnlessMod node.\n"],["visit_until","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_until","(node)","<p>Visit an Until node.\n"],["visit_until_mod","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_until_mod","(node)","<p>Visit an UntilMod node.\n"],["visit_var_alias","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_var_alias","(node)","<p>Visit a VarAlias node.\n"],["visit_var_field","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_var_field","(node)","<p>Visit a VarField node.\n"],["visit_var_ref","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_var_ref","(node)","<p>Visit a VarRef node.\n"],["visit_vcall","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_vcall","(node)","<p>Visit a VCall node.\n"],["visit_void_stmt","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_void_stmt","(node)","<p>Visit a VoidStmt node.\n"],["visit_when","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_when","(node)","<p>Visit a When node.\n"],["visit_while","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_while","(node)","<p>Visit a While node.\n"],["visit_while_mod","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_while_mod","(node)","<p>Visit a WhileMod node.\n"],["visit_word","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_word","(node)","<p>Visit a Word node.\n"],["visit_words","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_words","(node)","<p>Visit a Words node.\n"],["visit_words_beg","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_words_beg","(node)","<p>Visit a WordsBeg node.\n"],["visit_xstring","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_xstring","(node)","<p>Visit a XString node.\n"],["visit_xstring_literal","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_xstring_literal","(node)","<p>Visit a XStringLiteral node.\n"],["visit_yield","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_yield","(node)","<p>Visit a Yield node.\n"],["visit_yield0","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_yield0","(node)","<p>Visit a Yield0 node.\n"],["visit_zsuper","SyntaxTree::Visitor","SyntaxTree/Visitor.html#method-i-visit_zsuper","(node)","<p>Visit a ZSuper node.\n"],["with_target","PrettyPrint","PrettyPrint.html#method-i-with_target","(target)","<p>A convenience method used by a lot of the print tree node builders that temporarily changes the target …\n"],["yellow","SyntaxTree::CLI::Color","SyntaxTree/CLI/Color.html#method-c-yellow","(value)",""],["CHANGELOG","","CHANGELOG_md.html","","<p>Changelog\n<p>All notable changes to this project will be documented in this file.\n<p>The format is based on  …\n"],["CODE_OF_CONDUCT","","CODE_OF_CONDUCT_md.html","","<p>Contributor Covenant Code of Conduct\n<p>Our Pledge\n<p>In the interest of fostering an open and welcoming environment, …\n"],["LICENSE","","LICENSE.html","","<p>The MIT License (MIT)\n<p>Copyright © 2021-present Kevin Newton\n<p>Permission is hereby granted, free of charge, …\n"],["README","","README_md.html","","<p>SyntaxTree\n<p><img src=\"https://github.com/ruby-syntax-tree/syntax_tree/actions/workflows/main.yml/badge.svg\"> …\n"]]}}