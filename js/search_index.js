var search_data = {"index":{"searchIndex":["syntaxtree","aref","areffield","alias","aliasargumentformatter","argblock","argparen","argstar","args","argsforward","arrayliteral","emptywithcommentsformatter","qsymbolsformatter","qwordsformatter","varrefsformatter","aryptn","restformatter","assign","assignformatting","assoc","assocsplat","beginblock","backref","backtick","bareassochash","basicvisitor","visitmethodchecker","visitmethoderror","begin","binary","blockarg","blockformatter","blockopenformatter","blockvar","bodystmt","braceblock","break","char","cli","ast","action","check","unformattederror","color","debug","nonidempotentformaterror","doc","format","json","match","write","cvar","call","callchainformatter","calloperatorformatter","case","classdeclaration","comma","command","commandcall","comment","conditionalformatter","conditionalmodformatter","const","constpathfield","constpathref","constref","containsassignment","def","defendless","defined","defs","doblock","dot2","dot3","dotformatter","dynasymbol","endblock","else","elsif","embdoc","embexprbeg","embexprend","embvar","endcontent","ensure","excessedcomma","fcall","field","floatliteral","flowcontrolformatter","fndptn","for","formatter","gvar","hashkeyformatter","labels","rockets","hashliteral","emptywithcommentsformatter","heredoc","heredocbeg","hshptn","keywordformatter","keywordrestformatter","ivar","ident","if","ifmod","ifop","imaginary","in","int","kw","kwrestparam","lbrace","lbracket","lparen","label","labelend","lambda","lambdavar","languageserver","inlayhints","location","loopformatter","massign","mlhs","mlhsparen","mrhs","methodaddblock","moduledeclaration","next","node","not","op","opassign","params","keywordformatter","keywordrestformatter","optionalformatter","paren","parentheses","parser","multibytestring","parseerror","singlebytestring","period","pinnedbegin","pinnedvarref","program","qsymbols","qsymbolsbeg","qwords","qwordsbeg","quotes","rassign","rbrace","rbracket","rparen","rake","checktask","writetask","rationalliteral","redo","regexpbeg","regexpcontent","regexpend","regexpliteral","rescue","rescueex","rescuemod","restparam","retry","return","return0","sclass","statements","stringconcat","stringcontent","stringdvar","stringembexpr","stringliteral","super","symbeg","symbolcontent","symbolliteral","symbols","symbolsbeg","tlambeg","tlambda","tstringbeg","tstringcontent","tstringend","ternaryable","topconstfield","topconstref","unary","undef","undefargumentformatter","unless","unlessmod","until","untilmod","vcall","varalias","varfield","varref","visitor","fieldvisitor","jsonvisitor","matchvisitor","prettyprintvisitor","voidstmt","when","while","whilemod","word","words","wordsbeg","xstring","xstringliteral","yield","yield0","zsuper","==()","[]()","[]()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","bind()","bind()","bind_end()","bind_end()","bold()","break()","call()","call()","chained?()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","child_nodes()","comments()","comments()","comments()","comments()","comments()","comments()","comments()","comments()","comments()","comments()","comments()","comments()","construct_keys()","corrections()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","deconstruct_keys()","empty?()","empty?()","empty?()","empty?()","failure()","failure()","failure()","find()","fixed()","flat()","for()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format()","format_arguments()","format_chain()","format_contents()","format_contents()","format_each()","format_key()","format_key()","format_key()","format_key()","gray()","ignore?()","ignore?()","inline?()","leading!()","leading?()","lines()","locked?()","match?()","match?()","matching()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","normalize()","options()","parent()","parents()","parse()","pretty_print()","read()","red()","register_handler()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","skip_indent?()","success()","success()","success()","to()","to_json()","to_s()","token()","trailing!()","trailing?()","visit()","visit()","visit()","visit_begin()","visit_char()","visit_end()","visit___end__()","visit_alias()","visit_all()","visit_aref()","visit_aref_field()","visit_arg_block()","visit_arg_paren()","visit_arg_star()","visit_args()","visit_args_forward()","visit_array()","visit_aryptn()","visit_assign()","visit_assign()","visit_assoc()","visit_assoc_splat()","visit_backref()","visit_backtick()","visit_bare_assoc_hash()","visit_begin()","visit_binary()","visit_binary()","visit_binary()","visit_block_var()","visit_blockarg()","visit_bodystmt()","visit_brace_block()","visit_break()","visit_call()","visit_case()","visit_child_nodes()","visit_class()","visit_comma()","visit_command()","visit_command_call()","visit_comment()","visit_const()","visit_const_path_field()","visit_const_path_ref()","visit_const_ref()","visit_cvar()","visit_def()","visit_def_endless()","visit_defined()","visit_defs()","visit_do_block()","visit_dot2()","visit_dot3()","visit_dyna_symbol()","visit_else()","visit_elsif()","visit_embdoc()","visit_embexpr_beg()","visit_embexpr_end()","visit_embvar()","visit_ensure()","visit_excessed_comma()","visit_fcall()","visit_field()","visit_float()","visit_fndptn()","visit_for()","visit_gvar()","visit_hash()","visit_heredoc()","visit_heredoc_beg()","visit_hshptn()","visit_ident()","visit_if()","visit_if_mod()","visit_if_op()","visit_if_op()","visit_imaginary()","visit_in()","visit_int()","visit_ivar()","visit_kw()","visit_kwrest_param()","visit_label()","visit_label()","visit_label_end()","visit_lambda()","visit_lambda_var()","visit_lbrace()","visit_lbracket()","visit_lparen()","visit_massign()","visit_method()","visit_method_add_block()","visit_methods()","visit_mlhs()","visit_mlhs_paren()","visit_module()","visit_mrhs()","visit_next()","visit_not()","visit_op()","visit_opassign()","visit_params()","visit_paren()","visit_period()","visit_pinned_begin()","visit_pinned_var_ref()","visit_program()","visit_qsymbols()","visit_qsymbols_beg()","visit_qwords()","visit_qwords_beg()","visit_rassign()","visit_rational()","visit_rbrace()","visit_rbracket()","visit_redo()","visit_regexp_beg()","visit_regexp_content()","visit_regexp_end()","visit_regexp_literal()","visit_rescue()","visit_rescue()","visit_rescue_ex()","visit_rescue_mod()","visit_rest_param()","visit_retry()","visit_return()","visit_return0()","visit_rparen()","visit_sclass()","visit_statements()","visit_string_concat()","visit_string_content()","visit_string_dvar()","visit_string_embexpr()","visit_string_literal()","visit_super()","visit_symbeg()","visit_symbol_content()","visit_symbol_literal()","visit_symbols()","visit_symbols_beg()","visit_tlambda()","visit_tlambeg()","visit_top_const_field()","visit_top_const_ref()","visit_tstring_beg()","visit_tstring_content()","visit_tstring_end()","visit_unary()","visit_unary()","visit_undef()","visit_unless()","visit_unless_mod()","visit_until()","visit_until_mod()","visit_var_alias()","visit_var_field()","visit_var_ref()","visit_vcall()","visit_void_stmt()","visit_when()","visit_while()","visit_while_mod()","visit_word()","visit_words()","visit_words_beg()","visit_xstring()","visit_xstring_literal()","visit_yield()","visit_yield0()","visit_zsuper()","yellow()","changelog","code_of_conduct","license","readme"],"longSearchIndex":["syntaxtree","syntaxtree::aref","syntaxtree::areffield","syntaxtree::alias","syntaxtree::alias::aliasargumentformatter","syntaxtree::argblock","syntaxtree::argparen","syntaxtree::argstar","syntaxtree::args","syntaxtree::argsforward","syntaxtree::arrayliteral","syntaxtree::arrayliteral::emptywithcommentsformatter","syntaxtree::arrayliteral::qsymbolsformatter","syntaxtree::arrayliteral::qwordsformatter","syntaxtree::arrayliteral::varrefsformatter","syntaxtree::aryptn","syntaxtree::aryptn::restformatter","syntaxtree::assign","syntaxtree::assignformatting","syntaxtree::assoc","syntaxtree::assocsplat","syntaxtree::beginblock","syntaxtree::backref","syntaxtree::backtick","syntaxtree::bareassochash","syntaxtree::basicvisitor","syntaxtree::basicvisitor::visitmethodchecker","syntaxtree::basicvisitor::visitmethoderror","syntaxtree::begin","syntaxtree::binary","syntaxtree::blockarg","syntaxtree::blockformatter","syntaxtree::blockformatter::blockopenformatter","syntaxtree::blockvar","syntaxtree::bodystmt","syntaxtree::braceblock","syntaxtree::break","syntaxtree::char","syntaxtree::cli","syntaxtree::cli::ast","syntaxtree::cli::action","syntaxtree::cli::check","syntaxtree::cli::check::unformattederror","syntaxtree::cli::color","syntaxtree::cli::debug","syntaxtree::cli::debug::nonidempotentformaterror","syntaxtree::cli::doc","syntaxtree::cli::format","syntaxtree::cli::json","syntaxtree::cli::match","syntaxtree::cli::write","syntaxtree::cvar","syntaxtree::call","syntaxtree::callchainformatter","syntaxtree::calloperatorformatter","syntaxtree::case","syntaxtree::classdeclaration","syntaxtree::comma","syntaxtree::command","syntaxtree::commandcall","syntaxtree::comment","syntaxtree::conditionalformatter","syntaxtree::conditionalmodformatter","syntaxtree::const","syntaxtree::constpathfield","syntaxtree::constpathref","syntaxtree::constref","syntaxtree::containsassignment","syntaxtree::def","syntaxtree::defendless","syntaxtree::defined","syntaxtree::defs","syntaxtree::doblock","syntaxtree::dot2","syntaxtree::dot3","syntaxtree::dotformatter","syntaxtree::dynasymbol","syntaxtree::endblock","syntaxtree::else","syntaxtree::elsif","syntaxtree::embdoc","syntaxtree::embexprbeg","syntaxtree::embexprend","syntaxtree::embvar","syntaxtree::endcontent","syntaxtree::ensure","syntaxtree::excessedcomma","syntaxtree::fcall","syntaxtree::field","syntaxtree::floatliteral","syntaxtree::flowcontrolformatter","syntaxtree::fndptn","syntaxtree::for","syntaxtree::formatter","syntaxtree::gvar","syntaxtree::hashkeyformatter","syntaxtree::hashkeyformatter::labels","syntaxtree::hashkeyformatter::rockets","syntaxtree::hashliteral","syntaxtree::hashliteral::emptywithcommentsformatter","syntaxtree::heredoc","syntaxtree::heredocbeg","syntaxtree::hshptn","syntaxtree::hshptn::keywordformatter","syntaxtree::hshptn::keywordrestformatter","syntaxtree::ivar","syntaxtree::ident","syntaxtree::if","syntaxtree::ifmod","syntaxtree::ifop","syntaxtree::imaginary","syntaxtree::in","syntaxtree::int","syntaxtree::kw","syntaxtree::kwrestparam","syntaxtree::lbrace","syntaxtree::lbracket","syntaxtree::lparen","syntaxtree::label","syntaxtree::labelend","syntaxtree::lambda","syntaxtree::lambdavar","syntaxtree::languageserver","syntaxtree::languageserver::inlayhints","syntaxtree::location","syntaxtree::loopformatter","syntaxtree::massign","syntaxtree::mlhs","syntaxtree::mlhsparen","syntaxtree::mrhs","syntaxtree::methodaddblock","syntaxtree::moduledeclaration","syntaxtree::next","syntaxtree::node","syntaxtree::not","syntaxtree::op","syntaxtree::opassign","syntaxtree::params","syntaxtree::params::keywordformatter","syntaxtree::params::keywordrestformatter","syntaxtree::params::optionalformatter","syntaxtree::paren","syntaxtree::parentheses","syntaxtree::parser","syntaxtree::parser::multibytestring","syntaxtree::parser::parseerror","syntaxtree::parser::singlebytestring","syntaxtree::period","syntaxtree::pinnedbegin","syntaxtree::pinnedvarref","syntaxtree::program","syntaxtree::qsymbols","syntaxtree::qsymbolsbeg","syntaxtree::qwords","syntaxtree::qwordsbeg","syntaxtree::quotes","syntaxtree::rassign","syntaxtree::rbrace","syntaxtree::rbracket","syntaxtree::rparen","syntaxtree::rake","syntaxtree::rake::checktask","syntaxtree::rake::writetask","syntaxtree::rationalliteral","syntaxtree::redo","syntaxtree::regexpbeg","syntaxtree::regexpcontent","syntaxtree::regexpend","syntaxtree::regexpliteral","syntaxtree::rescue","syntaxtree::rescueex","syntaxtree::rescuemod","syntaxtree::restparam","syntaxtree::retry","syntaxtree::return","syntaxtree::return0","syntaxtree::sclass","syntaxtree::statements","syntaxtree::stringconcat","syntaxtree::stringcontent","syntaxtree::stringdvar","syntaxtree::stringembexpr","syntaxtree::stringliteral","syntaxtree::super","syntaxtree::symbeg","syntaxtree::symbolcontent","syntaxtree::symbolliteral","syntaxtree::symbols","syntaxtree::symbolsbeg","syntaxtree::tlambeg","syntaxtree::tlambda","syntaxtree::tstringbeg","syntaxtree::tstringcontent","syntaxtree::tstringend","syntaxtree::ternaryable","syntaxtree::topconstfield","syntaxtree::topconstref","syntaxtree::unary","syntaxtree::undef","syntaxtree::undef::undefargumentformatter","syntaxtree::unless","syntaxtree::unlessmod","syntaxtree::until","syntaxtree::untilmod","syntaxtree::vcall","syntaxtree::varalias","syntaxtree::varfield","syntaxtree::varref","syntaxtree::visitor","syntaxtree::visitor::fieldvisitor","syntaxtree::visitor::jsonvisitor","syntaxtree::visitor::matchvisitor","syntaxtree::visitor::prettyprintvisitor","syntaxtree::voidstmt","syntaxtree::when","syntaxtree::while","syntaxtree::whilemod","syntaxtree::word","syntaxtree::words","syntaxtree::wordsbeg","syntaxtree::xstring","syntaxtree::xstringliteral","syntaxtree::yield","syntaxtree::yield0","syntaxtree::zsuper","syntaxtree::location#==()","syntaxtree::parser::multibytestring#[]()","syntaxtree::parser::singlebytestring#[]()","syntaxtree::aref#accept()","syntaxtree::areffield#accept()","syntaxtree::alias#accept()","syntaxtree::argblock#accept()","syntaxtree::argparen#accept()","syntaxtree::argstar#accept()","syntaxtree::args#accept()","syntaxtree::argsforward#accept()","syntaxtree::arrayliteral#accept()","syntaxtree::aryptn#accept()","syntaxtree::assign#accept()","syntaxtree::assoc#accept()","syntaxtree::assocsplat#accept()","syntaxtree::beginblock#accept()","syntaxtree::backref#accept()","syntaxtree::backtick#accept()","syntaxtree::bareassochash#accept()","syntaxtree::begin#accept()","syntaxtree::binary#accept()","syntaxtree::blockarg#accept()","syntaxtree::blockvar#accept()","syntaxtree::bodystmt#accept()","syntaxtree::braceblock#accept()","syntaxtree::break#accept()","syntaxtree::char#accept()","syntaxtree::cvar#accept()","syntaxtree::call#accept()","syntaxtree::case#accept()","syntaxtree::classdeclaration#accept()","syntaxtree::comma#accept()","syntaxtree::command#accept()","syntaxtree::commandcall#accept()","syntaxtree::comment#accept()","syntaxtree::const#accept()","syntaxtree::constpathfield#accept()","syntaxtree::constpathref#accept()","syntaxtree::constref#accept()","syntaxtree::def#accept()","syntaxtree::defendless#accept()","syntaxtree::defined#accept()","syntaxtree::defs#accept()","syntaxtree::doblock#accept()","syntaxtree::dot2#accept()","syntaxtree::dot3#accept()","syntaxtree::dynasymbol#accept()","syntaxtree::endblock#accept()","syntaxtree::else#accept()","syntaxtree::elsif#accept()","syntaxtree::embdoc#accept()","syntaxtree::embexprbeg#accept()","syntaxtree::embexprend#accept()","syntaxtree::embvar#accept()","syntaxtree::endcontent#accept()","syntaxtree::ensure#accept()","syntaxtree::excessedcomma#accept()","syntaxtree::fcall#accept()","syntaxtree::field#accept()","syntaxtree::floatliteral#accept()","syntaxtree::fndptn#accept()","syntaxtree::for#accept()","syntaxtree::gvar#accept()","syntaxtree::hashliteral#accept()","syntaxtree::heredoc#accept()","syntaxtree::heredocbeg#accept()","syntaxtree::hshptn#accept()","syntaxtree::ivar#accept()","syntaxtree::ident#accept()","syntaxtree::if#accept()","syntaxtree::ifmod#accept()","syntaxtree::ifop#accept()","syntaxtree::imaginary#accept()","syntaxtree::in#accept()","syntaxtree::int#accept()","syntaxtree::kw#accept()","syntaxtree::kwrestparam#accept()","syntaxtree::lbrace#accept()","syntaxtree::lbracket#accept()","syntaxtree::lparen#accept()","syntaxtree::label#accept()","syntaxtree::labelend#accept()","syntaxtree::lambda#accept()","syntaxtree::lambdavar#accept()","syntaxtree::massign#accept()","syntaxtree::mlhs#accept()","syntaxtree::mlhsparen#accept()","syntaxtree::mrhs#accept()","syntaxtree::methodaddblock#accept()","syntaxtree::moduledeclaration#accept()","syntaxtree::next#accept()","syntaxtree::node#accept()","syntaxtree::not#accept()","syntaxtree::op#accept()","syntaxtree::opassign#accept()","syntaxtree::params#accept()","syntaxtree::paren#accept()","syntaxtree::period#accept()","syntaxtree::pinnedbegin#accept()","syntaxtree::pinnedvarref#accept()","syntaxtree::program#accept()","syntaxtree::qsymbols#accept()","syntaxtree::qsymbolsbeg#accept()","syntaxtree::qwords#accept()","syntaxtree::qwordsbeg#accept()","syntaxtree::rassign#accept()","syntaxtree::rbrace#accept()","syntaxtree::rbracket#accept()","syntaxtree::rparen#accept()","syntaxtree::rationalliteral#accept()","syntaxtree::redo#accept()","syntaxtree::regexpbeg#accept()","syntaxtree::regexpcontent#accept()","syntaxtree::regexpend#accept()","syntaxtree::regexpliteral#accept()","syntaxtree::rescue#accept()","syntaxtree::rescueex#accept()","syntaxtree::rescuemod#accept()","syntaxtree::restparam#accept()","syntaxtree::retry#accept()","syntaxtree::return#accept()","syntaxtree::return0#accept()","syntaxtree::sclass#accept()","syntaxtree::statements#accept()","syntaxtree::stringconcat#accept()","syntaxtree::stringcontent#accept()","syntaxtree::stringdvar#accept()","syntaxtree::stringembexpr#accept()","syntaxtree::stringliteral#accept()","syntaxtree::super#accept()","syntaxtree::symbeg#accept()","syntaxtree::symbolcontent#accept()","syntaxtree::symbolliteral#accept()","syntaxtree::symbols#accept()","syntaxtree::symbolsbeg#accept()","syntaxtree::tlambeg#accept()","syntaxtree::tlambda#accept()","syntaxtree::tstringbeg#accept()","syntaxtree::tstringcontent#accept()","syntaxtree::tstringend#accept()","syntaxtree::topconstfield#accept()","syntaxtree::topconstref#accept()","syntaxtree::unary#accept()","syntaxtree::undef#accept()","syntaxtree::unless#accept()","syntaxtree::unlessmod#accept()","syntaxtree::until#accept()","syntaxtree::untilmod#accept()","syntaxtree::vcall#accept()","syntaxtree::varalias#accept()","syntaxtree::varfield#accept()","syntaxtree::varref#accept()","syntaxtree::voidstmt#accept()","syntaxtree::when#accept()","syntaxtree::while#accept()","syntaxtree::whilemod#accept()","syntaxtree::word#accept()","syntaxtree::words#accept()","syntaxtree::wordsbeg#accept()","syntaxtree::xstring#accept()","syntaxtree::xstringliteral#accept()","syntaxtree::yield#accept()","syntaxtree::yield0#accept()","syntaxtree::zsuper#accept()","syntaxtree::bodystmt#bind()","syntaxtree::statements#bind()","syntaxtree::rescue#bind_end()","syntaxtree::statements#bind_end()","syntaxtree::cli::color::bold()","syntaxtree::parentheses::break()","syntaxtree::containsassignment::call()","syntaxtree::ternaryable::call()","syntaxtree::callchainformatter::chained?()","syntaxtree::aref#child_nodes()","syntaxtree::areffield#child_nodes()","syntaxtree::alias#child_nodes()","syntaxtree::argblock#child_nodes()","syntaxtree::argparen#child_nodes()","syntaxtree::argstar#child_nodes()","syntaxtree::args#child_nodes()","syntaxtree::argsforward#child_nodes()","syntaxtree::arrayliteral#child_nodes()","syntaxtree::aryptn#child_nodes()","syntaxtree::assign#child_nodes()","syntaxtree::assoc#child_nodes()","syntaxtree::assocsplat#child_nodes()","syntaxtree::beginblock#child_nodes()","syntaxtree::backref#child_nodes()","syntaxtree::backtick#child_nodes()","syntaxtree::bareassochash#child_nodes()","syntaxtree::begin#child_nodes()","syntaxtree::binary#child_nodes()","syntaxtree::blockarg#child_nodes()","syntaxtree::blockvar#child_nodes()","syntaxtree::bodystmt#child_nodes()","syntaxtree::braceblock#child_nodes()","syntaxtree::break#child_nodes()","syntaxtree::char#child_nodes()","syntaxtree::cvar#child_nodes()","syntaxtree::call#child_nodes()","syntaxtree::case#child_nodes()","syntaxtree::classdeclaration#child_nodes()","syntaxtree::comma#child_nodes()","syntaxtree::command#child_nodes()","syntaxtree::commandcall#child_nodes()","syntaxtree::comment#child_nodes()","syntaxtree::const#child_nodes()","syntaxtree::constpathfield#child_nodes()","syntaxtree::constpathref#child_nodes()","syntaxtree::constref#child_nodes()","syntaxtree::def#child_nodes()","syntaxtree::defendless#child_nodes()","syntaxtree::defined#child_nodes()","syntaxtree::defs#child_nodes()","syntaxtree::doblock#child_nodes()","syntaxtree::dot2#child_nodes()","syntaxtree::dot3#child_nodes()","syntaxtree::dynasymbol#child_nodes()","syntaxtree::endblock#child_nodes()","syntaxtree::else#child_nodes()","syntaxtree::elsif#child_nodes()","syntaxtree::embdoc#child_nodes()","syntaxtree::embexprbeg#child_nodes()","syntaxtree::embexprend#child_nodes()","syntaxtree::embvar#child_nodes()","syntaxtree::endcontent#child_nodes()","syntaxtree::ensure#child_nodes()","syntaxtree::excessedcomma#child_nodes()","syntaxtree::fcall#child_nodes()","syntaxtree::field#child_nodes()","syntaxtree::floatliteral#child_nodes()","syntaxtree::fndptn#child_nodes()","syntaxtree::for#child_nodes()","syntaxtree::gvar#child_nodes()","syntaxtree::hashliteral#child_nodes()","syntaxtree::heredoc#child_nodes()","syntaxtree::heredocbeg#child_nodes()","syntaxtree::hshptn#child_nodes()","syntaxtree::ivar#child_nodes()","syntaxtree::ident#child_nodes()","syntaxtree::if#child_nodes()","syntaxtree::ifmod#child_nodes()","syntaxtree::ifop#child_nodes()","syntaxtree::imaginary#child_nodes()","syntaxtree::in#child_nodes()","syntaxtree::int#child_nodes()","syntaxtree::kw#child_nodes()","syntaxtree::kwrestparam#child_nodes()","syntaxtree::lbrace#child_nodes()","syntaxtree::lbracket#child_nodes()","syntaxtree::lparen#child_nodes()","syntaxtree::label#child_nodes()","syntaxtree::labelend#child_nodes()","syntaxtree::lambda#child_nodes()","syntaxtree::lambdavar#child_nodes()","syntaxtree::massign#child_nodes()","syntaxtree::mlhs#child_nodes()","syntaxtree::mlhsparen#child_nodes()","syntaxtree::mrhs#child_nodes()","syntaxtree::methodaddblock#child_nodes()","syntaxtree::moduledeclaration#child_nodes()","syntaxtree::next#child_nodes()","syntaxtree::node#child_nodes()","syntaxtree::not#child_nodes()","syntaxtree::op#child_nodes()","syntaxtree::opassign#child_nodes()","syntaxtree::params#child_nodes()","syntaxtree::paren#child_nodes()","syntaxtree::period#child_nodes()","syntaxtree::pinnedbegin#child_nodes()","syntaxtree::pinnedvarref#child_nodes()","syntaxtree::program#child_nodes()","syntaxtree::qsymbols#child_nodes()","syntaxtree::qsymbolsbeg#child_nodes()","syntaxtree::qwords#child_nodes()","syntaxtree::qwordsbeg#child_nodes()","syntaxtree::rassign#child_nodes()","syntaxtree::rbrace#child_nodes()","syntaxtree::rbracket#child_nodes()","syntaxtree::rparen#child_nodes()","syntaxtree::rationalliteral#child_nodes()","syntaxtree::redo#child_nodes()","syntaxtree::regexpbeg#child_nodes()","syntaxtree::regexpcontent#child_nodes()","syntaxtree::regexpend#child_nodes()","syntaxtree::regexpliteral#child_nodes()","syntaxtree::rescue#child_nodes()","syntaxtree::rescueex#child_nodes()","syntaxtree::rescuemod#child_nodes()","syntaxtree::restparam#child_nodes()","syntaxtree::retry#child_nodes()","syntaxtree::return#child_nodes()","syntaxtree::return0#child_nodes()","syntaxtree::sclass#child_nodes()","syntaxtree::statements#child_nodes()","syntaxtree::stringconcat#child_nodes()","syntaxtree::stringcontent#child_nodes()","syntaxtree::stringdvar#child_nodes()","syntaxtree::stringembexpr#child_nodes()","syntaxtree::stringliteral#child_nodes()","syntaxtree::super#child_nodes()","syntaxtree::symbeg#child_nodes()","syntaxtree::symbolcontent#child_nodes()","syntaxtree::symbolliteral#child_nodes()","syntaxtree::symbols#child_nodes()","syntaxtree::symbolsbeg#child_nodes()","syntaxtree::tlambeg#child_nodes()","syntaxtree::tlambda#child_nodes()","syntaxtree::tstringbeg#child_nodes()","syntaxtree::tstringcontent#child_nodes()","syntaxtree::tstringend#child_nodes()","syntaxtree::topconstfield#child_nodes()","syntaxtree::topconstref#child_nodes()","syntaxtree::unary#child_nodes()","syntaxtree::undef#child_nodes()","syntaxtree::unless#child_nodes()","syntaxtree::unlessmod#child_nodes()","syntaxtree::until#child_nodes()","syntaxtree::untilmod#child_nodes()","syntaxtree::vcall#child_nodes()","syntaxtree::varalias#child_nodes()","syntaxtree::varfield#child_nodes()","syntaxtree::varref#child_nodes()","syntaxtree::voidstmt#child_nodes()","syntaxtree::when#child_nodes()","syntaxtree::while#child_nodes()","syntaxtree::whilemod#child_nodes()","syntaxtree::word#child_nodes()","syntaxtree::words#child_nodes()","syntaxtree::wordsbeg#child_nodes()","syntaxtree::xstring#child_nodes()","syntaxtree::xstringliteral#child_nodes()","syntaxtree::yield#child_nodes()","syntaxtree::yield0#child_nodes()","syntaxtree::zsuper#child_nodes()","syntaxtree::alias::aliasargumentformatter#comments()","syntaxtree::aryptn::restformatter#comments()","syntaxtree::blockformatter::blockopenformatter#comments()","syntaxtree::calloperatorformatter#comments()","syntaxtree::comment#comments()","syntaxtree::embdoc#comments()","syntaxtree::hshptn::keywordformatter#comments()","syntaxtree::hshptn::keywordrestformatter#comments()","syntaxtree::params::keywordformatter#comments()","syntaxtree::params::keywordrestformatter#comments()","syntaxtree::params::optionalformatter#comments()","syntaxtree::undef::undefargumentformatter#comments()","syntaxtree::node#construct_keys()","syntaxtree::basicvisitor::visitmethodchecker#corrections()","syntaxtree::aref#deconstruct()","syntaxtree::areffield#deconstruct()","syntaxtree::alias#deconstruct()","syntaxtree::argblock#deconstruct()","syntaxtree::argparen#deconstruct()","syntaxtree::argstar#deconstruct()","syntaxtree::args#deconstruct()","syntaxtree::argsforward#deconstruct()","syntaxtree::arrayliteral#deconstruct()","syntaxtree::aryptn#deconstruct()","syntaxtree::assign#deconstruct()","syntaxtree::assoc#deconstruct()","syntaxtree::assocsplat#deconstruct()","syntaxtree::beginblock#deconstruct()","syntaxtree::backref#deconstruct()","syntaxtree::backtick#deconstruct()","syntaxtree::bareassochash#deconstruct()","syntaxtree::begin#deconstruct()","syntaxtree::binary#deconstruct()","syntaxtree::blockarg#deconstruct()","syntaxtree::blockvar#deconstruct()","syntaxtree::bodystmt#deconstruct()","syntaxtree::braceblock#deconstruct()","syntaxtree::break#deconstruct()","syntaxtree::char#deconstruct()","syntaxtree::cvar#deconstruct()","syntaxtree::call#deconstruct()","syntaxtree::case#deconstruct()","syntaxtree::classdeclaration#deconstruct()","syntaxtree::comma#deconstruct()","syntaxtree::command#deconstruct()","syntaxtree::commandcall#deconstruct()","syntaxtree::comment#deconstruct()","syntaxtree::const#deconstruct()","syntaxtree::constpathfield#deconstruct()","syntaxtree::constpathref#deconstruct()","syntaxtree::constref#deconstruct()","syntaxtree::def#deconstruct()","syntaxtree::defendless#deconstruct()","syntaxtree::defined#deconstruct()","syntaxtree::defs#deconstruct()","syntaxtree::doblock#deconstruct()","syntaxtree::dot2#deconstruct()","syntaxtree::dot3#deconstruct()","syntaxtree::dynasymbol#deconstruct()","syntaxtree::endblock#deconstruct()","syntaxtree::else#deconstruct()","syntaxtree::elsif#deconstruct()","syntaxtree::embdoc#deconstruct()","syntaxtree::embexprbeg#deconstruct()","syntaxtree::embexprend#deconstruct()","syntaxtree::embvar#deconstruct()","syntaxtree::endcontent#deconstruct()","syntaxtree::ensure#deconstruct()","syntaxtree::excessedcomma#deconstruct()","syntaxtree::fcall#deconstruct()","syntaxtree::field#deconstruct()","syntaxtree::floatliteral#deconstruct()","syntaxtree::fndptn#deconstruct()","syntaxtree::for#deconstruct()","syntaxtree::gvar#deconstruct()","syntaxtree::hashliteral#deconstruct()","syntaxtree::heredoc#deconstruct()","syntaxtree::heredocbeg#deconstruct()","syntaxtree::hshptn#deconstruct()","syntaxtree::ivar#deconstruct()","syntaxtree::ident#deconstruct()","syntaxtree::if#deconstruct()","syntaxtree::ifmod#deconstruct()","syntaxtree::ifop#deconstruct()","syntaxtree::imaginary#deconstruct()","syntaxtree::in#deconstruct()","syntaxtree::int#deconstruct()","syntaxtree::kw#deconstruct()","syntaxtree::kwrestparam#deconstruct()","syntaxtree::lbrace#deconstruct()","syntaxtree::lbracket#deconstruct()","syntaxtree::lparen#deconstruct()","syntaxtree::label#deconstruct()","syntaxtree::labelend#deconstruct()","syntaxtree::lambda#deconstruct()","syntaxtree::lambdavar#deconstruct()","syntaxtree::location#deconstruct()","syntaxtree::massign#deconstruct()","syntaxtree::mlhs#deconstruct()","syntaxtree::mlhsparen#deconstruct()","syntaxtree::mrhs#deconstruct()","syntaxtree::methodaddblock#deconstruct()","syntaxtree::moduledeclaration#deconstruct()","syntaxtree::next#deconstruct()","syntaxtree::node#deconstruct()","syntaxtree::not#deconstruct()","syntaxtree::op#deconstruct()","syntaxtree::opassign#deconstruct()","syntaxtree::params#deconstruct()","syntaxtree::paren#deconstruct()","syntaxtree::period#deconstruct()","syntaxtree::pinnedbegin#deconstruct()","syntaxtree::pinnedvarref#deconstruct()","syntaxtree::program#deconstruct()","syntaxtree::qsymbols#deconstruct()","syntaxtree::qsymbolsbeg#deconstruct()","syntaxtree::qwords#deconstruct()","syntaxtree::qwordsbeg#deconstruct()","syntaxtree::rassign#deconstruct()","syntaxtree::rbrace#deconstruct()","syntaxtree::rbracket#deconstruct()","syntaxtree::rparen#deconstruct()","syntaxtree::rationalliteral#deconstruct()","syntaxtree::redo#deconstruct()","syntaxtree::regexpbeg#deconstruct()","syntaxtree::regexpcontent#deconstruct()","syntaxtree::regexpend#deconstruct()","syntaxtree::regexpliteral#deconstruct()","syntaxtree::rescue#deconstruct()","syntaxtree::rescueex#deconstruct()","syntaxtree::rescuemod#deconstruct()","syntaxtree::restparam#deconstruct()","syntaxtree::retry#deconstruct()","syntaxtree::return#deconstruct()","syntaxtree::return0#deconstruct()","syntaxtree::sclass#deconstruct()","syntaxtree::statements#deconstruct()","syntaxtree::stringconcat#deconstruct()","syntaxtree::stringcontent#deconstruct()","syntaxtree::stringdvar#deconstruct()","syntaxtree::stringembexpr#deconstruct()","syntaxtree::stringliteral#deconstruct()","syntaxtree::super#deconstruct()","syntaxtree::symbeg#deconstruct()","syntaxtree::symbolcontent#deconstruct()","syntaxtree::symbolliteral#deconstruct()","syntaxtree::symbols#deconstruct()","syntaxtree::symbolsbeg#deconstruct()","syntaxtree::tlambeg#deconstruct()","syntaxtree::tlambda#deconstruct()","syntaxtree::tstringbeg#deconstruct()","syntaxtree::tstringcontent#deconstruct()","syntaxtree::tstringend#deconstruct()","syntaxtree::topconstfield#deconstruct()","syntaxtree::topconstref#deconstruct()","syntaxtree::unary#deconstruct()","syntaxtree::undef#deconstruct()","syntaxtree::unless#deconstruct()","syntaxtree::unlessmod#deconstruct()","syntaxtree::until#deconstruct()","syntaxtree::untilmod#deconstruct()","syntaxtree::vcall#deconstruct()","syntaxtree::varalias#deconstruct()","syntaxtree::varfield#deconstruct()","syntaxtree::varref#deconstruct()","syntaxtree::voidstmt#deconstruct()","syntaxtree::when#deconstruct()","syntaxtree::while#deconstruct()","syntaxtree::whilemod#deconstruct()","syntaxtree::word#deconstruct()","syntaxtree::words#deconstruct()","syntaxtree::wordsbeg#deconstruct()","syntaxtree::xstring#deconstruct()","syntaxtree::xstringliteral#deconstruct()","syntaxtree::yield#deconstruct()","syntaxtree::yield0#deconstruct()","syntaxtree::zsuper#deconstruct()","syntaxtree::aref#deconstruct_keys()","syntaxtree::areffield#deconstruct_keys()","syntaxtree::alias#deconstruct_keys()","syntaxtree::argblock#deconstruct_keys()","syntaxtree::argparen#deconstruct_keys()","syntaxtree::argstar#deconstruct_keys()","syntaxtree::args#deconstruct_keys()","syntaxtree::argsforward#deconstruct_keys()","syntaxtree::arrayliteral#deconstruct_keys()","syntaxtree::aryptn#deconstruct_keys()","syntaxtree::assign#deconstruct_keys()","syntaxtree::assoc#deconstruct_keys()","syntaxtree::assocsplat#deconstruct_keys()","syntaxtree::beginblock#deconstruct_keys()","syntaxtree::backref#deconstruct_keys()","syntaxtree::backtick#deconstruct_keys()","syntaxtree::bareassochash#deconstruct_keys()","syntaxtree::begin#deconstruct_keys()","syntaxtree::binary#deconstruct_keys()","syntaxtree::blockarg#deconstruct_keys()","syntaxtree::blockvar#deconstruct_keys()","syntaxtree::bodystmt#deconstruct_keys()","syntaxtree::braceblock#deconstruct_keys()","syntaxtree::break#deconstruct_keys()","syntaxtree::char#deconstruct_keys()","syntaxtree::cvar#deconstruct_keys()","syntaxtree::call#deconstruct_keys()","syntaxtree::case#deconstruct_keys()","syntaxtree::classdeclaration#deconstruct_keys()","syntaxtree::comma#deconstruct_keys()","syntaxtree::command#deconstruct_keys()","syntaxtree::commandcall#deconstruct_keys()","syntaxtree::comment#deconstruct_keys()","syntaxtree::const#deconstruct_keys()","syntaxtree::constpathfield#deconstruct_keys()","syntaxtree::constpathref#deconstruct_keys()","syntaxtree::constref#deconstruct_keys()","syntaxtree::def#deconstruct_keys()","syntaxtree::defendless#deconstruct_keys()","syntaxtree::defined#deconstruct_keys()","syntaxtree::defs#deconstruct_keys()","syntaxtree::doblock#deconstruct_keys()","syntaxtree::dot2#deconstruct_keys()","syntaxtree::dot3#deconstruct_keys()","syntaxtree::dynasymbol#deconstruct_keys()","syntaxtree::endblock#deconstruct_keys()","syntaxtree::else#deconstruct_keys()","syntaxtree::elsif#deconstruct_keys()","syntaxtree::embdoc#deconstruct_keys()","syntaxtree::embexprbeg#deconstruct_keys()","syntaxtree::embexprend#deconstruct_keys()","syntaxtree::embvar#deconstruct_keys()","syntaxtree::endcontent#deconstruct_keys()","syntaxtree::ensure#deconstruct_keys()","syntaxtree::excessedcomma#deconstruct_keys()","syntaxtree::fcall#deconstruct_keys()","syntaxtree::field#deconstruct_keys()","syntaxtree::floatliteral#deconstruct_keys()","syntaxtree::fndptn#deconstruct_keys()","syntaxtree::for#deconstruct_keys()","syntaxtree::gvar#deconstruct_keys()","syntaxtree::hashliteral#deconstruct_keys()","syntaxtree::heredoc#deconstruct_keys()","syntaxtree::heredocbeg#deconstruct_keys()","syntaxtree::hshptn#deconstruct_keys()","syntaxtree::ivar#deconstruct_keys()","syntaxtree::ident#deconstruct_keys()","syntaxtree::if#deconstruct_keys()","syntaxtree::ifmod#deconstruct_keys()","syntaxtree::ifop#deconstruct_keys()","syntaxtree::imaginary#deconstruct_keys()","syntaxtree::in#deconstruct_keys()","syntaxtree::int#deconstruct_keys()","syntaxtree::kw#deconstruct_keys()","syntaxtree::kwrestparam#deconstruct_keys()","syntaxtree::lbrace#deconstruct_keys()","syntaxtree::lbracket#deconstruct_keys()","syntaxtree::lparen#deconstruct_keys()","syntaxtree::label#deconstruct_keys()","syntaxtree::labelend#deconstruct_keys()","syntaxtree::lambda#deconstruct_keys()","syntaxtree::lambdavar#deconstruct_keys()","syntaxtree::location#deconstruct_keys()","syntaxtree::massign#deconstruct_keys()","syntaxtree::mlhs#deconstruct_keys()","syntaxtree::mlhsparen#deconstruct_keys()","syntaxtree::mrhs#deconstruct_keys()","syntaxtree::methodaddblock#deconstruct_keys()","syntaxtree::moduledeclaration#deconstruct_keys()","syntaxtree::next#deconstruct_keys()","syntaxtree::node#deconstruct_keys()","syntaxtree::not#deconstruct_keys()","syntaxtree::op#deconstruct_keys()","syntaxtree::opassign#deconstruct_keys()","syntaxtree::params#deconstruct_keys()","syntaxtree::paren#deconstruct_keys()","syntaxtree::period#deconstruct_keys()","syntaxtree::pinnedbegin#deconstruct_keys()","syntaxtree::pinnedvarref#deconstruct_keys()","syntaxtree::program#deconstruct_keys()","syntaxtree::qsymbols#deconstruct_keys()","syntaxtree::qsymbolsbeg#deconstruct_keys()","syntaxtree::qwords#deconstruct_keys()","syntaxtree::qwordsbeg#deconstruct_keys()","syntaxtree::rassign#deconstruct_keys()","syntaxtree::rbrace#deconstruct_keys()","syntaxtree::rbracket#deconstruct_keys()","syntaxtree::rparen#deconstruct_keys()","syntaxtree::rationalliteral#deconstruct_keys()","syntaxtree::redo#deconstruct_keys()","syntaxtree::regexpbeg#deconstruct_keys()","syntaxtree::regexpcontent#deconstruct_keys()","syntaxtree::regexpend#deconstruct_keys()","syntaxtree::regexpliteral#deconstruct_keys()","syntaxtree::rescue#deconstruct_keys()","syntaxtree::rescueex#deconstruct_keys()","syntaxtree::rescuemod#deconstruct_keys()","syntaxtree::restparam#deconstruct_keys()","syntaxtree::retry#deconstruct_keys()","syntaxtree::return#deconstruct_keys()","syntaxtree::return0#deconstruct_keys()","syntaxtree::sclass#deconstruct_keys()","syntaxtree::statements#deconstruct_keys()","syntaxtree::stringconcat#deconstruct_keys()","syntaxtree::stringcontent#deconstruct_keys()","syntaxtree::stringdvar#deconstruct_keys()","syntaxtree::stringembexpr#deconstruct_keys()","syntaxtree::stringliteral#deconstruct_keys()","syntaxtree::super#deconstruct_keys()","syntaxtree::symbeg#deconstruct_keys()","syntaxtree::symbolcontent#deconstruct_keys()","syntaxtree::symbolliteral#deconstruct_keys()","syntaxtree::symbols#deconstruct_keys()","syntaxtree::symbolsbeg#deconstruct_keys()","syntaxtree::tlambeg#deconstruct_keys()","syntaxtree::tlambda#deconstruct_keys()","syntaxtree::tstringbeg#deconstruct_keys()","syntaxtree::tstringcontent#deconstruct_keys()","syntaxtree::tstringend#deconstruct_keys()","syntaxtree::topconstfield#deconstruct_keys()","syntaxtree::topconstref#deconstruct_keys()","syntaxtree::unary#deconstruct_keys()","syntaxtree::undef#deconstruct_keys()","syntaxtree::unless#deconstruct_keys()","syntaxtree::unlessmod#deconstruct_keys()","syntaxtree::until#deconstruct_keys()","syntaxtree::untilmod#deconstruct_keys()","syntaxtree::vcall#deconstruct_keys()","syntaxtree::varalias#deconstruct_keys()","syntaxtree::varfield#deconstruct_keys()","syntaxtree::varref#deconstruct_keys()","syntaxtree::voidstmt#deconstruct_keys()","syntaxtree::when#deconstruct_keys()","syntaxtree::while#deconstruct_keys()","syntaxtree::whilemod#deconstruct_keys()","syntaxtree::word#deconstruct_keys()","syntaxtree::words#deconstruct_keys()","syntaxtree::wordsbeg#deconstruct_keys()","syntaxtree::xstring#deconstruct_keys()","syntaxtree::xstringliteral#deconstruct_keys()","syntaxtree::yield#deconstruct_keys()","syntaxtree::yield0#deconstruct_keys()","syntaxtree::zsuper#deconstruct_keys()","syntaxtree::bodystmt#empty?()","syntaxtree::lambdavar#empty?()","syntaxtree::params#empty?()","syntaxtree::statements#empty?()","syntaxtree::cli::action#failure()","syntaxtree::cli::check#failure()","syntaxtree::cli::debug#failure()","syntaxtree::languageserver::inlayhints::find()","syntaxtree::location::fixed()","syntaxtree::parentheses::flat()","syntaxtree::hashkeyformatter::for()","syntaxtree::format()","syntaxtree::aref#format()","syntaxtree::areffield#format()","syntaxtree::alias#format()","syntaxtree::alias::aliasargumentformatter#format()","syntaxtree::argblock#format()","syntaxtree::argparen#format()","syntaxtree::argstar#format()","syntaxtree::args#format()","syntaxtree::argsforward#format()","syntaxtree::arrayliteral#format()","syntaxtree::arrayliteral::emptywithcommentsformatter#format()","syntaxtree::arrayliteral::qsymbolsformatter#format()","syntaxtree::arrayliteral::qwordsformatter#format()","syntaxtree::arrayliteral::varrefsformatter#format()","syntaxtree::aryptn#format()","syntaxtree::aryptn::restformatter#format()","syntaxtree::assign#format()","syntaxtree::assoc#format()","syntaxtree::assocsplat#format()","syntaxtree::beginblock#format()","syntaxtree::backref#format()","syntaxtree::backtick#format()","syntaxtree::bareassochash#format()","syntaxtree::begin#format()","syntaxtree::binary#format()","syntaxtree::blockarg#format()","syntaxtree::blockformatter#format()","syntaxtree::blockformatter::blockopenformatter#format()","syntaxtree::blockvar#format()","syntaxtree::bodystmt#format()","syntaxtree::braceblock#format()","syntaxtree::break#format()","syntaxtree::char#format()","syntaxtree::cvar#format()","syntaxtree::call#format()","syntaxtree::callchainformatter#format()","syntaxtree::calloperatorformatter#format()","syntaxtree::case#format()","syntaxtree::classdeclaration#format()","syntaxtree::command#format()","syntaxtree::commandcall#format()","syntaxtree::comment#format()","syntaxtree::conditionalformatter#format()","syntaxtree::conditionalmodformatter#format()","syntaxtree::const#format()","syntaxtree::constpathfield#format()","syntaxtree::constpathref#format()","syntaxtree::constref#format()","syntaxtree::def#format()","syntaxtree::defendless#format()","syntaxtree::defined#format()","syntaxtree::defs#format()","syntaxtree::doblock#format()","syntaxtree::dot2#format()","syntaxtree::dot3#format()","syntaxtree::dotformatter#format()","syntaxtree::dynasymbol#format()","syntaxtree::endblock#format()","syntaxtree::else#format()","syntaxtree::elsif#format()","syntaxtree::embdoc#format()","syntaxtree::endcontent#format()","syntaxtree::ensure#format()","syntaxtree::excessedcomma#format()","syntaxtree::fcall#format()","syntaxtree::field#format()","syntaxtree::floatliteral#format()","syntaxtree::flowcontrolformatter#format()","syntaxtree::fndptn#format()","syntaxtree::for#format()","syntaxtree::formatter::format()","syntaxtree::formatter#format()","syntaxtree::gvar#format()","syntaxtree::hashliteral#format()","syntaxtree::hashliteral::emptywithcommentsformatter#format()","syntaxtree::heredoc#format()","syntaxtree::heredocbeg#format()","syntaxtree::hshptn#format()","syntaxtree::hshptn::keywordformatter#format()","syntaxtree::hshptn::keywordrestformatter#format()","syntaxtree::ivar#format()","syntaxtree::ident#format()","syntaxtree::if#format()","syntaxtree::ifmod#format()","syntaxtree::ifop#format()","syntaxtree::imaginary#format()","syntaxtree::in#format()","syntaxtree::int#format()","syntaxtree::kw#format()","syntaxtree::kwrestparam#format()","syntaxtree::lbrace#format()","syntaxtree::lbracket#format()","syntaxtree::lparen#format()","syntaxtree::label#format()","syntaxtree::lambda#format()","syntaxtree::lambdavar#format()","syntaxtree::loopformatter#format()","syntaxtree::massign#format()","syntaxtree::mlhs#format()","syntaxtree::mlhsparen#format()","syntaxtree::mrhs#format()","syntaxtree::methodaddblock#format()","syntaxtree::moduledeclaration#format()","syntaxtree::next#format()","syntaxtree::node#format()","syntaxtree::not#format()","syntaxtree::op#format()","syntaxtree::opassign#format()","syntaxtree::params#format()","syntaxtree::params::keywordformatter#format()","syntaxtree::params::keywordrestformatter#format()","syntaxtree::params::optionalformatter#format()","syntaxtree::paren#format()","syntaxtree::period#format()","syntaxtree::pinnedbegin#format()","syntaxtree::pinnedvarref#format()","syntaxtree::program#format()","syntaxtree::qsymbols#format()","syntaxtree::qwords#format()","syntaxtree::rassign#format()","syntaxtree::rationalliteral#format()","syntaxtree::redo#format()","syntaxtree::regexpliteral#format()","syntaxtree::rescue#format()","syntaxtree::rescueex#format()","syntaxtree::rescuemod#format()","syntaxtree::restparam#format()","syntaxtree::retry#format()","syntaxtree::return#format()","syntaxtree::return0#format()","syntaxtree::sclass#format()","syntaxtree::statements#format()","syntaxtree::stringconcat#format()","syntaxtree::stringdvar#format()","syntaxtree::stringembexpr#format()","syntaxtree::stringliteral#format()","syntaxtree::super#format()","syntaxtree::symbolliteral#format()","syntaxtree::symbols#format()","syntaxtree::tstringcontent#format()","syntaxtree::topconstfield#format()","syntaxtree::topconstref#format()","syntaxtree::unary#format()","syntaxtree::undef#format()","syntaxtree::undef::undefargumentformatter#format()","syntaxtree::unless#format()","syntaxtree::unlessmod#format()","syntaxtree::until#format()","syntaxtree::untilmod#format()","syntaxtree::vcall#format()","syntaxtree::varalias#format()","syntaxtree::varfield#format()","syntaxtree::varref#format()","syntaxtree::voidstmt#format()","syntaxtree::when#format()","syntaxtree::while#format()","syntaxtree::whilemod#format()","syntaxtree::word#format()","syntaxtree::words#format()","syntaxtree::xstringliteral#format()","syntaxtree::yield#format()","syntaxtree::yield0#format()","syntaxtree::zsuper#format()","syntaxtree::call#format_arguments()","syntaxtree::callchainformatter#format_chain()","syntaxtree::call#format_contents()","syntaxtree::methodaddblock#format_contents()","syntaxtree::formatter#format_each()","syntaxtree::bareassochash#format_key()","syntaxtree::hashkeyformatter::labels#format_key()","syntaxtree::hashkeyformatter::rockets#format_key()","syntaxtree::hashliteral#format_key()","syntaxtree::cli::color::gray()","syntaxtree::comment#ignore?()","syntaxtree::embdoc#ignore?()","syntaxtree::embdoc#inline?()","syntaxtree::comment#leading!()","syntaxtree::comment#leading?()","syntaxtree::location#lines()","syntaxtree::quotes::locked?()","syntaxtree::tstringcontent#match?()","syntaxtree::word#match?()","syntaxtree::quotes::matching()","syntaxtree::aref::new()","syntaxtree::areffield::new()","syntaxtree::alias::new()","syntaxtree::alias::aliasargumentformatter::new()","syntaxtree::argblock::new()","syntaxtree::argparen::new()","syntaxtree::argstar::new()","syntaxtree::args::new()","syntaxtree::argsforward::new()","syntaxtree::arrayliteral::new()","syntaxtree::arrayliteral::emptywithcommentsformatter::new()","syntaxtree::arrayliteral::qsymbolsformatter::new()","syntaxtree::arrayliteral::qwordsformatter::new()","syntaxtree::arrayliteral::varrefsformatter::new()","syntaxtree::aryptn::new()","syntaxtree::aryptn::restformatter::new()","syntaxtree::assign::new()","syntaxtree::assoc::new()","syntaxtree::assocsplat::new()","syntaxtree::beginblock::new()","syntaxtree::backref::new()","syntaxtree::backtick::new()","syntaxtree::bareassochash::new()","syntaxtree::basicvisitor::visitmethodchecker::new()","syntaxtree::basicvisitor::visitmethoderror::new()","syntaxtree::begin::new()","syntaxtree::binary::new()","syntaxtree::blockarg::new()","syntaxtree::blockformatter::new()","syntaxtree::blockformatter::blockopenformatter::new()","syntaxtree::blockvar::new()","syntaxtree::bodystmt::new()","syntaxtree::braceblock::new()","syntaxtree::break::new()","syntaxtree::char::new()","syntaxtree::cli::color::new()","syntaxtree::cvar::new()","syntaxtree::call::new()","syntaxtree::callchainformatter::new()","syntaxtree::calloperatorformatter::new()","syntaxtree::case::new()","syntaxtree::classdeclaration::new()","syntaxtree::comma::new()","syntaxtree::command::new()","syntaxtree::commandcall::new()","syntaxtree::comment::new()","syntaxtree::conditionalformatter::new()","syntaxtree::conditionalmodformatter::new()","syntaxtree::const::new()","syntaxtree::constpathfield::new()","syntaxtree::constpathref::new()","syntaxtree::constref::new()","syntaxtree::def::new()","syntaxtree::defendless::new()","syntaxtree::defined::new()","syntaxtree::defs::new()","syntaxtree::doblock::new()","syntaxtree::dot2::new()","syntaxtree::dot3::new()","syntaxtree::dotformatter::new()","syntaxtree::dynasymbol::new()","syntaxtree::endblock::new()","syntaxtree::else::new()","syntaxtree::elsif::new()","syntaxtree::embdoc::new()","syntaxtree::embexprbeg::new()","syntaxtree::embexprend::new()","syntaxtree::embvar::new()","syntaxtree::endcontent::new()","syntaxtree::ensure::new()","syntaxtree::excessedcomma::new()","syntaxtree::fcall::new()","syntaxtree::field::new()","syntaxtree::floatliteral::new()","syntaxtree::flowcontrolformatter::new()","syntaxtree::fndptn::new()","syntaxtree::for::new()","syntaxtree::formatter::new()","syntaxtree::gvar::new()","syntaxtree::hashliteral::new()","syntaxtree::hashliteral::emptywithcommentsformatter::new()","syntaxtree::heredoc::new()","syntaxtree::heredocbeg::new()","syntaxtree::hshptn::new()","syntaxtree::hshptn::keywordformatter::new()","syntaxtree::hshptn::keywordrestformatter::new()","syntaxtree::ivar::new()","syntaxtree::ident::new()","syntaxtree::if::new()","syntaxtree::ifmod::new()","syntaxtree::ifop::new()","syntaxtree::imaginary::new()","syntaxtree::in::new()","syntaxtree::int::new()","syntaxtree::kw::new()","syntaxtree::kwrestparam::new()","syntaxtree::lbrace::new()","syntaxtree::lbracket::new()","syntaxtree::lparen::new()","syntaxtree::label::new()","syntaxtree::labelend::new()","syntaxtree::lambda::new()","syntaxtree::lambdavar::new()","syntaxtree::languageserver::new()","syntaxtree::languageserver::inlayhints::new()","syntaxtree::location::new()","syntaxtree::loopformatter::new()","syntaxtree::massign::new()","syntaxtree::mlhs::new()","syntaxtree::mlhsparen::new()","syntaxtree::mrhs::new()","syntaxtree::methodaddblock::new()","syntaxtree::moduledeclaration::new()","syntaxtree::next::new()","syntaxtree::not::new()","syntaxtree::op::new()","syntaxtree::opassign::new()","syntaxtree::params::new()","syntaxtree::params::keywordformatter::new()","syntaxtree::params::keywordrestformatter::new()","syntaxtree::params::optionalformatter::new()","syntaxtree::paren::new()","syntaxtree::parser::new()","syntaxtree::parser::multibytestring::new()","syntaxtree::parser::parseerror::new()","syntaxtree::parser::singlebytestring::new()","syntaxtree::period::new()","syntaxtree::pinnedbegin::new()","syntaxtree::pinnedvarref::new()","syntaxtree::program::new()","syntaxtree::qsymbols::new()","syntaxtree::qsymbolsbeg::new()","syntaxtree::qwords::new()","syntaxtree::qwordsbeg::new()","syntaxtree::rassign::new()","syntaxtree::rbrace::new()","syntaxtree::rbracket::new()","syntaxtree::rparen::new()","syntaxtree::rake::checktask::new()","syntaxtree::rake::writetask::new()","syntaxtree::rationalliteral::new()","syntaxtree::redo::new()","syntaxtree::regexpbeg::new()","syntaxtree::regexpcontent::new()","syntaxtree::regexpend::new()","syntaxtree::regexpliteral::new()","syntaxtree::rescue::new()","syntaxtree::rescueex::new()","syntaxtree::rescuemod::new()","syntaxtree::restparam::new()","syntaxtree::retry::new()","syntaxtree::return::new()","syntaxtree::return0::new()","syntaxtree::sclass::new()","syntaxtree::statements::new()","syntaxtree::stringconcat::new()","syntaxtree::stringcontent::new()","syntaxtree::stringdvar::new()","syntaxtree::stringembexpr::new()","syntaxtree::stringliteral::new()","syntaxtree::super::new()","syntaxtree::symbeg::new()","syntaxtree::symbolcontent::new()","syntaxtree::symbolliteral::new()","syntaxtree::symbols::new()","syntaxtree::symbolsbeg::new()","syntaxtree::tlambeg::new()","syntaxtree::tlambda::new()","syntaxtree::tstringbeg::new()","syntaxtree::tstringcontent::new()","syntaxtree::tstringend::new()","syntaxtree::topconstfield::new()","syntaxtree::topconstref::new()","syntaxtree::unary::new()","syntaxtree::undef::new()","syntaxtree::undef::undefargumentformatter::new()","syntaxtree::unless::new()","syntaxtree::unlessmod::new()","syntaxtree::until::new()","syntaxtree::untilmod::new()","syntaxtree::vcall::new()","syntaxtree::varalias::new()","syntaxtree::varfield::new()","syntaxtree::varref::new()","syntaxtree::visitor::jsonvisitor::new()","syntaxtree::visitor::matchvisitor::new()","syntaxtree::visitor::prettyprintvisitor::new()","syntaxtree::voidstmt::new()","syntaxtree::when::new()","syntaxtree::while::new()","syntaxtree::whilemod::new()","syntaxtree::word::new()","syntaxtree::words::new()","syntaxtree::wordsbeg::new()","syntaxtree::xstring::new()","syntaxtree::xstringliteral::new()","syntaxtree::yield::new()","syntaxtree::yield0::new()","syntaxtree::zsuper::new()","syntaxtree::quotes::normalize()","syntaxtree::regexpliteral#options()","syntaxtree::formatter#parent()","syntaxtree::formatter#parents()","syntaxtree::parse()","syntaxtree::node#pretty_print()","syntaxtree::read()","syntaxtree::cli::color::red()","syntaxtree::register_handler()","syntaxtree::cli::run()","syntaxtree::cli::ast#run()","syntaxtree::cli::action#run()","syntaxtree::cli::check#run()","syntaxtree::cli::debug#run()","syntaxtree::cli::doc#run()","syntaxtree::cli::format#run()","syntaxtree::cli::json#run()","syntaxtree::cli::match#run()","syntaxtree::cli::write#run()","syntaxtree::languageserver#run()","syntaxtree::assignformatting::skip_indent?()","syntaxtree::cli::action#success()","syntaxtree::cli::check#success()","syntaxtree::cli::debug#success()","syntaxtree::location#to()","syntaxtree::node#to_json()","syntaxtree::cli::color#to_s()","syntaxtree::location::token()","syntaxtree::comment#trailing!()","syntaxtree::comment#trailing?()","syntaxtree::basicvisitor#visit()","syntaxtree::languageserver::inlayhints#visit()","syntaxtree::visitor::matchvisitor#visit()","syntaxtree::visitor::fieldvisitor#visit_begin()","syntaxtree::visitor::fieldvisitor#visit_char()","syntaxtree::visitor::fieldvisitor#visit_end()","syntaxtree::visitor::fieldvisitor#visit___end__()","syntaxtree::visitor::fieldvisitor#visit_alias()","syntaxtree::basicvisitor#visit_all()","syntaxtree::visitor::fieldvisitor#visit_aref()","syntaxtree::visitor::fieldvisitor#visit_aref_field()","syntaxtree::visitor::fieldvisitor#visit_arg_block()","syntaxtree::visitor::fieldvisitor#visit_arg_paren()","syntaxtree::visitor::fieldvisitor#visit_arg_star()","syntaxtree::visitor::fieldvisitor#visit_args()","syntaxtree::visitor::fieldvisitor#visit_args_forward()","syntaxtree::visitor::fieldvisitor#visit_array()","syntaxtree::visitor::fieldvisitor#visit_aryptn()","syntaxtree::languageserver::inlayhints#visit_assign()","syntaxtree::visitor::fieldvisitor#visit_assign()","syntaxtree::visitor::fieldvisitor#visit_assoc()","syntaxtree::visitor::fieldvisitor#visit_assoc_splat()","syntaxtree::visitor::fieldvisitor#visit_backref()","syntaxtree::visitor::fieldvisitor#visit_backtick()","syntaxtree::visitor::fieldvisitor#visit_bare_assoc_hash()","syntaxtree::visitor::fieldvisitor#visit_begin()","syntaxtree::languageserver::inlayhints#visit_binary()","syntaxtree::visitor::fieldvisitor#visit_binary()","syntaxtree::visitor::prettyprintvisitor#visit_binary()","syntaxtree::visitor::fieldvisitor#visit_block_var()","syntaxtree::visitor::fieldvisitor#visit_blockarg()","syntaxtree::visitor::fieldvisitor#visit_bodystmt()","syntaxtree::visitor::fieldvisitor#visit_brace_block()","syntaxtree::visitor::fieldvisitor#visit_break()","syntaxtree::visitor::fieldvisitor#visit_call()","syntaxtree::visitor::fieldvisitor#visit_case()","syntaxtree::basicvisitor#visit_child_nodes()","syntaxtree::visitor::fieldvisitor#visit_class()","syntaxtree::visitor::fieldvisitor#visit_comma()","syntaxtree::visitor::fieldvisitor#visit_command()","syntaxtree::visitor::fieldvisitor#visit_command_call()","syntaxtree::visitor::fieldvisitor#visit_comment()","syntaxtree::visitor::fieldvisitor#visit_const()","syntaxtree::visitor::fieldvisitor#visit_const_path_field()","syntaxtree::visitor::fieldvisitor#visit_const_path_ref()","syntaxtree::visitor::fieldvisitor#visit_const_ref()","syntaxtree::visitor::fieldvisitor#visit_cvar()","syntaxtree::visitor::fieldvisitor#visit_def()","syntaxtree::visitor::fieldvisitor#visit_def_endless()","syntaxtree::visitor::fieldvisitor#visit_defined()","syntaxtree::visitor::fieldvisitor#visit_defs()","syntaxtree::visitor::fieldvisitor#visit_do_block()","syntaxtree::visitor::fieldvisitor#visit_dot2()","syntaxtree::visitor::fieldvisitor#visit_dot3()","syntaxtree::visitor::fieldvisitor#visit_dyna_symbol()","syntaxtree::visitor::fieldvisitor#visit_else()","syntaxtree::visitor::fieldvisitor#visit_elsif()","syntaxtree::visitor::fieldvisitor#visit_embdoc()","syntaxtree::visitor::fieldvisitor#visit_embexpr_beg()","syntaxtree::visitor::fieldvisitor#visit_embexpr_end()","syntaxtree::visitor::fieldvisitor#visit_embvar()","syntaxtree::visitor::fieldvisitor#visit_ensure()","syntaxtree::visitor::fieldvisitor#visit_excessed_comma()","syntaxtree::visitor::fieldvisitor#visit_fcall()","syntaxtree::visitor::fieldvisitor#visit_field()","syntaxtree::visitor::fieldvisitor#visit_float()","syntaxtree::visitor::fieldvisitor#visit_fndptn()","syntaxtree::visitor::fieldvisitor#visit_for()","syntaxtree::visitor::fieldvisitor#visit_gvar()","syntaxtree::visitor::fieldvisitor#visit_hash()","syntaxtree::visitor::fieldvisitor#visit_heredoc()","syntaxtree::visitor::fieldvisitor#visit_heredoc_beg()","syntaxtree::visitor::fieldvisitor#visit_hshptn()","syntaxtree::visitor::fieldvisitor#visit_ident()","syntaxtree::visitor::fieldvisitor#visit_if()","syntaxtree::visitor::fieldvisitor#visit_if_mod()","syntaxtree::languageserver::inlayhints#visit_if_op()","syntaxtree::visitor::fieldvisitor#visit_if_op()","syntaxtree::visitor::fieldvisitor#visit_imaginary()","syntaxtree::visitor::fieldvisitor#visit_in()","syntaxtree::visitor::fieldvisitor#visit_int()","syntaxtree::visitor::fieldvisitor#visit_ivar()","syntaxtree::visitor::fieldvisitor#visit_kw()","syntaxtree::visitor::fieldvisitor#visit_kwrest_param()","syntaxtree::visitor::fieldvisitor#visit_label()","syntaxtree::visitor::prettyprintvisitor#visit_label()","syntaxtree::visitor::fieldvisitor#visit_label_end()","syntaxtree::visitor::fieldvisitor#visit_lambda()","syntaxtree::visitor::fieldvisitor#visit_lambda_var()","syntaxtree::visitor::fieldvisitor#visit_lbrace()","syntaxtree::visitor::fieldvisitor#visit_lbracket()","syntaxtree::visitor::fieldvisitor#visit_lparen()","syntaxtree::visitor::fieldvisitor#visit_massign()","syntaxtree::basicvisitor::visit_method()","syntaxtree::visitor::fieldvisitor#visit_method_add_block()","syntaxtree::basicvisitor::visit_methods()","syntaxtree::visitor::fieldvisitor#visit_mlhs()","syntaxtree::visitor::fieldvisitor#visit_mlhs_paren()","syntaxtree::visitor::fieldvisitor#visit_module()","syntaxtree::visitor::fieldvisitor#visit_mrhs()","syntaxtree::visitor::fieldvisitor#visit_next()","syntaxtree::visitor::fieldvisitor#visit_not()","syntaxtree::visitor::fieldvisitor#visit_op()","syntaxtree::visitor::fieldvisitor#visit_opassign()","syntaxtree::visitor::fieldvisitor#visit_params()","syntaxtree::visitor::fieldvisitor#visit_paren()","syntaxtree::visitor::fieldvisitor#visit_period()","syntaxtree::visitor::fieldvisitor#visit_pinned_begin()","syntaxtree::visitor::fieldvisitor#visit_pinned_var_ref()","syntaxtree::visitor::fieldvisitor#visit_program()","syntaxtree::visitor::fieldvisitor#visit_qsymbols()","syntaxtree::visitor::fieldvisitor#visit_qsymbols_beg()","syntaxtree::visitor::fieldvisitor#visit_qwords()","syntaxtree::visitor::fieldvisitor#visit_qwords_beg()","syntaxtree::visitor::fieldvisitor#visit_rassign()","syntaxtree::visitor::fieldvisitor#visit_rational()","syntaxtree::visitor::fieldvisitor#visit_rbrace()","syntaxtree::visitor::fieldvisitor#visit_rbracket()","syntaxtree::visitor::fieldvisitor#visit_redo()","syntaxtree::visitor::fieldvisitor#visit_regexp_beg()","syntaxtree::visitor::fieldvisitor#visit_regexp_content()","syntaxtree::visitor::fieldvisitor#visit_regexp_end()","syntaxtree::visitor::fieldvisitor#visit_regexp_literal()","syntaxtree::languageserver::inlayhints#visit_rescue()","syntaxtree::visitor::fieldvisitor#visit_rescue()","syntaxtree::visitor::fieldvisitor#visit_rescue_ex()","syntaxtree::visitor::fieldvisitor#visit_rescue_mod()","syntaxtree::visitor::fieldvisitor#visit_rest_param()","syntaxtree::visitor::fieldvisitor#visit_retry()","syntaxtree::visitor::fieldvisitor#visit_return()","syntaxtree::visitor::fieldvisitor#visit_return0()","syntaxtree::visitor::fieldvisitor#visit_rparen()","syntaxtree::visitor::fieldvisitor#visit_sclass()","syntaxtree::visitor::fieldvisitor#visit_statements()","syntaxtree::visitor::fieldvisitor#visit_string_concat()","syntaxtree::visitor::fieldvisitor#visit_string_content()","syntaxtree::visitor::fieldvisitor#visit_string_dvar()","syntaxtree::visitor::fieldvisitor#visit_string_embexpr()","syntaxtree::visitor::fieldvisitor#visit_string_literal()","syntaxtree::visitor::fieldvisitor#visit_super()","syntaxtree::visitor::fieldvisitor#visit_symbeg()","syntaxtree::visitor::fieldvisitor#visit_symbol_content()","syntaxtree::visitor::fieldvisitor#visit_symbol_literal()","syntaxtree::visitor::fieldvisitor#visit_symbols()","syntaxtree::visitor::fieldvisitor#visit_symbols_beg()","syntaxtree::visitor::fieldvisitor#visit_tlambda()","syntaxtree::visitor::fieldvisitor#visit_tlambeg()","syntaxtree::visitor::fieldvisitor#visit_top_const_field()","syntaxtree::visitor::fieldvisitor#visit_top_const_ref()","syntaxtree::visitor::fieldvisitor#visit_tstring_beg()","syntaxtree::visitor::fieldvisitor#visit_tstring_content()","syntaxtree::visitor::fieldvisitor#visit_tstring_end()","syntaxtree::languageserver::inlayhints#visit_unary()","syntaxtree::visitor::fieldvisitor#visit_unary()","syntaxtree::visitor::fieldvisitor#visit_undef()","syntaxtree::visitor::fieldvisitor#visit_unless()","syntaxtree::visitor::fieldvisitor#visit_unless_mod()","syntaxtree::visitor::fieldvisitor#visit_until()","syntaxtree::visitor::fieldvisitor#visit_until_mod()","syntaxtree::visitor::fieldvisitor#visit_var_alias()","syntaxtree::visitor::fieldvisitor#visit_var_field()","syntaxtree::visitor::fieldvisitor#visit_var_ref()","syntaxtree::visitor::fieldvisitor#visit_vcall()","syntaxtree::visitor::fieldvisitor#visit_void_stmt()","syntaxtree::visitor::fieldvisitor#visit_when()","syntaxtree::visitor::fieldvisitor#visit_while()","syntaxtree::visitor::fieldvisitor#visit_while_mod()","syntaxtree::visitor::fieldvisitor#visit_word()","syntaxtree::visitor::fieldvisitor#visit_words()","syntaxtree::visitor::fieldvisitor#visit_words_beg()","syntaxtree::visitor::fieldvisitor#visit_xstring()","syntaxtree::visitor::fieldvisitor#visit_xstring_literal()","syntaxtree::visitor::fieldvisitor#visit_yield()","syntaxtree::visitor::fieldvisitor#visit_yield0()","syntaxtree::visitor::fieldvisitor#visit_zsuper()","syntaxtree::cli::color::yellow()","","","",""],"info":[["SyntaxTree","","SyntaxTree.html","","<p>Syntax Tree is a suite of tools built on top of the internal CRuby parser. It provides the ability to …\n"],["SyntaxTree::ARef","","SyntaxTree/ARef.html","","<p>ARef represents when you’re pulling a value out of a collection at a specific index. Put another …\n"],["SyntaxTree::ARefField","","SyntaxTree/ARefField.html","","<p>ARefField represents assigning values into collections at specific indices. Put another way, it’s …\n"],["SyntaxTree::Alias","","SyntaxTree/Alias.html","","<p>Alias represents the use of the <code>alias</code> keyword with regular arguments (not global variables). The <code>alias</code> …\n"],["SyntaxTree::Alias::AliasArgumentFormatter","","SyntaxTree/Alias/AliasArgumentFormatter.html","","<p>Formats an argument to the alias keyword. For symbol literals it uses the value of the symbol directly …\n"],["SyntaxTree::ArgBlock","","SyntaxTree/ArgBlock.html","","<p>ArgBlock represents using a block operator on an expression.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">method</span>(<span class=\"ruby-operator\">&amp;</span><span class=\"ruby-identifier\">expression</span>)\n</pre>\n"],["SyntaxTree::ArgParen","","SyntaxTree/ArgParen.html","","<p>ArgParen represents wrapping arguments to a method inside a set of parentheses.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">method</span>(<span class=\"ruby-identifier\">argument</span>)\n</pre>\n<p>In the …\n"],["SyntaxTree::ArgStar","","SyntaxTree/ArgStar.html","","<p>Star represents using a splat operator on an expression.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">method</span>(<span class=\"ruby-operator\">*</span><span class=\"ruby-identifier\">arguments</span>)\n</pre>\n"],["SyntaxTree::Args","","SyntaxTree/Args.html","","<p>Args represents a list of arguments being passed to a method call or array literal.\n\n<pre>method(first, second, ...</pre>\n"],["SyntaxTree::ArgsForward","","SyntaxTree/ArgsForward.html","","<p>ArgsForward represents forwarding all kinds of arguments onto another method call.\n\n<pre>def request(method, ...</pre>\n"],["SyntaxTree::ArrayLiteral","","SyntaxTree/ArrayLiteral.html","","<p>ArrayLiteral represents an array literal, which can optionally contain elements.\n\n<pre class=\"ruby\">[]\n[<span class=\"ruby-identifier\">one</span>, <span class=\"ruby-identifier\">two</span>, <span class=\"ruby-identifier\">three</span>]\n</pre>\n"],["SyntaxTree::ArrayLiteral::EmptyWithCommentsFormatter","","SyntaxTree/ArrayLiteral/EmptyWithCommentsFormatter.html","","<p>This is a special formatter used if the array literal contains no values but <em>does</em> contain comments.  …\n"],["SyntaxTree::ArrayLiteral::QSymbolsFormatter","","SyntaxTree/ArrayLiteral/QSymbolsFormatter.html","","<p>Formats an array of multiple simple symbol literals into the %i syntax.\n"],["SyntaxTree::ArrayLiteral::QWordsFormatter","","SyntaxTree/ArrayLiteral/QWordsFormatter.html","","<p>Formats an array of multiple simple string literals into the %w syntax.\n"],["SyntaxTree::ArrayLiteral::VarRefsFormatter","","SyntaxTree/ArrayLiteral/VarRefsFormatter.html","","<p>Formats an array that contains only a list of variable references. To make things simpler, if there are …\n"],["SyntaxTree::AryPtn","","SyntaxTree/AryPtn.html","","<p>AryPtn represents matching against an array pattern using the Ruby 2.7+ pattern matching syntax. It’s …\n"],["SyntaxTree::AryPtn::RestFormatter","","SyntaxTree/AryPtn/RestFormatter.html","","<p>Formats the optional splat of an array pattern.\n"],["SyntaxTree::Assign","","SyntaxTree/Assign.html","","<p>Assign represents assigning something to a variable or constant. Generally, the left side of the assignment …\n"],["SyntaxTree::AssignFormatting","","SyntaxTree/AssignFormatting.html","","<p>Determins if the following value should be indented or not.\n"],["SyntaxTree::Assoc","","SyntaxTree/Assoc.html","","<p>Assoc represents a key-value pair within a hash. It is a child node of either an AssocListFromArgs or …\n"],["SyntaxTree::AssocSplat","","SyntaxTree/AssocSplat.html","","<p>AssocSplat represents double-splatting a value into a hash (either a hash literal or a bare hash in a …\n"],["SyntaxTree::BEGINBlock","","SyntaxTree/BEGINBlock.html","","<p>BEGINBlock represents the use of the <code>BEGIN</code> keyword, which hooks into the lifecycle of the interpreter. …\n"],["SyntaxTree::Backref","","SyntaxTree/Backref.html","","<p>Backref represents a global variable referencing a matched value. It comes in the form of a $ followed …\n"],["SyntaxTree::Backtick","","SyntaxTree/Backtick.html","","<p>Backtick represents the use of the ‘ operator. It’s usually found being used for an XStringLiteral …\n"],["SyntaxTree::BareAssocHash","","SyntaxTree/BareAssocHash.html","","<p>BareAssocHash represents a hash of contents being passed as a method argument (and therefore has omitted …\n"],["SyntaxTree::BasicVisitor","","SyntaxTree/BasicVisitor.html","","<p>BasicVisitor is the parent class of the Visitor class that provides the ability to walk down the tree. …\n"],["SyntaxTree::BasicVisitor::VisitMethodChecker","","SyntaxTree/BasicVisitor/VisitMethodChecker.html","","<p>This class is used by DidYouMean to offer corrections to invalid visit method names.\n"],["SyntaxTree::BasicVisitor::VisitMethodError","","SyntaxTree/BasicVisitor/VisitMethodError.html","","<p>This is raised when you use the Visitor.visit_method method and it fails. It is correctable to through …\n"],["SyntaxTree::Begin","","SyntaxTree/Begin.html","","<p>Begin represents a begin..end chain.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">begin</span>\n  <span class=\"ruby-identifier\">value</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::Binary","","SyntaxTree/Binary.html","","<p>Binary represents any expression that involves two sub-expressions with an operator in between. This …\n"],["SyntaxTree::BlockArg","","SyntaxTree/BlockArg.html","","<p>BlockArg represents declaring a block parameter on a method definition.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">method</span>(<span class=\"ruby-operator\">&amp;</span><span class=\"ruby-identifier\">block</span>); <span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::BlockFormatter","","SyntaxTree/BlockFormatter.html","","<p>Responsible for formatting either a BraceBlock or a DoBlock.\n"],["SyntaxTree::BlockFormatter::BlockOpenFormatter","","SyntaxTree/BlockFormatter/BlockOpenFormatter.html","","<p>Formats the opening brace or keyword of a block.\n"],["SyntaxTree::BlockVar","","SyntaxTree/BlockVar.html","","<p>BlockVar represents the parameters being declared for a block. Effectively this node is everything contained …\n"],["SyntaxTree::BodyStmt","","SyntaxTree/BodyStmt.html","","<p>bodystmt can’t actually determine its bounds appropriately because it doesn’t necessarily know …\n"],["SyntaxTree::BraceBlock","","SyntaxTree/BraceBlock.html","","<p>BraceBlock represents passing a block to a method call using the { } operators.\n\n<pre>method { |variable| variable ...</pre>\n"],["SyntaxTree::Break","","SyntaxTree/Break.html","","<p>Break represents using the <code>break</code> keyword.\n\n<pre>break</pre>\n<p>It can also optionally accept arguments, as in:\n"],["SyntaxTree::CHAR","","SyntaxTree/CHAR.html","","<p>CHAR irepresents a single codepoint in the script encoding.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">?a</span>\n</pre>\n<p>In the example above, the CHAR node represents …\n"],["SyntaxTree::CLI","","SyntaxTree/CLI.html","","<p>Syntax Tree ships with the ‘stree` CLI, which can be used to inspect and manipulate Ruby code. This module …\n"],["SyntaxTree::CLI::AST","","SyntaxTree/CLI/AST.html","","<p>An action of the CLI that prints out the AST for the given source.\n"],["SyntaxTree::CLI::Action","","SyntaxTree/CLI/Action.html","","<p>The parent action class for the CLI that implements the basics.\n"],["SyntaxTree::CLI::Check","","SyntaxTree/CLI/Check.html","","<p>An action of the CLI that ensures that the filepath is formatted as expected.\n"],["SyntaxTree::CLI::Check::UnformattedError","","SyntaxTree/CLI/Check/UnformattedError.html","",""],["SyntaxTree::CLI::Color","","SyntaxTree/CLI/Color.html","","<p>A utility wrapper around colored strings in the output.\n"],["SyntaxTree::CLI::Debug","","SyntaxTree/CLI/Debug.html","","<p>An action of the CLI that formats the source twice to check if the first format is not idempotent.\n"],["SyntaxTree::CLI::Debug::NonIdempotentFormatError","","SyntaxTree/CLI/Debug/NonIdempotentFormatError.html","",""],["SyntaxTree::CLI::Doc","","SyntaxTree/CLI/Doc.html","","<p>An action of the CLI that prints out the doc tree IR for the given source.\n"],["SyntaxTree::CLI::Format","","SyntaxTree/CLI/Format.html","","<p>An action of the CLI that formats the input source and prints it out.\n"],["SyntaxTree::CLI::Json","","SyntaxTree/CLI/Json.html","","<p>An action of the CLI that converts the source into its equivalent JSON representation.\n"],["SyntaxTree::CLI::Match","","SyntaxTree/CLI/Match.html","","<p>An action of the CLI that outputs a pattern-matching Ruby expression that would match the input given. …\n"],["SyntaxTree::CLI::Write","","SyntaxTree/CLI/Write.html","","<p>An action of the CLI that formats the input source and writes the formatted output back to the file. …\n"],["SyntaxTree::CVar","","SyntaxTree/CVar.html","","<p>CVar represents the use of a class variable.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">@@variable</span>\n</pre>\n"],["SyntaxTree::Call","","SyntaxTree/Call.html","","<p>Call represents a method call.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">receiver</span>.<span class=\"ruby-identifier\">message</span>\n</pre>\n"],["SyntaxTree::CallChainFormatter","","SyntaxTree/CallChainFormatter.html","","<p>This is probably the most complicated formatter in this file. It’s responsible for formatting chains …\n"],["SyntaxTree::CallOperatorFormatter","","SyntaxTree/CallOperatorFormatter.html","","<p>Wraps a call operator (which can be a string literal  &mdash; or an Op node or a\n\n<p>Period node) and formats it when …\n"],["SyntaxTree::Case","","SyntaxTree/Case.html","","<p>Case represents the beginning of a case chain.\n\n<pre>case value\nwhen 1\n  &quot;one&quot;\nwhen 2\n  &quot;two&quot;\nelse\n  &quot;number&quot; ...</pre>\n"],["SyntaxTree::ClassDeclaration","","SyntaxTree/ClassDeclaration.html","","<p>Class represents defining a class using the <code>class</code> keyword.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Container</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n<p>Classes can have path names …\n"],["SyntaxTree::Comma","","SyntaxTree/Comma.html","","<p>Comma represents the use of the , operator.\n"],["SyntaxTree::Command","","SyntaxTree/Command.html","","<p>Command represents a method call with arguments and no parentheses. Note that Command nodes only happen …\n"],["SyntaxTree::CommandCall","","SyntaxTree/CommandCall.html","","<p>CommandCall represents a method call on an object with arguments and no parentheses.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">object</span>.<span class=\"ruby-identifier\">method</span> <span class=\"ruby-identifier\">argument</span>\n</pre>\n"],["SyntaxTree::Comment","","SyntaxTree/Comment.html","","<p>Comment represents a comment in the source.\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># comment</span>\n</pre>\n"],["SyntaxTree::ConditionalFormatter","","SyntaxTree/ConditionalFormatter.html","","<p>Formats an If or Unless node.\n"],["SyntaxTree::ConditionalModFormatter","","SyntaxTree/ConditionalModFormatter.html","","<p>Formats an IfMod or UnlessMod node.\n"],["SyntaxTree::Const","","SyntaxTree/Const.html","","<p>Const represents a literal value that <em>looks</em> like a constant. This could actually be a reference to a …\n"],["SyntaxTree::ConstPathField","","SyntaxTree/ConstPathField.html","","<p>ConstPathField represents the child node of some kind of assignment. It represents when you’re assigning …\n"],["SyntaxTree::ConstPathRef","","SyntaxTree/ConstPathRef.html","","<p>ConstPathRef represents referencing a constant by a path.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">object</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Const</span>\n</pre>\n"],["SyntaxTree::ConstRef","","SyntaxTree/ConstRef.html","","<p>ConstRef represents the name of the constant being used in a class or module declaration.\n\n<pre>class Container ...</pre>\n"],["SyntaxTree::ContainsAssignment","","SyntaxTree/ContainsAssignment.html","","<p>If the predicate of a conditional or loop contains an assignment (in which case we can’t know for …\n"],["SyntaxTree::Def","","SyntaxTree/Def.html","","<p>Def represents defining a regular method on the current self object.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">method</span>(<span class=\"ruby-identifier\">param</span>) <span class=\"ruby-identifier\">result</span> <span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::DefEndless","","SyntaxTree/DefEndless.html","","<p>DefEndless represents defining a single-line method since Ruby 3.0+.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">method</span> = <span class=\"ruby-identifier\">result</span>\n</pre>\n"],["SyntaxTree::Defined","","SyntaxTree/Defined.html","","<p>Defined represents the use of the <code>defined?</code> operator. It can be used with and without parentheses.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">defined?</span>(<span class=\"ruby-identifier\">variable</span>)\n</pre>\n"],["SyntaxTree::Defs","","SyntaxTree/Defs.html","","<p>Defs represents defining a singleton method on an object.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">object</span>.<span class=\"ruby-identifier\">method</span>(<span class=\"ruby-identifier\">param</span>) <span class=\"ruby-identifier\">result</span> <span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::DoBlock","","SyntaxTree/DoBlock.html","","<p>DoBlock represents passing a block to a method call using the <code>do</code> and <code>end</code> keywords.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">method</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">value</span><span class=\"ruby-operator\">|</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::Dot2","","SyntaxTree/Dot2.html","","<p>Dot2 represents using the .. operator between two expressions. Usually this is to create a range object. …\n"],["SyntaxTree::Dot3","","SyntaxTree/Dot3.html","","<p>Dot3 represents using the … operator between two expressions. Usually this is to create a range object. …\n"],["SyntaxTree::DotFormatter","","SyntaxTree/DotFormatter.html","","<p>Responsible for formatting Dot2 and Dot3 nodes.\n"],["SyntaxTree::DynaSymbol","","SyntaxTree/DynaSymbol.html","","<p>DynaSymbol represents a symbol literal that uses quotes to dynamically define its value.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:&quot;#{variable}&quot;</span>\n</pre>\n"],["SyntaxTree::ENDBlock","","SyntaxTree/ENDBlock.html","","<p>ENDBlock represents the use of the <code>END</code> keyword, which hooks into the lifecycle of the interpreter. Whatever …\n"],["SyntaxTree::Else","","SyntaxTree/Else.html","","<p>Else represents the end of an <code>if</code>, <code>unless</code>, or <code>case</code> chain.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">if</span> <span class=\"ruby-identifier\">variable</span>\n<span class=\"ruby-keyword\">else</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::Elsif","","SyntaxTree/Elsif.html","","<p>Elsif represents another clause in an <code>if</code> or <code>unless</code> chain.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">if</span> <span class=\"ruby-identifier\">variable</span>\n<span class=\"ruby-keyword\">elsif</span> <span class=\"ruby-identifier\">other_variable</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::EmbDoc","","SyntaxTree/EmbDoc.html","","<p>EmbDoc represents a multi-line comment.\n\n<pre class=\"ruby\"><span class=\"ruby-comment\">=begin\nfirst line\nsecond line\n=end</span>\n</pre>\n"],["SyntaxTree::EmbExprBeg","","SyntaxTree/EmbExprBeg.html","","<p>EmbExprBeg represents the beginning token for using interpolation inside of a parent node that accepts …\n"],["SyntaxTree::EmbExprEnd","","SyntaxTree/EmbExprEnd.html","","<p>EmbExprEnd represents the ending token for using interpolation inside of a parent node that accepts string …\n"],["SyntaxTree::EmbVar","","SyntaxTree/EmbVar.html","","<p>EmbVar represents the use of shorthand interpolation for an instance, class, or global variable into …\n"],["SyntaxTree::EndContent","","SyntaxTree/EndContent.html","","<p>EndContent represents the use of __END__ syntax, which allows individual scripts to keep content after …\n"],["SyntaxTree::Ensure","","SyntaxTree/Ensure.html","","<p>Ensure represents the use of the <code>ensure</code> keyword and its subsequent statements.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">begin</span>\n<span class=\"ruby-keyword\">ensure</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::ExcessedComma","","SyntaxTree/ExcessedComma.html","","<p>ExcessedComma represents a trailing comma in a list of block parameters. It changes the block parameters …\n"],["SyntaxTree::FCall","","SyntaxTree/FCall.html","","<p>FCall represents the piece of a method call that comes before any arguments (i.e., just the name of the …\n"],["SyntaxTree::Field","","SyntaxTree/Field.html","","<p>Field is always the child of an assignment. It represents assigning to a “field” on an object.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">object</span>.<span class=\"ruby-identifier\">variable</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["SyntaxTree::FloatLiteral","","SyntaxTree/FloatLiteral.html","","<p>FloatLiteral represents a floating point number literal.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1.0</span>\n</pre>\n"],["SyntaxTree::FlowControlFormatter","","SyntaxTree/FlowControlFormatter.html","","<p>Formats either a Break, Next, or Return node.\n"],["SyntaxTree::FndPtn","","SyntaxTree/FndPtn.html","","<p>FndPtn represents matching against a pattern where you find a pattern in an array using the Ruby 3.0 …\n"],["SyntaxTree::For","","SyntaxTree/For.html","","<p>For represents using a <code>for</code> loop.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">for</span> <span class=\"ruby-identifier\">value</span> <span class=\"ruby-keyword\">in</span> <span class=\"ruby-identifier\">list</span> <span class=\"ruby-keyword\">do</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::Formatter","","SyntaxTree/Formatter.html","","<p>A slightly enhanced PP that knows how to format recursively including comments.\n"],["SyntaxTree::GVar","","SyntaxTree/GVar.html","","<p>GVar represents a global variable literal.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">$variable</span>\n</pre>\n"],["SyntaxTree::HashKeyFormatter","","SyntaxTree/HashKeyFormatter.html","","<p>This module is responsible for formatting the assocs contained within a hash or bare hash. It first determines …\n"],["SyntaxTree::HashKeyFormatter::Labels","","SyntaxTree/HashKeyFormatter/Labels.html","","<p>Formats the keys of a hash literal using labels.\n"],["SyntaxTree::HashKeyFormatter::Rockets","","SyntaxTree/HashKeyFormatter/Rockets.html","","<p>Formats the keys of a hash literal using hash rockets.\n"],["SyntaxTree::HashLiteral","","SyntaxTree/HashLiteral.html","","<p>HashLiteral represents a hash literal.\n\n<pre class=\"ruby\">{ <span class=\"ruby-identifier\">key</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-identifier\">value</span> }\n</pre>\n"],["SyntaxTree::HashLiteral::EmptyWithCommentsFormatter","","SyntaxTree/HashLiteral/EmptyWithCommentsFormatter.html","","<p>This is a special formatter used if the hash literal contains no values but <em>does</em> contain comments. In …\n"],["SyntaxTree::Heredoc","","SyntaxTree/Heredoc.html","","<p>Heredoc represents a heredoc string literal.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">&lt;&lt;~DOC</span>\n<span class=\"ruby-value\">  contents\n</span><span class=\"ruby-identifier\">DOC</span>\n</pre>\n"],["SyntaxTree::HeredocBeg","","SyntaxTree/HeredocBeg.html","","<p>HeredocBeg represents the beginning declaration of a heredoc.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">&lt;&lt;~DOC</span>\n<span class=\"ruby-value\">  contents\n</span><span class=\"ruby-identifier\">DOC</span>\n</pre>\n<p>In the example above …\n"],["SyntaxTree::HshPtn","","SyntaxTree/HshPtn.html","","<p>HshPtn represents matching against a hash pattern using the Ruby 2.7+ pattern matching syntax.\n\n<pre>case value ...</pre>\n"],["SyntaxTree::HshPtn::KeywordFormatter","","SyntaxTree/HshPtn/KeywordFormatter.html","","<p>Formats a key-value pair in a hash pattern. The value is optional.\n"],["SyntaxTree::HshPtn::KeywordRestFormatter","","SyntaxTree/HshPtn/KeywordRestFormatter.html","","<p>Formats the optional double-splat from the pattern.\n"],["SyntaxTree::IVar","","SyntaxTree/IVar.html","","<p>IVar represents an instance variable literal.\n\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@variable</span>\n</pre>\n"],["SyntaxTree::Ident","","SyntaxTree/Ident.html","","<p>Ident represents an identifier anywhere in code. It can represent a very large number of things, depending …\n"],["SyntaxTree::If","","SyntaxTree/If.html","","<p>If represents the first clause in an <code>if</code> chain.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">if</span> <span class=\"ruby-identifier\">predicate</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::IfMod","","SyntaxTree/IfMod.html","","<p>IfMod represents the modifier form of an <code>if</code> statement.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">expression</span> <span class=\"ruby-keyword\">if</span> <span class=\"ruby-identifier\">predicate</span>\n</pre>\n"],["SyntaxTree::IfOp","","SyntaxTree/IfOp.html","","<p>IfOp represents a ternary clause.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">predicate</span> <span class=\"ruby-operator\">?</span> <span class=\"ruby-identifier\">truthy</span> <span class=\"ruby-operator\">:</span> <span class=\"ruby-identifier\">falsy</span>\n</pre>\n"],["SyntaxTree::Imaginary","","SyntaxTree/Imaginary.html","","<p>Imaginary represents an imaginary number literal.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1i</span>\n</pre>\n"],["SyntaxTree::In","","SyntaxTree/In.html","","<p>In represents using the <code>in</code> keyword within the Ruby 2.7+ pattern matching syntax.\n\n<pre>case value\nin pattern ...</pre>\n"],["SyntaxTree::Int","","SyntaxTree/Int.html","","<p>Int represents an integer number literal.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>\n</pre>\n"],["SyntaxTree::Kw","","SyntaxTree/Kw.html","","<p>Kw represents the use of a keyword. It can be almost anywhere in the syntax tree, so you end up seeing …\n"],["SyntaxTree::KwRestParam","","SyntaxTree/KwRestParam.html","","<p>KwRestParam represents defining a parameter in a method definition that accepts all remaining keyword …\n"],["SyntaxTree::LBrace","","SyntaxTree/LBrace.html","","<p>LBrace represents the use of a left brace, i.e., {.\n"],["SyntaxTree::LBracket","","SyntaxTree/LBracket.html","","<p>LBracket represents the use of a left bracket, i.e., [.\n"],["SyntaxTree::LParen","","SyntaxTree/LParen.html","","<p>LParen represents the use of a left parenthesis, i.e., (.\n"],["SyntaxTree::Label","","SyntaxTree/Label.html","","<p>Label represents the use of an identifier to associate with an object. You can find it in a hash key, …\n"],["SyntaxTree::LabelEnd","","SyntaxTree/LabelEnd.html","","<p>LabelEnd represents the end of a dynamic symbol.\n\n<pre class=\"ruby\">{ <span class=\"ruby-value\">&quot;key&quot;:</span> <span class=\"ruby-identifier\">value</span> }\n</pre>\n<p>In the example above, LabelEnd represents …\n"],["SyntaxTree::Lambda","","SyntaxTree/Lambda.html","","<p>Lambda represents using a lambda literal (not the lambda method call).\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">-&gt;</span>(<span class=\"ruby-identifier\">value</span>) { <span class=\"ruby-identifier\">value</span> <span class=\"ruby-operator\">*</span> <span class=\"ruby-value\">2</span> }\n</pre>\n"],["SyntaxTree::LambdaVar","","SyntaxTree/LambdaVar.html","","<p>LambdaVar represents the parameters being declared for a lambda. Effectively this node is everything …\n"],["SyntaxTree::LanguageServer","","SyntaxTree/LanguageServer.html","","<p>Syntax Tree additionally ships with a language server conforming to the language server protocol. It …\n"],["SyntaxTree::LanguageServer::InlayHints","","SyntaxTree/LanguageServer/InlayHints.html","","<p>This class provides inlay hints for the language server. It is loosely designed around the LSP spec, …\n"],["SyntaxTree::Location","","SyntaxTree/Location.html","","<p>Represents the location of a node in the tree from the source code.\n"],["SyntaxTree::LoopFormatter","","SyntaxTree/LoopFormatter.html","","<p>Formats an Until, UntilMod, While, or WhileMod node.\n"],["SyntaxTree::MAssign","","SyntaxTree/MAssign.html","","<p>MAssign is a parent node of any kind of multiple assignment. This includes splitting out variables on …\n"],["SyntaxTree::MLHS","","SyntaxTree/MLHS.html","","<p>MLHS represents a list of values being destructured on the left-hand side of a multiple assignment.\n\n<pre>first, ...</pre>\n"],["SyntaxTree::MLHSParen","","SyntaxTree/MLHSParen.html","","<p>MLHSParen represents parentheses being used to destruct values in a multiple assignment on the left hand …\n"],["SyntaxTree::MRHS","","SyntaxTree/MRHS.html","","<p>MRHS represents the values that are being assigned on the right-hand side of a multiple assignment.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">values</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["SyntaxTree::MethodAddBlock","","SyntaxTree/MethodAddBlock.html","","<p>MethodAddBlock represents a method call with a block argument.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">method</span> {}\n</pre>\n"],["SyntaxTree::ModuleDeclaration","","SyntaxTree/ModuleDeclaration.html","","<p>ModuleDeclaration represents defining a module using the <code>module</code> keyword.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">Namespace</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::Next","","SyntaxTree/Next.html","","<p>Next represents using the <code>next</code> keyword.\n\n<pre>next</pre>\n<p>The <code>next</code> keyword can also optionally be called with an argument: …\n"],["SyntaxTree::Node","","SyntaxTree/Node.html","","<p>This is the parent node of all of the syntax tree nodes. It’s pretty much exclusively here to make …\n"],["SyntaxTree::Not","","SyntaxTree/Not.html","","<p>Not represents the unary <code>not</code> method being called on an expression.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">not</span> <span class=\"ruby-identifier\">value</span>\n</pre>\n"],["SyntaxTree::Op","","SyntaxTree/Op.html","","<p>Op represents an operator literal in the source.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">2</span>\n</pre>\n<p>In the example above, the Op node represents the …\n"],["SyntaxTree::OpAssign","","SyntaxTree/OpAssign.html","","<p>OpAssign represents assigning a value to a variable or constant using an operator like += or ||=.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">variable</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["SyntaxTree::Params","","SyntaxTree/Params.html","","<p>Params represents defining parameters on a method or lambda.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier ruby-title\">method</span>(<span class=\"ruby-identifier\">param</span>) <span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::Params::KeywordFormatter","","SyntaxTree/Params/KeywordFormatter.html","","<p>Formats the keyword position of the parameters. This includes the label, as well as an optional default …\n"],["SyntaxTree::Params::KeywordRestFormatter","","SyntaxTree/Params/KeywordRestFormatter.html","","<p>Formats the keyword_rest position of the parameters. This can be the **nil syntax, the … syntax, or …\n"],["SyntaxTree::Params::OptionalFormatter","","SyntaxTree/Params/OptionalFormatter.html","","<p>Formats the optional position of the parameters. This includes the label, as well as the default value. …\n"],["SyntaxTree::Paren","","SyntaxTree/Paren.html","","<p>Paren represents using balanced parentheses in a couple places in a Ruby program. In general parentheses …\n"],["SyntaxTree::Parentheses","","SyntaxTree/Parentheses.html","","<p>If you have a modifier statement (for instance a modifier if statement or a modifier while loop) there …\n"],["SyntaxTree::Parser","","SyntaxTree/Parser.html","","<p>Parser is a subclass of the Ripper library that subscribes to the stream of tokens and nodes coming from …\n"],["SyntaxTree::Parser::MultiByteString","","SyntaxTree/Parser/MultiByteString.html","","<p>Represents a line in the source. If this class is being used, it means that there are characters in the …\n"],["SyntaxTree::Parser::ParseError","","SyntaxTree/Parser/ParseError.html","","<p>A special parser error so that we can get nice syntax displays on the error message when prettier prints …\n"],["SyntaxTree::Parser::SingleByteString","","SyntaxTree/Parser/SingleByteString.html","","<p>Represents a line in the source. If this class is being used, it means that every character in the string …\n"],["SyntaxTree::Period","","SyntaxTree/Period.html","","<p>Period represents the use of the <code>.</code> operator. It is usually found in method calls.\n"],["SyntaxTree::PinnedBegin","","SyntaxTree/PinnedBegin.html","","<p>PinnedBegin represents a pinning a nested statement within pattern matching.\n\n<pre>case value\nin ^(statement) ...</pre>\n"],["SyntaxTree::PinnedVarRef","","SyntaxTree/PinnedVarRef.html","","<p>PinnedVarRef represents a pinned variable reference within a pattern matching pattern.\n\n<pre>case value\nin ^variable ...</pre>\n"],["SyntaxTree::Program","","SyntaxTree/Program.html","","<p>Program represents the overall syntax tree.\n"],["SyntaxTree::QSymbols","","SyntaxTree/QSymbols.html","","<p>QSymbols represents a symbol literal array without interpolation.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%i[one two three]</span>\n</pre>\n"],["SyntaxTree::QSymbolsBeg","","SyntaxTree/QSymbolsBeg.html","","<p>QSymbolsBeg represents the beginning of a symbol literal array.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%i[one two three]</span>\n</pre>\n<p>In the snippet above, …\n"],["SyntaxTree::QWords","","SyntaxTree/QWords.html","","<p>QWords represents a string literal array without interpolation.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w[one two three]</span>\n</pre>\n"],["SyntaxTree::QWordsBeg","","SyntaxTree/QWordsBeg.html","","<p>QWordsBeg represents the beginning of a string literal array.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w[one two three]</span>\n</pre>\n<p>In the snippet above,  …\n"],["SyntaxTree::Quotes","","SyntaxTree/Quotes.html","","<p>Responsible for providing information about quotes to be used for strings and dynamic symbols.\n"],["SyntaxTree::RAssign","","SyntaxTree/RAssign.html","","<p>RAssign represents a single-line pattern match.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">value</span> <span class=\"ruby-keyword\">in</span> <span class=\"ruby-identifier\">pattern</span>\n<span class=\"ruby-identifier\">value</span> <span class=\"ruby-operator\">=&gt;</span> <span class=\"ruby-identifier\">pattern</span>\n</pre>\n"],["SyntaxTree::RBrace","","SyntaxTree/RBrace.html","","<p>RBrace represents the use of a right brace, i.e., +++.\n"],["SyntaxTree::RBracket","","SyntaxTree/RBracket.html","","<p>RBracket represents the use of a right bracket, i.e., <code>]</code>.\n"],["SyntaxTree::RParen","","SyntaxTree/RParen.html","","<p>RParen represents the use of a right parenthesis, i.e., +)+.\n"],["SyntaxTree::Rake","","SyntaxTree/Rake.html","",""],["SyntaxTree::Rake::CheckTask","","SyntaxTree/Rake/CheckTask.html","","<p>A Rake task that runs check on a set of source files.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;syntax_tree/rake/check_task&#39;</span>\n\n<span class=\"ruby-constant\">SyntaxTree</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Rake</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">CheckTask</span>.<span class=\"ruby-identifier\">new</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["SyntaxTree::Rake::WriteTask","","SyntaxTree/Rake/WriteTask.html","","<p>A Rake task that runs format on a set of source files.\n<p>Example:\n\n<pre>require &#39;syntax_tree/rake/write_task&#39;\n ...</pre>\n"],["SyntaxTree::RationalLiteral","","SyntaxTree/RationalLiteral.html","","<p>RationalLiteral represents the use of a rational number literal.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1r</span>\n</pre>\n"],["SyntaxTree::Redo","","SyntaxTree/Redo.html","","<p>Redo represents the use of the <code>redo</code> keyword.\n\n<pre>redo</pre>\n"],["SyntaxTree::RegexpBeg","","SyntaxTree/RegexpBeg.html","","<p>RegexpBeg represents the start of a regular expression literal.\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/.+/</span>\n</pre>\n<p>In the example above, RegexpBeg represents …\n"],["SyntaxTree::RegexpContent","","SyntaxTree/RegexpContent.html","","<p>RegexpContent represents the body of a regular expression.\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/.+ #{pattern} .+/</span>\n</pre>\n<p>In the example above, a  …\n"],["SyntaxTree::RegexpEnd","","SyntaxTree/RegexpEnd.html","","<p>RegexpEnd represents the end of a regular expression literal.\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/.+/m</span>\n</pre>\n<p>In the example above, the RegexpEnd …\n"],["SyntaxTree::RegexpLiteral","","SyntaxTree/RegexpLiteral.html","","<p>RegexpLiteral represents a regular expression literal.\n\n<pre class=\"ruby\"><span class=\"ruby-regexp\">/.+/</span>\n</pre>\n"],["SyntaxTree::Rescue","","SyntaxTree/Rescue.html","","<p>Rescue represents the use of the rescue keyword inside of a BodyStmt node.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">begin</span>\n<span class=\"ruby-keyword\">rescue</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::RescueEx","","SyntaxTree/RescueEx.html","","<p>RescueEx represents the list of exceptions being rescued in a rescue clause.\n\n<pre>begin\nrescue Exception =&gt; ...</pre>\n"],["SyntaxTree::RescueMod","","SyntaxTree/RescueMod.html","","<p>RescueMod represents the use of the modifier form of a <code>rescue</code> clause.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">expression</span> <span class=\"ruby-keyword\">rescue</span> <span class=\"ruby-identifier\">value</span>\n</pre>\n"],["SyntaxTree::RestParam","","SyntaxTree/RestParam.html","","<p>RestParam represents defining a parameter in a method definition that accepts all remaining positional …\n"],["SyntaxTree::Retry","","SyntaxTree/Retry.html","","<p>Retry represents the use of the <code>retry</code> keyword.\n\n<pre>retry</pre>\n"],["SyntaxTree::Return","","SyntaxTree/Return.html","","<p>Return represents using the <code>return</code> keyword with arguments.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">return</span> <span class=\"ruby-identifier\">value</span>\n</pre>\n"],["SyntaxTree::Return0","","SyntaxTree/Return0.html","","<p>Return0 represents the bare <code>return</code> keyword with no arguments.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">return</span>\n</pre>\n"],["SyntaxTree::SClass","","SyntaxTree/SClass.html","","<p>SClass represents a block of statements that should be evaluated within the context of the singleton …\n"],["SyntaxTree::Statements","","SyntaxTree/Statements.html","","<p>Everything that has a block of code inside of it has a list of statements. Normally we would just track …\n"],["SyntaxTree::StringConcat","","SyntaxTree/StringConcat.html","","<p>StringConcat represents concatenating two strings together using a backward slash.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;first&quot;</span> \\\n  <span class=\"ruby-string\">&quot;second&quot;</span>\n</pre>\n"],["SyntaxTree::StringContent","","SyntaxTree/StringContent.html","","<p>StringContent represents the contents of a string-like value.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;string&quot;</span>\n</pre>\n"],["SyntaxTree::StringDVar","","SyntaxTree/StringDVar.html","","<p>StringDVar represents shorthand interpolation of a variable into a string. It allows you to take an instance …\n"],["SyntaxTree::StringEmbExpr","","SyntaxTree/StringEmbExpr.html","","<p>StringEmbExpr represents interpolated content. It can be contained within a couple of different parent …\n"],["SyntaxTree::StringLiteral","","SyntaxTree/StringLiteral.html","","<p>StringLiteral represents a string literal.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;string&quot;</span>\n</pre>\n"],["SyntaxTree::Super","","SyntaxTree/Super.html","","<p>Super represents using the <code>super</code> keyword with arguments. It can optionally use parentheses.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">super</span>(<span class=\"ruby-identifier\">value</span>)\n</pre>\n"],["SyntaxTree::SymBeg","","SyntaxTree/SymBeg.html","","<p>SymBeg represents the beginning of a symbol literal.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:symbol</span>\n</pre>\n<p>SymBeg is also used for dynamic symbols, as …\n"],["SyntaxTree::SymbolContent","","SyntaxTree/SymbolContent.html","","<p>SymbolContent represents symbol contents and is always the child of a SymbolLiteral node.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">:symbol</span>\n</pre>\n"],["SyntaxTree::SymbolLiteral","","SyntaxTree/SymbolLiteral.html","","<p>SymbolLiteral represents a symbol in the system with no interpolation (as opposed to a DynaSymbol which …\n"],["SyntaxTree::Symbols","","SyntaxTree/Symbols.html","","<p>Symbols represents a symbol array literal with interpolation.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%I[one two three]</span>\n</pre>\n"],["SyntaxTree::SymbolsBeg","","SyntaxTree/SymbolsBeg.html","","<p>SymbolsBeg represents the start of a symbol array literal with interpolation.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%I[one two three]</span>\n</pre>\n<p>In the …\n"],["SyntaxTree::TLamBeg","","SyntaxTree/TLamBeg.html","","<p>TLamBeg represents the beginning of the body of a lambda literal using braces.\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">-&gt;</span> { <span class=\"ruby-identifier\">value</span> }\n</pre>\n<p>In the example …\n"],["SyntaxTree::TLambda","","SyntaxTree/TLambda.html","","<p>TLambda represents the beginning of a lambda literal.\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">-&gt;</span> { <span class=\"ruby-identifier\">value</span> }\n</pre>\n<p>In the example above the TLambda represents …\n"],["SyntaxTree::TStringBeg","","SyntaxTree/TStringBeg.html","","<p>TStringBeg represents the beginning of a string literal.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;string&quot;</span>\n</pre>\n<p>In the example above, TStringBeg represents …\n"],["SyntaxTree::TStringContent","","SyntaxTree/TStringContent.html","","<p>TStringContent represents plain characters inside of an entity that accepts string content like a string, …\n"],["SyntaxTree::TStringEnd","","SyntaxTree/TStringEnd.html","","<p>TStringEnd represents the end of a string literal.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;string&quot;</span>\n</pre>\n<p>In the example above, TStringEnd represents …\n"],["SyntaxTree::Ternaryable","","SyntaxTree/Ternaryable.html","","<p>In order for an ‘if` or `unless` expression to be shortened to a ternary, there has to be one and only …\n"],["SyntaxTree::TopConstField","","SyntaxTree/TopConstField.html","","<p>TopConstField is always the child node of some kind of assignment. It represents when you’re assigning …\n"],["SyntaxTree::TopConstRef","","SyntaxTree/TopConstRef.html","","<p>TopConstRef is very similar to TopConstField except that it is not involved in an assignment.\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Constant</span>\n</pre>\n"],["SyntaxTree::Unary","","SyntaxTree/Unary.html","","<p>Unary represents a unary method being called on an expression, as in +!+ or +~+.\n\n<pre class=\"ruby\"><span class=\"ruby-operator\">!</span><span class=\"ruby-identifier\">value</span>\n</pre>\n"],["SyntaxTree::Undef","","SyntaxTree/Undef.html","","<p>Undef represents the use of the <code>undef</code> keyword.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">undef</span> <span class=\"ruby-identifier\">method</span>\n</pre>\n"],["SyntaxTree::Undef::UndefArgumentFormatter","","SyntaxTree/Undef/UndefArgumentFormatter.html","","<p>Undef accepts a variable number of arguments that can be either DynaSymbol or SymbolLiteral objects. …\n"],["SyntaxTree::Unless","","SyntaxTree/Unless.html","","<p>Unless represents the first clause in an <code>unless</code> chain.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">unless</span> <span class=\"ruby-identifier\">predicate</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::UnlessMod","","SyntaxTree/UnlessMod.html","","<p>UnlessMod represents the modifier form of an <code>unless</code> statement.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">expression</span> <span class=\"ruby-keyword\">unless</span> <span class=\"ruby-identifier\">predicate</span>\n</pre>\n"],["SyntaxTree::Until","","SyntaxTree/Until.html","","<p>Until represents an <code>until</code> loop.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">until</span> <span class=\"ruby-identifier\">predicate</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::UntilMod","","SyntaxTree/UntilMod.html","","<p>UntilMod represents the modifier form of a <code>until</code> loop.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">expression</span> <span class=\"ruby-keyword\">until</span> <span class=\"ruby-identifier\">predicate</span>\n</pre>\n"],["SyntaxTree::VCall","","SyntaxTree/VCall.html","","<p>VCall represent any plain named object with Ruby that could be either a local variable or a method call. …\n"],["SyntaxTree::VarAlias","","SyntaxTree/VarAlias.html","","<p>VarAlias represents when you’re using the <code>alias</code> keyword with global variable arguments.\n\n<pre>alias $new ...</pre>\n"],["SyntaxTree::VarField","","SyntaxTree/VarField.html","","<p>VarField represents a variable that is being assigned a value. As such, it is always a child of an assignment …\n"],["SyntaxTree::VarRef","","SyntaxTree/VarRef.html","","<p>VarRef represents a variable reference.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">true</span>\n</pre>\n<p>This can be a plain local variable like the example above. …\n"],["SyntaxTree::Visitor","","SyntaxTree/Visitor.html","","<p>Visitor is a parent class that provides the ability to walk down the tree and handle a subset of nodes. …\n"],["SyntaxTree::Visitor::FieldVisitor","","SyntaxTree/Visitor/FieldVisitor.html","","<p>This is the parent class of a lot of built-in visitors for Syntax Tree. It reflects visiting each of …\n"],["SyntaxTree::Visitor::JSONVisitor","","SyntaxTree/Visitor/JSONVisitor.html","","<p>This visitor transforms the AST into a hash that contains only primitives that can be easily serialized …\n"],["SyntaxTree::Visitor::MatchVisitor","","SyntaxTree/Visitor/MatchVisitor.html","","<p>This visitor transforms the AST into a Ruby pattern matching expression that would match correctly against …\n"],["SyntaxTree::Visitor::PrettyPrintVisitor","","SyntaxTree/Visitor/PrettyPrintVisitor.html","","<p>This visitor pretty-prints the AST into an equivalent s-expression.\n"],["SyntaxTree::VoidStmt","","SyntaxTree/VoidStmt.html","","<p>VoidStmt represents an empty lexical block of code.\n\n<pre class=\"ruby\">;;\n</pre>\n"],["SyntaxTree::When","","SyntaxTree/When.html","","<p>When represents a <code>when</code> clause in a <code>case</code> chain.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">case</span> <span class=\"ruby-identifier\">value</span>\n<span class=\"ruby-keyword\">when</span> <span class=\"ruby-identifier\">predicate</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::While","","SyntaxTree/While.html","","<p>While represents a <code>while</code> loop.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">while</span> <span class=\"ruby-identifier\">predicate</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n"],["SyntaxTree::WhileMod","","SyntaxTree/WhileMod.html","","<p>WhileMod represents the modifier form of a <code>while</code> loop.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">expression</span> <span class=\"ruby-keyword\">while</span> <span class=\"ruby-identifier\">predicate</span>\n</pre>\n"],["SyntaxTree::Word","","SyntaxTree/Word.html","","<p>Word represents an element within a special array literal that accepts interpolation.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%W[a#{b}c xyz]</span>\n</pre>\n<p>In …\n"],["SyntaxTree::Words","","SyntaxTree/Words.html","","<p>Words represents a string literal array with interpolation.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%W[one two three]</span>\n</pre>\n"],["SyntaxTree::WordsBeg","","SyntaxTree/WordsBeg.html","","<p>WordsBeg represents the beginning of a string literal array with interpolation.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%W[one two three]</span>\n</pre>\n<p>In the …\n"],["SyntaxTree::XString","","SyntaxTree/XString.html","","<p>XString represents the contents of an XStringLiteral.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">`ls`</span>\n</pre>\n"],["SyntaxTree::XStringLiteral","","SyntaxTree/XStringLiteral.html","","<p>XStringLiteral represents a string that gets executed.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">`ls`</span>\n</pre>\n"],["SyntaxTree::Yield","","SyntaxTree/Yield.html","","<p>Yield represents using the <code>yield</code> keyword with arguments.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">yield</span> <span class=\"ruby-identifier\">value</span>\n</pre>\n"],["SyntaxTree::Yield0","","SyntaxTree/Yield0.html","","<p>Yield0 represents the bare <code>yield</code> keyword with no arguments.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">yield</span>\n</pre>\n"],["SyntaxTree::ZSuper","","SyntaxTree/ZSuper.html","","<p>ZSuper represents the bare <code>super</code> keyword with no arguments.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">super</span>\n</pre>\n"],["==","SyntaxTree::Location","SyntaxTree/Location.html#method-i-3D-3D","(other)",""],["[]","SyntaxTree::Parser::MultiByteString","SyntaxTree/Parser/MultiByteString.html#method-i-5B-5D","(byteindex)","<p>Technically it’s possible for the column index to be a negative value if there’s a BOM at the …\n"],["[]","SyntaxTree::Parser::SingleByteString","SyntaxTree/Parser/SingleByteString.html#method-i-5B-5D","(byteindex)",""],["accept","SyntaxTree::ARef","SyntaxTree/ARef.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ARefField","SyntaxTree/ARefField.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Alias","SyntaxTree/Alias.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ArgBlock","SyntaxTree/ArgBlock.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ArgParen","SyntaxTree/ArgParen.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ArgStar","SyntaxTree/ArgStar.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Args","SyntaxTree/Args.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ArgsForward","SyntaxTree/ArgsForward.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ArrayLiteral","SyntaxTree/ArrayLiteral.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::AryPtn","SyntaxTree/AryPtn.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Assign","SyntaxTree/Assign.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Assoc","SyntaxTree/Assoc.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::AssocSplat","SyntaxTree/AssocSplat.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::BEGINBlock","SyntaxTree/BEGINBlock.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Backref","SyntaxTree/Backref.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Backtick","SyntaxTree/Backtick.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::BareAssocHash","SyntaxTree/BareAssocHash.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Begin","SyntaxTree/Begin.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Binary","SyntaxTree/Binary.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::BlockArg","SyntaxTree/BlockArg.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::BlockVar","SyntaxTree/BlockVar.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::BodyStmt","SyntaxTree/BodyStmt.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::BraceBlock","SyntaxTree/BraceBlock.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Break","SyntaxTree/Break.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::CHAR","SyntaxTree/CHAR.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::CVar","SyntaxTree/CVar.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Call","SyntaxTree/Call.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Case","SyntaxTree/Case.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ClassDeclaration","SyntaxTree/ClassDeclaration.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Comma","SyntaxTree/Comma.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Command","SyntaxTree/Command.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::CommandCall","SyntaxTree/CommandCall.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Comment","SyntaxTree/Comment.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Const","SyntaxTree/Const.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ConstPathField","SyntaxTree/ConstPathField.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ConstPathRef","SyntaxTree/ConstPathRef.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ConstRef","SyntaxTree/ConstRef.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Def","SyntaxTree/Def.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::DefEndless","SyntaxTree/DefEndless.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Defined","SyntaxTree/Defined.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Defs","SyntaxTree/Defs.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::DoBlock","SyntaxTree/DoBlock.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Dot2","SyntaxTree/Dot2.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Dot3","SyntaxTree/Dot3.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::DynaSymbol","SyntaxTree/DynaSymbol.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ENDBlock","SyntaxTree/ENDBlock.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Else","SyntaxTree/Else.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Elsif","SyntaxTree/Elsif.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::EmbDoc","SyntaxTree/EmbDoc.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::EmbExprBeg","SyntaxTree/EmbExprBeg.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::EmbExprEnd","SyntaxTree/EmbExprEnd.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::EmbVar","SyntaxTree/EmbVar.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::EndContent","SyntaxTree/EndContent.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Ensure","SyntaxTree/Ensure.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ExcessedComma","SyntaxTree/ExcessedComma.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::FCall","SyntaxTree/FCall.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Field","SyntaxTree/Field.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::FloatLiteral","SyntaxTree/FloatLiteral.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::FndPtn","SyntaxTree/FndPtn.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::For","SyntaxTree/For.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::GVar","SyntaxTree/GVar.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::HashLiteral","SyntaxTree/HashLiteral.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Heredoc","SyntaxTree/Heredoc.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::HeredocBeg","SyntaxTree/HeredocBeg.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::HshPtn","SyntaxTree/HshPtn.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::IVar","SyntaxTree/IVar.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Ident","SyntaxTree/Ident.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::If","SyntaxTree/If.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::IfMod","SyntaxTree/IfMod.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::IfOp","SyntaxTree/IfOp.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Imaginary","SyntaxTree/Imaginary.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::In","SyntaxTree/In.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Int","SyntaxTree/Int.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Kw","SyntaxTree/Kw.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::KwRestParam","SyntaxTree/KwRestParam.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::LBrace","SyntaxTree/LBrace.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::LBracket","SyntaxTree/LBracket.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::LParen","SyntaxTree/LParen.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Label","SyntaxTree/Label.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::LabelEnd","SyntaxTree/LabelEnd.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Lambda","SyntaxTree/Lambda.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::LambdaVar","SyntaxTree/LambdaVar.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::MAssign","SyntaxTree/MAssign.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::MLHS","SyntaxTree/MLHS.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::MLHSParen","SyntaxTree/MLHSParen.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::MRHS","SyntaxTree/MRHS.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::MethodAddBlock","SyntaxTree/MethodAddBlock.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ModuleDeclaration","SyntaxTree/ModuleDeclaration.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Next","SyntaxTree/Next.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Node","SyntaxTree/Node.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Not","SyntaxTree/Not.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Op","SyntaxTree/Op.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::OpAssign","SyntaxTree/OpAssign.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Params","SyntaxTree/Params.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Paren","SyntaxTree/Paren.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Period","SyntaxTree/Period.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::PinnedBegin","SyntaxTree/PinnedBegin.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::PinnedVarRef","SyntaxTree/PinnedVarRef.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Program","SyntaxTree/Program.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::QSymbols","SyntaxTree/QSymbols.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::QSymbolsBeg","SyntaxTree/QSymbolsBeg.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::QWords","SyntaxTree/QWords.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::QWordsBeg","SyntaxTree/QWordsBeg.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::RAssign","SyntaxTree/RAssign.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::RBrace","SyntaxTree/RBrace.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::RBracket","SyntaxTree/RBracket.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::RParen","SyntaxTree/RParen.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::RationalLiteral","SyntaxTree/RationalLiteral.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Redo","SyntaxTree/Redo.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::RegexpBeg","SyntaxTree/RegexpBeg.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::RegexpContent","SyntaxTree/RegexpContent.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::RegexpEnd","SyntaxTree/RegexpEnd.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::RegexpLiteral","SyntaxTree/RegexpLiteral.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Rescue","SyntaxTree/Rescue.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::RescueEx","SyntaxTree/RescueEx.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::RescueMod","SyntaxTree/RescueMod.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::RestParam","SyntaxTree/RestParam.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Retry","SyntaxTree/Retry.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Return","SyntaxTree/Return.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Return0","SyntaxTree/Return0.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::SClass","SyntaxTree/SClass.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Statements","SyntaxTree/Statements.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::StringConcat","SyntaxTree/StringConcat.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::StringContent","SyntaxTree/StringContent.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::StringDVar","SyntaxTree/StringDVar.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::StringEmbExpr","SyntaxTree/StringEmbExpr.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::StringLiteral","SyntaxTree/StringLiteral.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Super","SyntaxTree/Super.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::SymBeg","SyntaxTree/SymBeg.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::SymbolContent","SyntaxTree/SymbolContent.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::SymbolLiteral","SyntaxTree/SymbolLiteral.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Symbols","SyntaxTree/Symbols.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::SymbolsBeg","SyntaxTree/SymbolsBeg.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::TLamBeg","SyntaxTree/TLamBeg.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::TLambda","SyntaxTree/TLambda.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::TStringBeg","SyntaxTree/TStringBeg.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::TStringContent","SyntaxTree/TStringContent.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::TStringEnd","SyntaxTree/TStringEnd.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::TopConstField","SyntaxTree/TopConstField.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::TopConstRef","SyntaxTree/TopConstRef.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Unary","SyntaxTree/Unary.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Undef","SyntaxTree/Undef.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Unless","SyntaxTree/Unless.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::UnlessMod","SyntaxTree/UnlessMod.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Until","SyntaxTree/Until.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::UntilMod","SyntaxTree/UntilMod.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::VCall","SyntaxTree/VCall.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::VarAlias","SyntaxTree/VarAlias.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::VarField","SyntaxTree/VarField.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::VarRef","SyntaxTree/VarRef.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::VoidStmt","SyntaxTree/VoidStmt.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::When","SyntaxTree/When.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::While","SyntaxTree/While.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::WhileMod","SyntaxTree/WhileMod.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Word","SyntaxTree/Word.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Words","SyntaxTree/Words.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::WordsBeg","SyntaxTree/WordsBeg.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::XString","SyntaxTree/XString.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::XStringLiteral","SyntaxTree/XStringLiteral.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Yield","SyntaxTree/Yield.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::Yield0","SyntaxTree/Yield0.html#method-i-accept","(visitor)",""],["accept","SyntaxTree::ZSuper","SyntaxTree/ZSuper.html#method-i-accept","(visitor)",""],["bind","SyntaxTree::BodyStmt","SyntaxTree/BodyStmt.html#method-i-bind","(start_char, start_column, end_char, end_column)",""],["bind","SyntaxTree::Statements","SyntaxTree/Statements.html#method-i-bind","(start_char, start_column, end_char, end_column)",""],["bind_end","SyntaxTree::Rescue","SyntaxTree/Rescue.html#method-i-bind_end","(end_char, end_column)",""],["bind_end","SyntaxTree::Statements","SyntaxTree/Statements.html#method-i-bind_end","(end_char, end_column)",""],["bold","SyntaxTree::CLI::Color","SyntaxTree/CLI/Color.html#method-c-bold","(value)",""],["break","SyntaxTree::Parentheses","SyntaxTree/Parentheses.html#method-c-break","(q)",""],["call","SyntaxTree::ContainsAssignment","SyntaxTree/ContainsAssignment.html#method-c-call","(parent)",""],["call","SyntaxTree::Ternaryable","SyntaxTree/Ternaryable.html#method-c-call","(q, node)",""],["chained?","SyntaxTree::CallChainFormatter","SyntaxTree/CallChainFormatter.html#method-c-chained-3F","(node)",""],["child_nodes","SyntaxTree::ARef","SyntaxTree/ARef.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ARefField","SyntaxTree/ARefField.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Alias","SyntaxTree/Alias.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ArgBlock","SyntaxTree/ArgBlock.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ArgParen","SyntaxTree/ArgParen.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ArgStar","SyntaxTree/ArgStar.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Args","SyntaxTree/Args.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ArgsForward","SyntaxTree/ArgsForward.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ArrayLiteral","SyntaxTree/ArrayLiteral.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::AryPtn","SyntaxTree/AryPtn.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Assign","SyntaxTree/Assign.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Assoc","SyntaxTree/Assoc.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::AssocSplat","SyntaxTree/AssocSplat.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::BEGINBlock","SyntaxTree/BEGINBlock.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Backref","SyntaxTree/Backref.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Backtick","SyntaxTree/Backtick.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::BareAssocHash","SyntaxTree/BareAssocHash.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Begin","SyntaxTree/Begin.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Binary","SyntaxTree/Binary.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::BlockArg","SyntaxTree/BlockArg.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::BlockVar","SyntaxTree/BlockVar.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::BodyStmt","SyntaxTree/BodyStmt.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::BraceBlock","SyntaxTree/BraceBlock.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Break","SyntaxTree/Break.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::CHAR","SyntaxTree/CHAR.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::CVar","SyntaxTree/CVar.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Call","SyntaxTree/Call.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Case","SyntaxTree/Case.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ClassDeclaration","SyntaxTree/ClassDeclaration.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Comma","SyntaxTree/Comma.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Command","SyntaxTree/Command.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::CommandCall","SyntaxTree/CommandCall.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Comment","SyntaxTree/Comment.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Const","SyntaxTree/Const.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ConstPathField","SyntaxTree/ConstPathField.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ConstPathRef","SyntaxTree/ConstPathRef.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ConstRef","SyntaxTree/ConstRef.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Def","SyntaxTree/Def.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::DefEndless","SyntaxTree/DefEndless.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Defined","SyntaxTree/Defined.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Defs","SyntaxTree/Defs.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::DoBlock","SyntaxTree/DoBlock.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Dot2","SyntaxTree/Dot2.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Dot3","SyntaxTree/Dot3.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::DynaSymbol","SyntaxTree/DynaSymbol.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ENDBlock","SyntaxTree/ENDBlock.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Else","SyntaxTree/Else.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Elsif","SyntaxTree/Elsif.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::EmbDoc","SyntaxTree/EmbDoc.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::EmbExprBeg","SyntaxTree/EmbExprBeg.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::EmbExprEnd","SyntaxTree/EmbExprEnd.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::EmbVar","SyntaxTree/EmbVar.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::EndContent","SyntaxTree/EndContent.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Ensure","SyntaxTree/Ensure.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ExcessedComma","SyntaxTree/ExcessedComma.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::FCall","SyntaxTree/FCall.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Field","SyntaxTree/Field.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::FloatLiteral","SyntaxTree/FloatLiteral.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::FndPtn","SyntaxTree/FndPtn.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::For","SyntaxTree/For.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::GVar","SyntaxTree/GVar.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::HashLiteral","SyntaxTree/HashLiteral.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Heredoc","SyntaxTree/Heredoc.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::HeredocBeg","SyntaxTree/HeredocBeg.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::HshPtn","SyntaxTree/HshPtn.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::IVar","SyntaxTree/IVar.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Ident","SyntaxTree/Ident.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::If","SyntaxTree/If.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::IfMod","SyntaxTree/IfMod.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::IfOp","SyntaxTree/IfOp.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Imaginary","SyntaxTree/Imaginary.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::In","SyntaxTree/In.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Int","SyntaxTree/Int.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Kw","SyntaxTree/Kw.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::KwRestParam","SyntaxTree/KwRestParam.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::LBrace","SyntaxTree/LBrace.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::LBracket","SyntaxTree/LBracket.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::LParen","SyntaxTree/LParen.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Label","SyntaxTree/Label.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::LabelEnd","SyntaxTree/LabelEnd.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Lambda","SyntaxTree/Lambda.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::LambdaVar","SyntaxTree/LambdaVar.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::MAssign","SyntaxTree/MAssign.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::MLHS","SyntaxTree/MLHS.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::MLHSParen","SyntaxTree/MLHSParen.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::MRHS","SyntaxTree/MRHS.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::MethodAddBlock","SyntaxTree/MethodAddBlock.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ModuleDeclaration","SyntaxTree/ModuleDeclaration.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Next","SyntaxTree/Next.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Node","SyntaxTree/Node.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Not","SyntaxTree/Not.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Op","SyntaxTree/Op.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::OpAssign","SyntaxTree/OpAssign.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Params","SyntaxTree/Params.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Paren","SyntaxTree/Paren.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Period","SyntaxTree/Period.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::PinnedBegin","SyntaxTree/PinnedBegin.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::PinnedVarRef","SyntaxTree/PinnedVarRef.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Program","SyntaxTree/Program.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::QSymbols","SyntaxTree/QSymbols.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::QSymbolsBeg","SyntaxTree/QSymbolsBeg.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::QWords","SyntaxTree/QWords.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::QWordsBeg","SyntaxTree/QWordsBeg.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::RAssign","SyntaxTree/RAssign.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::RBrace","SyntaxTree/RBrace.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::RBracket","SyntaxTree/RBracket.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::RParen","SyntaxTree/RParen.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::RationalLiteral","SyntaxTree/RationalLiteral.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Redo","SyntaxTree/Redo.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::RegexpBeg","SyntaxTree/RegexpBeg.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::RegexpContent","SyntaxTree/RegexpContent.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::RegexpEnd","SyntaxTree/RegexpEnd.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::RegexpLiteral","SyntaxTree/RegexpLiteral.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Rescue","SyntaxTree/Rescue.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::RescueEx","SyntaxTree/RescueEx.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::RescueMod","SyntaxTree/RescueMod.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::RestParam","SyntaxTree/RestParam.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Retry","SyntaxTree/Retry.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Return","SyntaxTree/Return.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Return0","SyntaxTree/Return0.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::SClass","SyntaxTree/SClass.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Statements","SyntaxTree/Statements.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::StringConcat","SyntaxTree/StringConcat.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::StringContent","SyntaxTree/StringContent.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::StringDVar","SyntaxTree/StringDVar.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::StringEmbExpr","SyntaxTree/StringEmbExpr.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::StringLiteral","SyntaxTree/StringLiteral.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Super","SyntaxTree/Super.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::SymBeg","SyntaxTree/SymBeg.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::SymbolContent","SyntaxTree/SymbolContent.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::SymbolLiteral","SyntaxTree/SymbolLiteral.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Symbols","SyntaxTree/Symbols.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::SymbolsBeg","SyntaxTree/SymbolsBeg.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::TLamBeg","SyntaxTree/TLamBeg.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::TLambda","SyntaxTree/TLambda.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::TStringBeg","SyntaxTree/TStringBeg.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::TStringContent","SyntaxTree/TStringContent.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::TStringEnd","SyntaxTree/TStringEnd.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::TopConstField","SyntaxTree/TopConstField.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::TopConstRef","SyntaxTree/TopConstRef.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Unary","SyntaxTree/Unary.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Undef","SyntaxTree/Undef.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Unless","SyntaxTree/Unless.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::UnlessMod","SyntaxTree/UnlessMod.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Until","SyntaxTree/Until.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::UntilMod","SyntaxTree/UntilMod.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::VCall","SyntaxTree/VCall.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::VarAlias","SyntaxTree/VarAlias.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::VarField","SyntaxTree/VarField.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::VarRef","SyntaxTree/VarRef.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::VoidStmt","SyntaxTree/VoidStmt.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::When","SyntaxTree/When.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::While","SyntaxTree/While.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::WhileMod","SyntaxTree/WhileMod.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Word","SyntaxTree/Word.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Words","SyntaxTree/Words.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::WordsBeg","SyntaxTree/WordsBeg.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::XString","SyntaxTree/XString.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::XStringLiteral","SyntaxTree/XStringLiteral.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Yield","SyntaxTree/Yield.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::Yield0","SyntaxTree/Yield0.html#method-i-child_nodes","()",""],["child_nodes","SyntaxTree::ZSuper","SyntaxTree/ZSuper.html#method-i-child_nodes","()",""],["comments","SyntaxTree::Alias::AliasArgumentFormatter","SyntaxTree/Alias/AliasArgumentFormatter.html#method-i-comments","()",""],["comments","SyntaxTree::AryPtn::RestFormatter","SyntaxTree/AryPtn/RestFormatter.html#method-i-comments","()",""],["comments","SyntaxTree::BlockFormatter::BlockOpenFormatter","SyntaxTree/BlockFormatter/BlockOpenFormatter.html#method-i-comments","()",""],["comments","SyntaxTree::CallOperatorFormatter","SyntaxTree/CallOperatorFormatter.html#method-i-comments","()",""],["comments","SyntaxTree::Comment","SyntaxTree/Comment.html#method-i-comments","()",""],["comments","SyntaxTree::EmbDoc","SyntaxTree/EmbDoc.html#method-i-comments","()",""],["comments","SyntaxTree::HshPtn::KeywordFormatter","SyntaxTree/HshPtn/KeywordFormatter.html#method-i-comments","()",""],["comments","SyntaxTree::HshPtn::KeywordRestFormatter","SyntaxTree/HshPtn/KeywordRestFormatter.html#method-i-comments","()",""],["comments","SyntaxTree::Params::KeywordFormatter","SyntaxTree/Params/KeywordFormatter.html#method-i-comments","()",""],["comments","SyntaxTree::Params::KeywordRestFormatter","SyntaxTree/Params/KeywordRestFormatter.html#method-i-comments","()",""],["comments","SyntaxTree::Params::OptionalFormatter","SyntaxTree/Params/OptionalFormatter.html#method-i-comments","()",""],["comments","SyntaxTree::Undef::UndefArgumentFormatter","SyntaxTree/Undef/UndefArgumentFormatter.html#method-i-comments","()",""],["construct_keys","SyntaxTree::Node","SyntaxTree/Node.html#method-i-construct_keys","()",""],["corrections","SyntaxTree::BasicVisitor::VisitMethodChecker","SyntaxTree/BasicVisitor/VisitMethodChecker.html#method-i-corrections","()",""],["deconstruct","SyntaxTree::ARef","SyntaxTree/ARef.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ARefField","SyntaxTree/ARefField.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Alias","SyntaxTree/Alias.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ArgBlock","SyntaxTree/ArgBlock.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ArgParen","SyntaxTree/ArgParen.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ArgStar","SyntaxTree/ArgStar.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Args","SyntaxTree/Args.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ArgsForward","SyntaxTree/ArgsForward.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ArrayLiteral","SyntaxTree/ArrayLiteral.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::AryPtn","SyntaxTree/AryPtn.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Assign","SyntaxTree/Assign.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Assoc","SyntaxTree/Assoc.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::AssocSplat","SyntaxTree/AssocSplat.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::BEGINBlock","SyntaxTree/BEGINBlock.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Backref","SyntaxTree/Backref.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Backtick","SyntaxTree/Backtick.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::BareAssocHash","SyntaxTree/BareAssocHash.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Begin","SyntaxTree/Begin.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Binary","SyntaxTree/Binary.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::BlockArg","SyntaxTree/BlockArg.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::BlockVar","SyntaxTree/BlockVar.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::BodyStmt","SyntaxTree/BodyStmt.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::BraceBlock","SyntaxTree/BraceBlock.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Break","SyntaxTree/Break.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::CHAR","SyntaxTree/CHAR.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::CVar","SyntaxTree/CVar.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Call","SyntaxTree/Call.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Case","SyntaxTree/Case.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ClassDeclaration","SyntaxTree/ClassDeclaration.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Comma","SyntaxTree/Comma.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Command","SyntaxTree/Command.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::CommandCall","SyntaxTree/CommandCall.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Comment","SyntaxTree/Comment.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Const","SyntaxTree/Const.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ConstPathField","SyntaxTree/ConstPathField.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ConstPathRef","SyntaxTree/ConstPathRef.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ConstRef","SyntaxTree/ConstRef.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Def","SyntaxTree/Def.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::DefEndless","SyntaxTree/DefEndless.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Defined","SyntaxTree/Defined.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Defs","SyntaxTree/Defs.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::DoBlock","SyntaxTree/DoBlock.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Dot2","SyntaxTree/Dot2.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Dot3","SyntaxTree/Dot3.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::DynaSymbol","SyntaxTree/DynaSymbol.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ENDBlock","SyntaxTree/ENDBlock.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Else","SyntaxTree/Else.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Elsif","SyntaxTree/Elsif.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::EmbDoc","SyntaxTree/EmbDoc.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::EmbExprBeg","SyntaxTree/EmbExprBeg.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::EmbExprEnd","SyntaxTree/EmbExprEnd.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::EmbVar","SyntaxTree/EmbVar.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::EndContent","SyntaxTree/EndContent.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Ensure","SyntaxTree/Ensure.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ExcessedComma","SyntaxTree/ExcessedComma.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::FCall","SyntaxTree/FCall.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Field","SyntaxTree/Field.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::FloatLiteral","SyntaxTree/FloatLiteral.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::FndPtn","SyntaxTree/FndPtn.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::For","SyntaxTree/For.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::GVar","SyntaxTree/GVar.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::HashLiteral","SyntaxTree/HashLiteral.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Heredoc","SyntaxTree/Heredoc.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::HeredocBeg","SyntaxTree/HeredocBeg.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::HshPtn","SyntaxTree/HshPtn.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::IVar","SyntaxTree/IVar.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Ident","SyntaxTree/Ident.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::If","SyntaxTree/If.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::IfMod","SyntaxTree/IfMod.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::IfOp","SyntaxTree/IfOp.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Imaginary","SyntaxTree/Imaginary.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::In","SyntaxTree/In.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Int","SyntaxTree/Int.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Kw","SyntaxTree/Kw.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::KwRestParam","SyntaxTree/KwRestParam.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::LBrace","SyntaxTree/LBrace.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::LBracket","SyntaxTree/LBracket.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::LParen","SyntaxTree/LParen.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Label","SyntaxTree/Label.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::LabelEnd","SyntaxTree/LabelEnd.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Lambda","SyntaxTree/Lambda.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::LambdaVar","SyntaxTree/LambdaVar.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Location","SyntaxTree/Location.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::MAssign","SyntaxTree/MAssign.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::MLHS","SyntaxTree/MLHS.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::MLHSParen","SyntaxTree/MLHSParen.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::MRHS","SyntaxTree/MRHS.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::MethodAddBlock","SyntaxTree/MethodAddBlock.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ModuleDeclaration","SyntaxTree/ModuleDeclaration.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Next","SyntaxTree/Next.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Node","SyntaxTree/Node.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Not","SyntaxTree/Not.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Op","SyntaxTree/Op.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::OpAssign","SyntaxTree/OpAssign.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Params","SyntaxTree/Params.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Paren","SyntaxTree/Paren.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Period","SyntaxTree/Period.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::PinnedBegin","SyntaxTree/PinnedBegin.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::PinnedVarRef","SyntaxTree/PinnedVarRef.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Program","SyntaxTree/Program.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::QSymbols","SyntaxTree/QSymbols.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::QSymbolsBeg","SyntaxTree/QSymbolsBeg.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::QWords","SyntaxTree/QWords.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::QWordsBeg","SyntaxTree/QWordsBeg.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::RAssign","SyntaxTree/RAssign.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::RBrace","SyntaxTree/RBrace.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::RBracket","SyntaxTree/RBracket.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::RParen","SyntaxTree/RParen.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::RationalLiteral","SyntaxTree/RationalLiteral.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Redo","SyntaxTree/Redo.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::RegexpBeg","SyntaxTree/RegexpBeg.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::RegexpContent","SyntaxTree/RegexpContent.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::RegexpEnd","SyntaxTree/RegexpEnd.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::RegexpLiteral","SyntaxTree/RegexpLiteral.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Rescue","SyntaxTree/Rescue.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::RescueEx","SyntaxTree/RescueEx.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::RescueMod","SyntaxTree/RescueMod.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::RestParam","SyntaxTree/RestParam.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Retry","SyntaxTree/Retry.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Return","SyntaxTree/Return.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Return0","SyntaxTree/Return0.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::SClass","SyntaxTree/SClass.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Statements","SyntaxTree/Statements.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::StringConcat","SyntaxTree/StringConcat.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::StringContent","SyntaxTree/StringContent.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::StringDVar","SyntaxTree/StringDVar.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::StringEmbExpr","SyntaxTree/StringEmbExpr.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::StringLiteral","SyntaxTree/StringLiteral.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Super","SyntaxTree/Super.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::SymBeg","SyntaxTree/SymBeg.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::SymbolContent","SyntaxTree/SymbolContent.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::SymbolLiteral","SyntaxTree/SymbolLiteral.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Symbols","SyntaxTree/Symbols.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::SymbolsBeg","SyntaxTree/SymbolsBeg.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::TLamBeg","SyntaxTree/TLamBeg.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::TLambda","SyntaxTree/TLambda.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::TStringBeg","SyntaxTree/TStringBeg.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::TStringContent","SyntaxTree/TStringContent.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::TStringEnd","SyntaxTree/TStringEnd.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::TopConstField","SyntaxTree/TopConstField.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::TopConstRef","SyntaxTree/TopConstRef.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Unary","SyntaxTree/Unary.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Undef","SyntaxTree/Undef.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Unless","SyntaxTree/Unless.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::UnlessMod","SyntaxTree/UnlessMod.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Until","SyntaxTree/Until.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::UntilMod","SyntaxTree/UntilMod.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::VCall","SyntaxTree/VCall.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::VarAlias","SyntaxTree/VarAlias.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::VarField","SyntaxTree/VarField.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::VarRef","SyntaxTree/VarRef.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::VoidStmt","SyntaxTree/VoidStmt.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::When","SyntaxTree/When.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::While","SyntaxTree/While.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::WhileMod","SyntaxTree/WhileMod.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Word","SyntaxTree/Word.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Words","SyntaxTree/Words.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::WordsBeg","SyntaxTree/WordsBeg.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::XString","SyntaxTree/XString.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::XStringLiteral","SyntaxTree/XStringLiteral.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Yield","SyntaxTree/Yield.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::Yield0","SyntaxTree/Yield0.html#method-i-deconstruct","()",""],["deconstruct","SyntaxTree::ZSuper","SyntaxTree/ZSuper.html#method-i-deconstruct","()",""],["deconstruct_keys","SyntaxTree::ARef","SyntaxTree/ARef.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::ARefField","SyntaxTree/ARefField.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Alias","SyntaxTree/Alias.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::ArgBlock","SyntaxTree/ArgBlock.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::ArgParen","SyntaxTree/ArgParen.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::ArgStar","SyntaxTree/ArgStar.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Args","SyntaxTree/Args.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::ArgsForward","SyntaxTree/ArgsForward.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::ArrayLiteral","SyntaxTree/ArrayLiteral.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::AryPtn","SyntaxTree/AryPtn.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Assign","SyntaxTree/Assign.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Assoc","SyntaxTree/Assoc.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::AssocSplat","SyntaxTree/AssocSplat.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::BEGINBlock","SyntaxTree/BEGINBlock.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Backref","SyntaxTree/Backref.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Backtick","SyntaxTree/Backtick.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::BareAssocHash","SyntaxTree/BareAssocHash.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Begin","SyntaxTree/Begin.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Binary","SyntaxTree/Binary.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::BlockArg","SyntaxTree/BlockArg.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::BlockVar","SyntaxTree/BlockVar.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::BodyStmt","SyntaxTree/BodyStmt.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::BraceBlock","SyntaxTree/BraceBlock.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Break","SyntaxTree/Break.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::CHAR","SyntaxTree/CHAR.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::CVar","SyntaxTree/CVar.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Call","SyntaxTree/Call.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Case","SyntaxTree/Case.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::ClassDeclaration","SyntaxTree/ClassDeclaration.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Comma","SyntaxTree/Comma.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Command","SyntaxTree/Command.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::CommandCall","SyntaxTree/CommandCall.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Comment","SyntaxTree/Comment.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Const","SyntaxTree/Const.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::ConstPathField","SyntaxTree/ConstPathField.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::ConstPathRef","SyntaxTree/ConstPathRef.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::ConstRef","SyntaxTree/ConstRef.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Def","SyntaxTree/Def.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::DefEndless","SyntaxTree/DefEndless.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Defined","SyntaxTree/Defined.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Defs","SyntaxTree/Defs.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::DoBlock","SyntaxTree/DoBlock.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Dot2","SyntaxTree/Dot2.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Dot3","SyntaxTree/Dot3.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::DynaSymbol","SyntaxTree/DynaSymbol.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::ENDBlock","SyntaxTree/ENDBlock.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Else","SyntaxTree/Else.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Elsif","SyntaxTree/Elsif.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::EmbDoc","SyntaxTree/EmbDoc.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::EmbExprBeg","SyntaxTree/EmbExprBeg.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::EmbExprEnd","SyntaxTree/EmbExprEnd.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::EmbVar","SyntaxTree/EmbVar.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::EndContent","SyntaxTree/EndContent.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Ensure","SyntaxTree/Ensure.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::ExcessedComma","SyntaxTree/ExcessedComma.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::FCall","SyntaxTree/FCall.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Field","SyntaxTree/Field.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::FloatLiteral","SyntaxTree/FloatLiteral.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::FndPtn","SyntaxTree/FndPtn.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::For","SyntaxTree/For.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::GVar","SyntaxTree/GVar.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::HashLiteral","SyntaxTree/HashLiteral.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Heredoc","SyntaxTree/Heredoc.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::HeredocBeg","SyntaxTree/HeredocBeg.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::HshPtn","SyntaxTree/HshPtn.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::IVar","SyntaxTree/IVar.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Ident","SyntaxTree/Ident.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::If","SyntaxTree/If.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::IfMod","SyntaxTree/IfMod.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::IfOp","SyntaxTree/IfOp.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Imaginary","SyntaxTree/Imaginary.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::In","SyntaxTree/In.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Int","SyntaxTree/Int.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Kw","SyntaxTree/Kw.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::KwRestParam","SyntaxTree/KwRestParam.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::LBrace","SyntaxTree/LBrace.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::LBracket","SyntaxTree/LBracket.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::LParen","SyntaxTree/LParen.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Label","SyntaxTree/Label.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::LabelEnd","SyntaxTree/LabelEnd.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Lambda","SyntaxTree/Lambda.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::LambdaVar","SyntaxTree/LambdaVar.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Location","SyntaxTree/Location.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::MAssign","SyntaxTree/MAssign.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::MLHS","SyntaxTree/MLHS.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::MLHSParen","SyntaxTree/MLHSParen.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::MRHS","SyntaxTree/MRHS.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::MethodAddBlock","SyntaxTree/MethodAddBlock.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::ModuleDeclaration","SyntaxTree/ModuleDeclaration.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Next","SyntaxTree/Next.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Node","SyntaxTree/Node.html#method-i-deconstruct_keys","(keys)",""],["deconstruct_keys","SyntaxTree::Not","SyntaxTree/Not.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Op","SyntaxTree/Op.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::OpAssign","SyntaxTree/OpAssign.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Params","SyntaxTree/Params.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Paren","SyntaxTree/Paren.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Period","SyntaxTree/Period.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::PinnedBegin","SyntaxTree/PinnedBegin.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::PinnedVarRef","SyntaxTree/PinnedVarRef.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Program","SyntaxTree/Program.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::QSymbols","SyntaxTree/QSymbols.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::QSymbolsBeg","SyntaxTree/QSymbolsBeg.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::QWords","SyntaxTree/QWords.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::QWordsBeg","SyntaxTree/QWordsBeg.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::RAssign","SyntaxTree/RAssign.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::RBrace","SyntaxTree/RBrace.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::RBracket","SyntaxTree/RBracket.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::RParen","SyntaxTree/RParen.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::RationalLiteral","SyntaxTree/RationalLiteral.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Redo","SyntaxTree/Redo.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::RegexpBeg","SyntaxTree/RegexpBeg.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::RegexpContent","SyntaxTree/RegexpContent.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::RegexpEnd","SyntaxTree/RegexpEnd.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::RegexpLiteral","SyntaxTree/RegexpLiteral.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Rescue","SyntaxTree/Rescue.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::RescueEx","SyntaxTree/RescueEx.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::RescueMod","SyntaxTree/RescueMod.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::RestParam","SyntaxTree/RestParam.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Retry","SyntaxTree/Retry.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Return","SyntaxTree/Return.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Return0","SyntaxTree/Return0.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::SClass","SyntaxTree/SClass.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Statements","SyntaxTree/Statements.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::StringConcat","SyntaxTree/StringConcat.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::StringContent","SyntaxTree/StringContent.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::StringDVar","SyntaxTree/StringDVar.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::StringEmbExpr","SyntaxTree/StringEmbExpr.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::StringLiteral","SyntaxTree/StringLiteral.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Super","SyntaxTree/Super.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::SymBeg","SyntaxTree/SymBeg.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::SymbolContent","SyntaxTree/SymbolContent.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::SymbolLiteral","SyntaxTree/SymbolLiteral.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Symbols","SyntaxTree/Symbols.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::SymbolsBeg","SyntaxTree/SymbolsBeg.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::TLamBeg","SyntaxTree/TLamBeg.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::TLambda","SyntaxTree/TLambda.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::TStringBeg","SyntaxTree/TStringBeg.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::TStringContent","SyntaxTree/TStringContent.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::TStringEnd","SyntaxTree/TStringEnd.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::TopConstField","SyntaxTree/TopConstField.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::TopConstRef","SyntaxTree/TopConstRef.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Unary","SyntaxTree/Unary.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Undef","SyntaxTree/Undef.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Unless","SyntaxTree/Unless.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::UnlessMod","SyntaxTree/UnlessMod.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Until","SyntaxTree/Until.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::UntilMod","SyntaxTree/UntilMod.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::VCall","SyntaxTree/VCall.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::VarAlias","SyntaxTree/VarAlias.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::VarField","SyntaxTree/VarField.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::VarRef","SyntaxTree/VarRef.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::VoidStmt","SyntaxTree/VoidStmt.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::When","SyntaxTree/When.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::While","SyntaxTree/While.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::WhileMod","SyntaxTree/WhileMod.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Word","SyntaxTree/Word.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Words","SyntaxTree/Words.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::WordsBeg","SyntaxTree/WordsBeg.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::XString","SyntaxTree/XString.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::XStringLiteral","SyntaxTree/XStringLiteral.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Yield","SyntaxTree/Yield.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::Yield0","SyntaxTree/Yield0.html#method-i-deconstruct_keys","(_keys)",""],["deconstruct_keys","SyntaxTree::ZSuper","SyntaxTree/ZSuper.html#method-i-deconstruct_keys","(_keys)",""],["empty?","SyntaxTree::BodyStmt","SyntaxTree/BodyStmt.html#method-i-empty-3F","()",""],["empty?","SyntaxTree::LambdaVar","SyntaxTree/LambdaVar.html#method-i-empty-3F","()",""],["empty?","SyntaxTree::Params","SyntaxTree/Params.html#method-i-empty-3F","()","<p>Params nodes are the most complicated in the tree. Occasionally you want to know if they are “empty”, …\n"],["empty?","SyntaxTree::Statements","SyntaxTree/Statements.html#method-i-empty-3F","()",""],["failure","SyntaxTree::CLI::Action","SyntaxTree/CLI/Action.html#method-i-failure","()",""],["failure","SyntaxTree::CLI::Check","SyntaxTree/CLI/Check.html#method-i-failure","()",""],["failure","SyntaxTree::CLI::Debug","SyntaxTree/CLI/Debug.html#method-i-failure","()",""],["find","SyntaxTree::LanguageServer::InlayHints","SyntaxTree/LanguageServer/InlayHints.html#method-c-find","(program)",""],["fixed","SyntaxTree::Location","SyntaxTree/Location.html#method-c-fixed","(line:, char:, column:)",""],["flat","SyntaxTree::Parentheses","SyntaxTree/Parentheses.html#method-c-flat","(q)",""],["for","SyntaxTree::HashKeyFormatter","SyntaxTree/HashKeyFormatter.html#method-c-for","(container)",""],["format","SyntaxTree","SyntaxTree.html#method-c-format","(source, maxwidth = 80)","<p>Parses the given source and returns the formatted source.\n"],["format","SyntaxTree::ARef","SyntaxTree/ARef.html#method-i-format","(q)",""],["format","SyntaxTree::ARefField","SyntaxTree/ARefField.html#method-i-format","(q)",""],["format","SyntaxTree::Alias","SyntaxTree/Alias.html#method-i-format","(q)",""],["format","SyntaxTree::Alias::AliasArgumentFormatter","SyntaxTree/Alias/AliasArgumentFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::ArgBlock","SyntaxTree/ArgBlock.html#method-i-format","(q)",""],["format","SyntaxTree::ArgParen","SyntaxTree/ArgParen.html#method-i-format","(q)",""],["format","SyntaxTree::ArgStar","SyntaxTree/ArgStar.html#method-i-format","(q)",""],["format","SyntaxTree::Args","SyntaxTree/Args.html#method-i-format","(q)",""],["format","SyntaxTree::ArgsForward","SyntaxTree/ArgsForward.html#method-i-format","(q)",""],["format","SyntaxTree::ArrayLiteral","SyntaxTree/ArrayLiteral.html#method-i-format","(q)",""],["format","SyntaxTree::ArrayLiteral::EmptyWithCommentsFormatter","SyntaxTree/ArrayLiteral/EmptyWithCommentsFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::ArrayLiteral::QSymbolsFormatter","SyntaxTree/ArrayLiteral/QSymbolsFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::ArrayLiteral::QWordsFormatter","SyntaxTree/ArrayLiteral/QWordsFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::ArrayLiteral::VarRefsFormatter","SyntaxTree/ArrayLiteral/VarRefsFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::AryPtn","SyntaxTree/AryPtn.html#method-i-format","(q)",""],["format","SyntaxTree::AryPtn::RestFormatter","SyntaxTree/AryPtn/RestFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::Assign","SyntaxTree/Assign.html#method-i-format","(q)",""],["format","SyntaxTree::Assoc","SyntaxTree/Assoc.html#method-i-format","(q)",""],["format","SyntaxTree::AssocSplat","SyntaxTree/AssocSplat.html#method-i-format","(q)",""],["format","SyntaxTree::BEGINBlock","SyntaxTree/BEGINBlock.html#method-i-format","(q)",""],["format","SyntaxTree::Backref","SyntaxTree/Backref.html#method-i-format","(q)",""],["format","SyntaxTree::Backtick","SyntaxTree/Backtick.html#method-i-format","(q)",""],["format","SyntaxTree::BareAssocHash","SyntaxTree/BareAssocHash.html#method-i-format","(q)",""],["format","SyntaxTree::Begin","SyntaxTree/Begin.html#method-i-format","(q)",""],["format","SyntaxTree::Binary","SyntaxTree/Binary.html#method-i-format","(q)",""],["format","SyntaxTree::BlockArg","SyntaxTree/BlockArg.html#method-i-format","(q)",""],["format","SyntaxTree::BlockFormatter","SyntaxTree/BlockFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::BlockFormatter::BlockOpenFormatter","SyntaxTree/BlockFormatter/BlockOpenFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::BlockVar","SyntaxTree/BlockVar.html#method-i-format","(q)",""],["format","SyntaxTree::BodyStmt","SyntaxTree/BodyStmt.html#method-i-format","(q)",""],["format","SyntaxTree::BraceBlock","SyntaxTree/BraceBlock.html#method-i-format","(q)",""],["format","SyntaxTree::Break","SyntaxTree/Break.html#method-i-format","(q)",""],["format","SyntaxTree::CHAR","SyntaxTree/CHAR.html#method-i-format","(q)",""],["format","SyntaxTree::CVar","SyntaxTree/CVar.html#method-i-format","(q)",""],["format","SyntaxTree::Call","SyntaxTree/Call.html#method-i-format","(q)",""],["format","SyntaxTree::CallChainFormatter","SyntaxTree/CallChainFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::CallOperatorFormatter","SyntaxTree/CallOperatorFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::Case","SyntaxTree/Case.html#method-i-format","(q)",""],["format","SyntaxTree::ClassDeclaration","SyntaxTree/ClassDeclaration.html#method-i-format","(q)",""],["format","SyntaxTree::Command","SyntaxTree/Command.html#method-i-format","(q)",""],["format","SyntaxTree::CommandCall","SyntaxTree/CommandCall.html#method-i-format","(q)",""],["format","SyntaxTree::Comment","SyntaxTree/Comment.html#method-i-format","(q)",""],["format","SyntaxTree::ConditionalFormatter","SyntaxTree/ConditionalFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::ConditionalModFormatter","SyntaxTree/ConditionalModFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::Const","SyntaxTree/Const.html#method-i-format","(q)",""],["format","SyntaxTree::ConstPathField","SyntaxTree/ConstPathField.html#method-i-format","(q)",""],["format","SyntaxTree::ConstPathRef","SyntaxTree/ConstPathRef.html#method-i-format","(q)",""],["format","SyntaxTree::ConstRef","SyntaxTree/ConstRef.html#method-i-format","(q)",""],["format","SyntaxTree::Def","SyntaxTree/Def.html#method-i-format","(q)",""],["format","SyntaxTree::DefEndless","SyntaxTree/DefEndless.html#method-i-format","(q)",""],["format","SyntaxTree::Defined","SyntaxTree/Defined.html#method-i-format","(q)",""],["format","SyntaxTree::Defs","SyntaxTree/Defs.html#method-i-format","(q)",""],["format","SyntaxTree::DoBlock","SyntaxTree/DoBlock.html#method-i-format","(q)",""],["format","SyntaxTree::Dot2","SyntaxTree/Dot2.html#method-i-format","(q)",""],["format","SyntaxTree::Dot3","SyntaxTree/Dot3.html#method-i-format","(q)",""],["format","SyntaxTree::DotFormatter","SyntaxTree/DotFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::DynaSymbol","SyntaxTree/DynaSymbol.html#method-i-format","(q)",""],["format","SyntaxTree::ENDBlock","SyntaxTree/ENDBlock.html#method-i-format","(q)",""],["format","SyntaxTree::Else","SyntaxTree/Else.html#method-i-format","(q)",""],["format","SyntaxTree::Elsif","SyntaxTree/Elsif.html#method-i-format","(q)",""],["format","SyntaxTree::EmbDoc","SyntaxTree/EmbDoc.html#method-i-format","(q)",""],["format","SyntaxTree::EndContent","SyntaxTree/EndContent.html#method-i-format","(q)",""],["format","SyntaxTree::Ensure","SyntaxTree/Ensure.html#method-i-format","(q)",""],["format","SyntaxTree::ExcessedComma","SyntaxTree/ExcessedComma.html#method-i-format","(q)",""],["format","SyntaxTree::FCall","SyntaxTree/FCall.html#method-i-format","(q)",""],["format","SyntaxTree::Field","SyntaxTree/Field.html#method-i-format","(q)",""],["format","SyntaxTree::FloatLiteral","SyntaxTree/FloatLiteral.html#method-i-format","(q)",""],["format","SyntaxTree::FlowControlFormatter","SyntaxTree/FlowControlFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::FndPtn","SyntaxTree/FndPtn.html#method-i-format","(q)",""],["format","SyntaxTree::For","SyntaxTree/For.html#method-i-format","(q)",""],["format","SyntaxTree::Formatter","SyntaxTree/Formatter.html#method-c-format","(source, node)",""],["format","SyntaxTree::Formatter","SyntaxTree/Formatter.html#method-i-format","(node, stackable: true)",""],["format","SyntaxTree::GVar","SyntaxTree/GVar.html#method-i-format","(q)",""],["format","SyntaxTree::HashLiteral","SyntaxTree/HashLiteral.html#method-i-format","(q)",""],["format","SyntaxTree::HashLiteral::EmptyWithCommentsFormatter","SyntaxTree/HashLiteral/EmptyWithCommentsFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::Heredoc","SyntaxTree/Heredoc.html#method-i-format","(q)",""],["format","SyntaxTree::HeredocBeg","SyntaxTree/HeredocBeg.html#method-i-format","(q)",""],["format","SyntaxTree::HshPtn","SyntaxTree/HshPtn.html#method-i-format","(q)",""],["format","SyntaxTree::HshPtn::KeywordFormatter","SyntaxTree/HshPtn/KeywordFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::HshPtn::KeywordRestFormatter","SyntaxTree/HshPtn/KeywordRestFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::IVar","SyntaxTree/IVar.html#method-i-format","(q)",""],["format","SyntaxTree::Ident","SyntaxTree/Ident.html#method-i-format","(q)",""],["format","SyntaxTree::If","SyntaxTree/If.html#method-i-format","(q)",""],["format","SyntaxTree::IfMod","SyntaxTree/IfMod.html#method-i-format","(q)",""],["format","SyntaxTree::IfOp","SyntaxTree/IfOp.html#method-i-format","(q)",""],["format","SyntaxTree::Imaginary","SyntaxTree/Imaginary.html#method-i-format","(q)",""],["format","SyntaxTree::In","SyntaxTree/In.html#method-i-format","(q)",""],["format","SyntaxTree::Int","SyntaxTree/Int.html#method-i-format","(q)",""],["format","SyntaxTree::Kw","SyntaxTree/Kw.html#method-i-format","(q)",""],["format","SyntaxTree::KwRestParam","SyntaxTree/KwRestParam.html#method-i-format","(q)",""],["format","SyntaxTree::LBrace","SyntaxTree/LBrace.html#method-i-format","(q)",""],["format","SyntaxTree::LBracket","SyntaxTree/LBracket.html#method-i-format","(q)",""],["format","SyntaxTree::LParen","SyntaxTree/LParen.html#method-i-format","(q)",""],["format","SyntaxTree::Label","SyntaxTree/Label.html#method-i-format","(q)",""],["format","SyntaxTree::Lambda","SyntaxTree/Lambda.html#method-i-format","(q)",""],["format","SyntaxTree::LambdaVar","SyntaxTree/LambdaVar.html#method-i-format","(q)",""],["format","SyntaxTree::LoopFormatter","SyntaxTree/LoopFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::MAssign","SyntaxTree/MAssign.html#method-i-format","(q)",""],["format","SyntaxTree::MLHS","SyntaxTree/MLHS.html#method-i-format","(q)",""],["format","SyntaxTree::MLHSParen","SyntaxTree/MLHSParen.html#method-i-format","(q)",""],["format","SyntaxTree::MRHS","SyntaxTree/MRHS.html#method-i-format","(q)",""],["format","SyntaxTree::MethodAddBlock","SyntaxTree/MethodAddBlock.html#method-i-format","(q)",""],["format","SyntaxTree::ModuleDeclaration","SyntaxTree/ModuleDeclaration.html#method-i-format","(q)",""],["format","SyntaxTree::Next","SyntaxTree/Next.html#method-i-format","(q)",""],["format","SyntaxTree::Node","SyntaxTree/Node.html#method-i-format","(q)",""],["format","SyntaxTree::Not","SyntaxTree/Not.html#method-i-format","(q)",""],["format","SyntaxTree::Op","SyntaxTree/Op.html#method-i-format","(q)",""],["format","SyntaxTree::OpAssign","SyntaxTree/OpAssign.html#method-i-format","(q)",""],["format","SyntaxTree::Params","SyntaxTree/Params.html#method-i-format","(q)",""],["format","SyntaxTree::Params::KeywordFormatter","SyntaxTree/Params/KeywordFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::Params::KeywordRestFormatter","SyntaxTree/Params/KeywordRestFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::Params::OptionalFormatter","SyntaxTree/Params/OptionalFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::Paren","SyntaxTree/Paren.html#method-i-format","(q)",""],["format","SyntaxTree::Period","SyntaxTree/Period.html#method-i-format","(q)",""],["format","SyntaxTree::PinnedBegin","SyntaxTree/PinnedBegin.html#method-i-format","(q)",""],["format","SyntaxTree::PinnedVarRef","SyntaxTree/PinnedVarRef.html#method-i-format","(q)",""],["format","SyntaxTree::Program","SyntaxTree/Program.html#method-i-format","(q)",""],["format","SyntaxTree::QSymbols","SyntaxTree/QSymbols.html#method-i-format","(q)",""],["format","SyntaxTree::QWords","SyntaxTree/QWords.html#method-i-format","(q)",""],["format","SyntaxTree::RAssign","SyntaxTree/RAssign.html#method-i-format","(q)",""],["format","SyntaxTree::RationalLiteral","SyntaxTree/RationalLiteral.html#method-i-format","(q)",""],["format","SyntaxTree::Redo","SyntaxTree/Redo.html#method-i-format","(q)",""],["format","SyntaxTree::RegexpLiteral","SyntaxTree/RegexpLiteral.html#method-i-format","(q)",""],["format","SyntaxTree::Rescue","SyntaxTree/Rescue.html#method-i-format","(q)",""],["format","SyntaxTree::RescueEx","SyntaxTree/RescueEx.html#method-i-format","(q)",""],["format","SyntaxTree::RescueMod","SyntaxTree/RescueMod.html#method-i-format","(q)",""],["format","SyntaxTree::RestParam","SyntaxTree/RestParam.html#method-i-format","(q)",""],["format","SyntaxTree::Retry","SyntaxTree/Retry.html#method-i-format","(q)",""],["format","SyntaxTree::Return","SyntaxTree/Return.html#method-i-format","(q)",""],["format","SyntaxTree::Return0","SyntaxTree/Return0.html#method-i-format","(q)",""],["format","SyntaxTree::SClass","SyntaxTree/SClass.html#method-i-format","(q)",""],["format","SyntaxTree::Statements","SyntaxTree/Statements.html#method-i-format","(q)",""],["format","SyntaxTree::StringConcat","SyntaxTree/StringConcat.html#method-i-format","(q)",""],["format","SyntaxTree::StringDVar","SyntaxTree/StringDVar.html#method-i-format","(q)",""],["format","SyntaxTree::StringEmbExpr","SyntaxTree/StringEmbExpr.html#method-i-format","(q)",""],["format","SyntaxTree::StringLiteral","SyntaxTree/StringLiteral.html#method-i-format","(q)",""],["format","SyntaxTree::Super","SyntaxTree/Super.html#method-i-format","(q)",""],["format","SyntaxTree::SymbolLiteral","SyntaxTree/SymbolLiteral.html#method-i-format","(q)",""],["format","SyntaxTree::Symbols","SyntaxTree/Symbols.html#method-i-format","(q)",""],["format","SyntaxTree::TStringContent","SyntaxTree/TStringContent.html#method-i-format","(q)",""],["format","SyntaxTree::TopConstField","SyntaxTree/TopConstField.html#method-i-format","(q)",""],["format","SyntaxTree::TopConstRef","SyntaxTree/TopConstRef.html#method-i-format","(q)",""],["format","SyntaxTree::Unary","SyntaxTree/Unary.html#method-i-format","(q)",""],["format","SyntaxTree::Undef","SyntaxTree/Undef.html#method-i-format","(q)",""],["format","SyntaxTree::Undef::UndefArgumentFormatter","SyntaxTree/Undef/UndefArgumentFormatter.html#method-i-format","(q)",""],["format","SyntaxTree::Unless","SyntaxTree/Unless.html#method-i-format","(q)",""],["format","SyntaxTree::UnlessMod","SyntaxTree/UnlessMod.html#method-i-format","(q)",""],["format","SyntaxTree::Until","SyntaxTree/Until.html#method-i-format","(q)",""],["format","SyntaxTree::UntilMod","SyntaxTree/UntilMod.html#method-i-format","(q)",""],["format","SyntaxTree::VCall","SyntaxTree/VCall.html#method-i-format","(q)",""],["format","SyntaxTree::VarAlias","SyntaxTree/VarAlias.html#method-i-format","(q)",""],["format","SyntaxTree::VarField","SyntaxTree/VarField.html#method-i-format","(q)",""],["format","SyntaxTree::VarRef","SyntaxTree/VarRef.html#method-i-format","(q)",""],["format","SyntaxTree::VoidStmt","SyntaxTree/VoidStmt.html#method-i-format","(q)",""],["format","SyntaxTree::When","SyntaxTree/When.html#method-i-format","(q)",""],["format","SyntaxTree::While","SyntaxTree/While.html#method-i-format","(q)",""],["format","SyntaxTree::WhileMod","SyntaxTree/WhileMod.html#method-i-format","(q)",""],["format","SyntaxTree::Word","SyntaxTree/Word.html#method-i-format","(q)",""],["format","SyntaxTree::Words","SyntaxTree/Words.html#method-i-format","(q)",""],["format","SyntaxTree::XStringLiteral","SyntaxTree/XStringLiteral.html#method-i-format","(q)",""],["format","SyntaxTree::Yield","SyntaxTree/Yield.html#method-i-format","(q)",""],["format","SyntaxTree::Yield0","SyntaxTree/Yield0.html#method-i-format","(q)",""],["format","SyntaxTree::ZSuper","SyntaxTree/ZSuper.html#method-i-format","(q)",""],["format_arguments","SyntaxTree::Call","SyntaxTree/Call.html#method-i-format_arguments","(q)",""],["format_chain","SyntaxTree::CallChainFormatter","SyntaxTree/CallChainFormatter.html#method-i-format_chain","(q, children)",""],["format_contents","SyntaxTree::Call","SyntaxTree/Call.html#method-i-format_contents","(q)",""],["format_contents","SyntaxTree::MethodAddBlock","SyntaxTree/MethodAddBlock.html#method-i-format_contents","(q)",""],["format_each","SyntaxTree::Formatter","SyntaxTree/Formatter.html#method-i-format_each","(nodes)",""],["format_key","SyntaxTree::BareAssocHash","SyntaxTree/BareAssocHash.html#method-i-format_key","(q, key)",""],["format_key","SyntaxTree::HashKeyFormatter::Labels","SyntaxTree/HashKeyFormatter/Labels.html#method-i-format_key","(q, key)",""],["format_key","SyntaxTree::HashKeyFormatter::Rockets","SyntaxTree/HashKeyFormatter/Rockets.html#method-i-format_key","(q, key)",""],["format_key","SyntaxTree::HashLiteral","SyntaxTree/HashLiteral.html#method-i-format_key","(q, key)",""],["gray","SyntaxTree::CLI::Color","SyntaxTree/CLI/Color.html#method-c-gray","(value)",""],["ignore?","SyntaxTree::Comment","SyntaxTree/Comment.html#method-i-ignore-3F","()",""],["ignore?","SyntaxTree::EmbDoc","SyntaxTree/EmbDoc.html#method-i-ignore-3F","()",""],["inline?","SyntaxTree::EmbDoc","SyntaxTree/EmbDoc.html#method-i-inline-3F","()",""],["leading!","SyntaxTree::Comment","SyntaxTree/Comment.html#method-i-leading-21","()",""],["leading?","SyntaxTree::Comment","SyntaxTree/Comment.html#method-i-leading-3F","()",""],["lines","SyntaxTree::Location","SyntaxTree/Location.html#method-i-lines","()",""],["locked?","SyntaxTree::Quotes","SyntaxTree/Quotes.html#method-c-locked-3F","(node, quote)","<p>If there is some part of this string that matches an escape sequence or that contains the interpolation …\n"],["match?","SyntaxTree::TStringContent","SyntaxTree/TStringContent.html#method-i-match-3F","(pattern)",""],["match?","SyntaxTree::Word","SyntaxTree/Word.html#method-i-match-3F","(pattern)",""],["matching","SyntaxTree::Quotes","SyntaxTree/Quotes.html#method-c-matching","(quote)","<p>Find the matching closing quote for the given opening quote.\n"],["new","SyntaxTree::ARef","SyntaxTree/ARef.html#method-c-new","(collection:, index:, location:, comments: [])",""],["new","SyntaxTree::ARefField","SyntaxTree/ARefField.html#method-c-new","(collection:, index:, location:, comments: [])",""],["new","SyntaxTree::Alias","SyntaxTree/Alias.html#method-c-new","(left:, right:, location:, comments: [])",""],["new","SyntaxTree::Alias::AliasArgumentFormatter","SyntaxTree/Alias/AliasArgumentFormatter.html#method-c-new","(argument)",""],["new","SyntaxTree::ArgBlock","SyntaxTree/ArgBlock.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::ArgParen","SyntaxTree/ArgParen.html#method-c-new","(arguments:, location:, comments: [])",""],["new","SyntaxTree::ArgStar","SyntaxTree/ArgStar.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Args","SyntaxTree/Args.html#method-c-new","(parts:, location:, comments: [])",""],["new","SyntaxTree::ArgsForward","SyntaxTree/ArgsForward.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::ArrayLiteral","SyntaxTree/ArrayLiteral.html#method-c-new","(lbracket:, contents:, location:, comments: [])",""],["new","SyntaxTree::ArrayLiteral::EmptyWithCommentsFormatter","SyntaxTree/ArrayLiteral/EmptyWithCommentsFormatter.html#method-c-new","(lbracket)",""],["new","SyntaxTree::ArrayLiteral::QSymbolsFormatter","SyntaxTree/ArrayLiteral/QSymbolsFormatter.html#method-c-new","(contents)",""],["new","SyntaxTree::ArrayLiteral::QWordsFormatter","SyntaxTree/ArrayLiteral/QWordsFormatter.html#method-c-new","(contents)",""],["new","SyntaxTree::ArrayLiteral::VarRefsFormatter","SyntaxTree/ArrayLiteral/VarRefsFormatter.html#method-c-new","(contents)",""],["new","SyntaxTree::AryPtn","SyntaxTree/AryPtn.html#method-c-new","( constant:, requireds:, rest:, posts:, location:, comments: [] )",""],["new","SyntaxTree::AryPtn::RestFormatter","SyntaxTree/AryPtn/RestFormatter.html#method-c-new","(value)",""],["new","SyntaxTree::Assign","SyntaxTree/Assign.html#method-c-new","(target:, value:, location:, comments: [])",""],["new","SyntaxTree::Assoc","SyntaxTree/Assoc.html#method-c-new","(key:, value:, location:, comments: [])",""],["new","SyntaxTree::AssocSplat","SyntaxTree/AssocSplat.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::BEGINBlock","SyntaxTree/BEGINBlock.html#method-c-new","(lbrace:, statements:, location:, comments: [])",""],["new","SyntaxTree::Backref","SyntaxTree/Backref.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Backtick","SyntaxTree/Backtick.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::BareAssocHash","SyntaxTree/BareAssocHash.html#method-c-new","(assocs:, location:, comments: [])",""],["new","SyntaxTree::BasicVisitor::VisitMethodChecker","SyntaxTree/BasicVisitor/VisitMethodChecker.html#method-c-new","(error)",""],["new","SyntaxTree::BasicVisitor::VisitMethodError","SyntaxTree/BasicVisitor/VisitMethodError.html#method-c-new","(visit_method)",""],["new","SyntaxTree::Begin","SyntaxTree/Begin.html#method-c-new","(bodystmt:, location:, comments: [])",""],["new","SyntaxTree::Binary","SyntaxTree/Binary.html#method-c-new","(left:, operator:, right:, location:, comments: [])",""],["new","SyntaxTree::BlockArg","SyntaxTree/BlockArg.html#method-c-new","(name:, location:, comments: [])",""],["new","SyntaxTree::BlockFormatter","SyntaxTree/BlockFormatter.html#method-c-new","(node, block_open, block_close, statements)",""],["new","SyntaxTree::BlockFormatter::BlockOpenFormatter","SyntaxTree/BlockFormatter/BlockOpenFormatter.html#method-c-new","(text, node)",""],["new","SyntaxTree::BlockVar","SyntaxTree/BlockVar.html#method-c-new","(params:, locals:, location:, comments: [])",""],["new","SyntaxTree::BodyStmt","SyntaxTree/BodyStmt.html#method-c-new","( statements:, rescue_clause:, else_keyword:, else_clause:, ensure_clause:, location:, comments: [] )",""],["new","SyntaxTree::BraceBlock","SyntaxTree/BraceBlock.html#method-c-new","(lbrace:, block_var:, statements:, location:, comments: [])",""],["new","SyntaxTree::Break","SyntaxTree/Break.html#method-c-new","(arguments:, location:, comments: [])",""],["new","SyntaxTree::CHAR","SyntaxTree/CHAR.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::CLI::Color","SyntaxTree/CLI/Color.html#method-c-new","(value, code)",""],["new","SyntaxTree::CVar","SyntaxTree/CVar.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Call","SyntaxTree/Call.html#method-c-new","( receiver:, operator:, message:, arguments:, location:, comments: [] )",""],["new","SyntaxTree::CallChainFormatter","SyntaxTree/CallChainFormatter.html#method-c-new","(node)",""],["new","SyntaxTree::CallOperatorFormatter","SyntaxTree/CallOperatorFormatter.html#method-c-new","(operator)",""],["new","SyntaxTree::Case","SyntaxTree/Case.html#method-c-new","(keyword:, value:, consequent:, location:, comments: [])",""],["new","SyntaxTree::ClassDeclaration","SyntaxTree/ClassDeclaration.html#method-c-new","(constant:, superclass:, bodystmt:, location:, comments: [])",""],["new","SyntaxTree::Comma","SyntaxTree/Comma.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::Command","SyntaxTree/Command.html#method-c-new","(message:, arguments:, location:, comments: [])",""],["new","SyntaxTree::CommandCall","SyntaxTree/CommandCall.html#method-c-new","( receiver:, operator:, message:, arguments:, location:, comments: [] )",""],["new","SyntaxTree::Comment","SyntaxTree/Comment.html#method-c-new","(value:, inline:, location:)",""],["new","SyntaxTree::ConditionalFormatter","SyntaxTree/ConditionalFormatter.html#method-c-new","(keyword, node)",""],["new","SyntaxTree::ConditionalModFormatter","SyntaxTree/ConditionalModFormatter.html#method-c-new","(keyword, node)",""],["new","SyntaxTree::Const","SyntaxTree/Const.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::ConstPathField","SyntaxTree/ConstPathField.html#method-c-new","(parent:, constant:, location:, comments: [])",""],["new","SyntaxTree::ConstPathRef","SyntaxTree/ConstPathRef.html#method-c-new","(parent:, constant:, location:, comments: [])",""],["new","SyntaxTree::ConstRef","SyntaxTree/ConstRef.html#method-c-new","(constant:, location:, comments: [])",""],["new","SyntaxTree::Def","SyntaxTree/Def.html#method-c-new","(name:, params:, bodystmt:, location:, comments: [])",""],["new","SyntaxTree::DefEndless","SyntaxTree/DefEndless.html#method-c-new","( target:, operator:, name:, paren:, statement:, location:, comments: [] )",""],["new","SyntaxTree::Defined","SyntaxTree/Defined.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Defs","SyntaxTree/Defs.html#method-c-new","( target:, operator:, name:, params:, bodystmt:, location:, comments: [] )",""],["new","SyntaxTree::DoBlock","SyntaxTree/DoBlock.html#method-c-new","(keyword:, block_var:, bodystmt:, location:, comments: [])",""],["new","SyntaxTree::Dot2","SyntaxTree/Dot2.html#method-c-new","(left:, right:, location:, comments: [])",""],["new","SyntaxTree::Dot3","SyntaxTree/Dot3.html#method-c-new","(left:, right:, location:, comments: [])",""],["new","SyntaxTree::DotFormatter","SyntaxTree/DotFormatter.html#method-c-new","(operator, node)",""],["new","SyntaxTree::DynaSymbol","SyntaxTree/DynaSymbol.html#method-c-new","(parts:, quote:, location:, comments: [])",""],["new","SyntaxTree::ENDBlock","SyntaxTree/ENDBlock.html#method-c-new","(lbrace:, statements:, location:, comments: [])",""],["new","SyntaxTree::Else","SyntaxTree/Else.html#method-c-new","(keyword:, statements:, location:, comments: [])",""],["new","SyntaxTree::Elsif","SyntaxTree/Elsif.html#method-c-new","( predicate:, statements:, consequent:, location:, comments: [] )",""],["new","SyntaxTree::EmbDoc","SyntaxTree/EmbDoc.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::EmbExprBeg","SyntaxTree/EmbExprBeg.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::EmbExprEnd","SyntaxTree/EmbExprEnd.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::EmbVar","SyntaxTree/EmbVar.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::EndContent","SyntaxTree/EndContent.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Ensure","SyntaxTree/Ensure.html#method-c-new","(keyword:, statements:, location:, comments: [])",""],["new","SyntaxTree::ExcessedComma","SyntaxTree/ExcessedComma.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::FCall","SyntaxTree/FCall.html#method-c-new","(value:, arguments:, location:, comments: [])",""],["new","SyntaxTree::Field","SyntaxTree/Field.html#method-c-new","(parent:, operator:, name:, location:, comments: [])",""],["new","SyntaxTree::FloatLiteral","SyntaxTree/FloatLiteral.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::FlowControlFormatter","SyntaxTree/FlowControlFormatter.html#method-c-new","(keyword, node)",""],["new","SyntaxTree::FndPtn","SyntaxTree/FndPtn.html#method-c-new","(constant:, left:, values:, right:, location:, comments: [])",""],["new","SyntaxTree::For","SyntaxTree/For.html#method-c-new","(index:, collection:, statements:, location:, comments: [])",""],["new","SyntaxTree::Formatter","SyntaxTree/Formatter.html#method-c-new","( source, *args, quote: OPTIONS[:quote], trailing_comma: OPTIONS[:trailing_comma] )",""],["new","SyntaxTree::GVar","SyntaxTree/GVar.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::HashLiteral","SyntaxTree/HashLiteral.html#method-c-new","(lbrace:, assocs:, location:, comments: [])",""],["new","SyntaxTree::HashLiteral::EmptyWithCommentsFormatter","SyntaxTree/HashLiteral/EmptyWithCommentsFormatter.html#method-c-new","(lbrace)",""],["new","SyntaxTree::Heredoc","SyntaxTree/Heredoc.html#method-c-new","( beginning:, ending: nil, dedent: 0, parts: [], location:, comments: [] )",""],["new","SyntaxTree::HeredocBeg","SyntaxTree/HeredocBeg.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::HshPtn","SyntaxTree/HshPtn.html#method-c-new","(constant:, keywords:, keyword_rest:, location:, comments: [])",""],["new","SyntaxTree::HshPtn::KeywordFormatter","SyntaxTree/HshPtn/KeywordFormatter.html#method-c-new","(key, value)",""],["new","SyntaxTree::HshPtn::KeywordRestFormatter","SyntaxTree/HshPtn/KeywordRestFormatter.html#method-c-new","(keyword_rest)",""],["new","SyntaxTree::IVar","SyntaxTree/IVar.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Ident","SyntaxTree/Ident.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::If","SyntaxTree/If.html#method-c-new","( predicate:, statements:, consequent:, location:, comments: [] )",""],["new","SyntaxTree::IfMod","SyntaxTree/IfMod.html#method-c-new","(statement:, predicate:, location:, comments: [])",""],["new","SyntaxTree::IfOp","SyntaxTree/IfOp.html#method-c-new","(predicate:, truthy:, falsy:, location:, comments: [])",""],["new","SyntaxTree::Imaginary","SyntaxTree/Imaginary.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::In","SyntaxTree/In.html#method-c-new","(pattern:, statements:, consequent:, location:, comments: [])",""],["new","SyntaxTree::Int","SyntaxTree/Int.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Kw","SyntaxTree/Kw.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::KwRestParam","SyntaxTree/KwRestParam.html#method-c-new","(name:, location:, comments: [])",""],["new","SyntaxTree::LBrace","SyntaxTree/LBrace.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::LBracket","SyntaxTree/LBracket.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::LParen","SyntaxTree/LParen.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Label","SyntaxTree/Label.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::LabelEnd","SyntaxTree/LabelEnd.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::Lambda","SyntaxTree/Lambda.html#method-c-new","(params:, statements:, location:, comments: [])",""],["new","SyntaxTree::LambdaVar","SyntaxTree/LambdaVar.html#method-c-new","(params:, locals:, location:, comments: [])",""],["new","SyntaxTree::LanguageServer","SyntaxTree/LanguageServer.html#method-c-new","(input: $stdin, output: $stdout)",""],["new","SyntaxTree::LanguageServer::InlayHints","SyntaxTree/LanguageServer/InlayHints.html#method-c-new","()",""],["new","SyntaxTree::Location","SyntaxTree/Location.html#method-c-new","( start_line:, start_char:, start_column:, end_line:, end_char:, end_column: )",""],["new","SyntaxTree::LoopFormatter","SyntaxTree/LoopFormatter.html#method-c-new","(keyword, node, statements)",""],["new","SyntaxTree::MAssign","SyntaxTree/MAssign.html#method-c-new","(target:, value:, location:, comments: [])",""],["new","SyntaxTree::MLHS","SyntaxTree/MLHS.html#method-c-new","(parts:, comma: false, location:, comments: [])",""],["new","SyntaxTree::MLHSParen","SyntaxTree/MLHSParen.html#method-c-new","(contents:, comma: false, location:, comments: [])",""],["new","SyntaxTree::MRHS","SyntaxTree/MRHS.html#method-c-new","(parts:, location:, comments: [])",""],["new","SyntaxTree::MethodAddBlock","SyntaxTree/MethodAddBlock.html#method-c-new","(call:, block:, location:, comments: [])",""],["new","SyntaxTree::ModuleDeclaration","SyntaxTree/ModuleDeclaration.html#method-c-new","(constant:, bodystmt:, location:, comments: [])",""],["new","SyntaxTree::Next","SyntaxTree/Next.html#method-c-new","(arguments:, location:, comments: [])",""],["new","SyntaxTree::Not","SyntaxTree/Not.html#method-c-new","(statement:, parentheses:, location:, comments: [])",""],["new","SyntaxTree::Op","SyntaxTree/Op.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::OpAssign","SyntaxTree/OpAssign.html#method-c-new","(target:, operator:, value:, location:, comments: [])",""],["new","SyntaxTree::Params","SyntaxTree/Params.html#method-c-new","( requireds: [], optionals: [], rest: nil, posts: [], keywords: [], keyword_rest: nil, block: nil, location:, comments: [] )",""],["new","SyntaxTree::Params::KeywordFormatter","SyntaxTree/Params/KeywordFormatter.html#method-c-new","(name, value)",""],["new","SyntaxTree::Params::KeywordRestFormatter","SyntaxTree/Params/KeywordRestFormatter.html#method-c-new","(value)",""],["new","SyntaxTree::Params::OptionalFormatter","SyntaxTree/Params/OptionalFormatter.html#method-c-new","(name, value)",""],["new","SyntaxTree::Paren","SyntaxTree/Paren.html#method-c-new","(lparen:, contents:, location:, comments: [])",""],["new","SyntaxTree::Parser","SyntaxTree/Parser.html#method-c-new","(source, *)",""],["new","SyntaxTree::Parser::MultiByteString","SyntaxTree/Parser/MultiByteString.html#method-c-new","(start, line)",""],["new","SyntaxTree::Parser::ParseError","SyntaxTree/Parser/ParseError.html#method-c-new","(error, lineno, column)",""],["new","SyntaxTree::Parser::SingleByteString","SyntaxTree/Parser/SingleByteString.html#method-c-new","(start)",""],["new","SyntaxTree::Period","SyntaxTree/Period.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::PinnedBegin","SyntaxTree/PinnedBegin.html#method-c-new","(statement:, location:, comments: [])",""],["new","SyntaxTree::PinnedVarRef","SyntaxTree/PinnedVarRef.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Program","SyntaxTree/Program.html#method-c-new","(statements:, location:, comments: [])",""],["new","SyntaxTree::QSymbols","SyntaxTree/QSymbols.html#method-c-new","(beginning:, elements:, location:, comments: [])",""],["new","SyntaxTree::QSymbolsBeg","SyntaxTree/QSymbolsBeg.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::QWords","SyntaxTree/QWords.html#method-c-new","(beginning:, elements:, location:, comments: [])",""],["new","SyntaxTree::QWordsBeg","SyntaxTree/QWordsBeg.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::RAssign","SyntaxTree/RAssign.html#method-c-new","(value:, operator:, pattern:, location:, comments: [])",""],["new","SyntaxTree::RBrace","SyntaxTree/RBrace.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::RBracket","SyntaxTree/RBracket.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::RParen","SyntaxTree/RParen.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::Rake::CheckTask","SyntaxTree/Rake/CheckTask.html#method-c-new","( name = :\"stree:check\", source_files = ::Rake::FileList[\"lib/**/*.rb\"], plugins = [] )",""],["new","SyntaxTree::Rake::WriteTask","SyntaxTree/Rake/WriteTask.html#method-c-new","( name = :\"stree:write\", source_files = ::Rake::FileList[\"lib/**/*.rb\"], plugins = [] )",""],["new","SyntaxTree::RationalLiteral","SyntaxTree/RationalLiteral.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Redo","SyntaxTree/Redo.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::RegexpBeg","SyntaxTree/RegexpBeg.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::RegexpContent","SyntaxTree/RegexpContent.html#method-c-new","(beginning:, parts:, location:)",""],["new","SyntaxTree::RegexpEnd","SyntaxTree/RegexpEnd.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::RegexpLiteral","SyntaxTree/RegexpLiteral.html#method-c-new","(beginning:, ending:, parts:, location:, comments: [])",""],["new","SyntaxTree::Rescue","SyntaxTree/Rescue.html#method-c-new","( keyword:, exception:, statements:, consequent:, location:, comments: [] )",""],["new","SyntaxTree::RescueEx","SyntaxTree/RescueEx.html#method-c-new","(exceptions:, variable:, location:, comments: [])",""],["new","SyntaxTree::RescueMod","SyntaxTree/RescueMod.html#method-c-new","(statement:, value:, location:, comments: [])",""],["new","SyntaxTree::RestParam","SyntaxTree/RestParam.html#method-c-new","(name:, location:, comments: [])",""],["new","SyntaxTree::Retry","SyntaxTree/Retry.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Return","SyntaxTree/Return.html#method-c-new","(arguments:, location:, comments: [])",""],["new","SyntaxTree::Return0","SyntaxTree/Return0.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::SClass","SyntaxTree/SClass.html#method-c-new","(target:, bodystmt:, location:, comments: [])",""],["new","SyntaxTree::Statements","SyntaxTree/Statements.html#method-c-new","(parser, body:, location:, comments: [])",""],["new","SyntaxTree::StringConcat","SyntaxTree/StringConcat.html#method-c-new","(left:, right:, location:, comments: [])",""],["new","SyntaxTree::StringContent","SyntaxTree/StringContent.html#method-c-new","(parts:, location:)",""],["new","SyntaxTree::StringDVar","SyntaxTree/StringDVar.html#method-c-new","(variable:, location:, comments: [])",""],["new","SyntaxTree::StringEmbExpr","SyntaxTree/StringEmbExpr.html#method-c-new","(statements:, location:, comments: [])",""],["new","SyntaxTree::StringLiteral","SyntaxTree/StringLiteral.html#method-c-new","(parts:, quote:, location:, comments: [])",""],["new","SyntaxTree::Super","SyntaxTree/Super.html#method-c-new","(arguments:, location:, comments: [])",""],["new","SyntaxTree::SymBeg","SyntaxTree/SymBeg.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::SymbolContent","SyntaxTree/SymbolContent.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::SymbolLiteral","SyntaxTree/SymbolLiteral.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Symbols","SyntaxTree/Symbols.html#method-c-new","(beginning:, elements:, location:, comments: [])",""],["new","SyntaxTree::SymbolsBeg","SyntaxTree/SymbolsBeg.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::TLamBeg","SyntaxTree/TLamBeg.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::TLambda","SyntaxTree/TLambda.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::TStringBeg","SyntaxTree/TStringBeg.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::TStringContent","SyntaxTree/TStringContent.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::TStringEnd","SyntaxTree/TStringEnd.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::TopConstField","SyntaxTree/TopConstField.html#method-c-new","(constant:, location:, comments: [])",""],["new","SyntaxTree::TopConstRef","SyntaxTree/TopConstRef.html#method-c-new","(constant:, location:, comments: [])",""],["new","SyntaxTree::Unary","SyntaxTree/Unary.html#method-c-new","(operator:, statement:, location:, comments: [])",""],["new","SyntaxTree::Undef","SyntaxTree/Undef.html#method-c-new","(symbols:, location:, comments: [])",""],["new","SyntaxTree::Undef::UndefArgumentFormatter","SyntaxTree/Undef/UndefArgumentFormatter.html#method-c-new","(node)",""],["new","SyntaxTree::Unless","SyntaxTree/Unless.html#method-c-new","( predicate:, statements:, consequent:, location:, comments: [] )",""],["new","SyntaxTree::UnlessMod","SyntaxTree/UnlessMod.html#method-c-new","(statement:, predicate:, location:, comments: [])",""],["new","SyntaxTree::Until","SyntaxTree/Until.html#method-c-new","(predicate:, statements:, location:, comments: [])",""],["new","SyntaxTree::UntilMod","SyntaxTree/UntilMod.html#method-c-new","(statement:, predicate:, location:, comments: [])",""],["new","SyntaxTree::VCall","SyntaxTree/VCall.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::VarAlias","SyntaxTree/VarAlias.html#method-c-new","(left:, right:, location:, comments: [])",""],["new","SyntaxTree::VarField","SyntaxTree/VarField.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::VarRef","SyntaxTree/VarRef.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::Visitor::JSONVisitor","SyntaxTree/Visitor/JSONVisitor.html#method-c-new","()",""],["new","SyntaxTree::Visitor::MatchVisitor","SyntaxTree/Visitor/MatchVisitor.html#method-c-new","(q)",""],["new","SyntaxTree::Visitor::PrettyPrintVisitor","SyntaxTree/Visitor/PrettyPrintVisitor.html#method-c-new","(q)",""],["new","SyntaxTree::VoidStmt","SyntaxTree/VoidStmt.html#method-c-new","(location:, comments: [])",""],["new","SyntaxTree::When","SyntaxTree/When.html#method-c-new","( arguments:, statements:, consequent:, location:, comments: [] )",""],["new","SyntaxTree::While","SyntaxTree/While.html#method-c-new","(predicate:, statements:, location:, comments: [])",""],["new","SyntaxTree::WhileMod","SyntaxTree/WhileMod.html#method-c-new","(statement:, predicate:, location:, comments: [])",""],["new","SyntaxTree::Word","SyntaxTree/Word.html#method-c-new","(parts:, location:, comments: [])",""],["new","SyntaxTree::Words","SyntaxTree/Words.html#method-c-new","(beginning:, elements:, location:, comments: [])",""],["new","SyntaxTree::WordsBeg","SyntaxTree/WordsBeg.html#method-c-new","(value:, location:)",""],["new","SyntaxTree::XString","SyntaxTree/XString.html#method-c-new","(parts:, location:)",""],["new","SyntaxTree::XStringLiteral","SyntaxTree/XStringLiteral.html#method-c-new","(parts:, location:, comments: [])",""],["new","SyntaxTree::Yield","SyntaxTree/Yield.html#method-c-new","(arguments:, location:, comments: [])",""],["new","SyntaxTree::Yield0","SyntaxTree/Yield0.html#method-c-new","(value:, location:, comments: [])",""],["new","SyntaxTree::ZSuper","SyntaxTree/ZSuper.html#method-c-new","(value:, location:, comments: [])",""],["normalize","SyntaxTree::Quotes","SyntaxTree/Quotes.html#method-c-normalize","(content, enclosing)","<p>Escape and unescape single and double quotes as needed to be able to enclose <code>content</code> with <code>enclosing</code>. …\n"],["options","SyntaxTree::RegexpLiteral","SyntaxTree/RegexpLiteral.html#method-i-options","()",""],["parent","SyntaxTree::Formatter","SyntaxTree/Formatter.html#method-i-parent","()",""],["parents","SyntaxTree::Formatter","SyntaxTree/Formatter.html#method-i-parents","()",""],["parse","SyntaxTree","SyntaxTree.html#method-c-parse","(source)","<p>Parses the given source and returns the syntax tree.\n"],["pretty_print","SyntaxTree::Node","SyntaxTree/Node.html#method-i-pretty_print","(q)",""],["read","SyntaxTree","SyntaxTree.html#method-c-read","(filepath)","<p>Returns the source from the given filepath taking into account any potential magic encoding comments. …\n"],["red","SyntaxTree::CLI::Color","SyntaxTree/CLI/Color.html#method-c-red","(value)",""],["register_handler","SyntaxTree","SyntaxTree.html#method-c-register_handler","(extension, handler)","<p>This is a hook provided so that plugins can register themselves as the handler for a particular file …\n"],["run","SyntaxTree::CLI","SyntaxTree/CLI.html#method-c-run","(argv)","<p>Run the CLI over the given array of strings that make up the arguments passed to the invocation.\n"],["run","SyntaxTree::CLI::AST","SyntaxTree/CLI/AST.html#method-i-run","(handler, _filepath, source)",""],["run","SyntaxTree::CLI::Action","SyntaxTree/CLI/Action.html#method-i-run","(handler, filepath, source)",""],["run","SyntaxTree::CLI::Check","SyntaxTree/CLI/Check.html#method-i-run","(handler, filepath, source)",""],["run","SyntaxTree::CLI::Debug","SyntaxTree/CLI/Debug.html#method-i-run","(handler, filepath, source)",""],["run","SyntaxTree::CLI::Doc","SyntaxTree/CLI/Doc.html#method-i-run","(handler, _filepath, source)",""],["run","SyntaxTree::CLI::Format","SyntaxTree/CLI/Format.html#method-i-run","(handler, _filepath, source)",""],["run","SyntaxTree::CLI::Json","SyntaxTree/CLI/Json.html#method-i-run","(handler, _filepath, source)",""],["run","SyntaxTree::CLI::Match","SyntaxTree/CLI/Match.html#method-i-run","(handler, _filepath, source)",""],["run","SyntaxTree::CLI::Write","SyntaxTree/CLI/Write.html#method-i-run","(handler, filepath, source)",""],["run","SyntaxTree::LanguageServer","SyntaxTree/LanguageServer.html#method-i-run","()",""],["skip_indent?","SyntaxTree::AssignFormatting","SyntaxTree/AssignFormatting.html#method-c-skip_indent-3F","(value)",""],["success","SyntaxTree::CLI::Action","SyntaxTree/CLI/Action.html#method-i-success","()",""],["success","SyntaxTree::CLI::Check","SyntaxTree/CLI/Check.html#method-i-success","()",""],["success","SyntaxTree::CLI::Debug","SyntaxTree/CLI/Debug.html#method-i-success","()",""],["to","SyntaxTree::Location","SyntaxTree/Location.html#method-i-to","(other)",""],["to_json","SyntaxTree::Node","SyntaxTree/Node.html#method-i-to_json","(*opts)",""],["to_s","SyntaxTree::CLI::Color","SyntaxTree/CLI/Color.html#method-i-to_s","()",""],["token","SyntaxTree::Location","SyntaxTree/Location.html#method-c-token","(line:, char:, column:, size:)",""],["trailing!","SyntaxTree::Comment","SyntaxTree/Comment.html#method-i-trailing-21","()",""],["trailing?","SyntaxTree::Comment","SyntaxTree/Comment.html#method-i-trailing-3F","()",""],["visit","SyntaxTree::BasicVisitor","SyntaxTree/BasicVisitor.html#method-i-visit","(node)",""],["visit","SyntaxTree::LanguageServer::InlayHints","SyntaxTree/LanguageServer/InlayHints.html#method-i-visit","(node)",""],["visit","SyntaxTree::Visitor::MatchVisitor","SyntaxTree/Visitor/MatchVisitor.html#method-i-visit","(node)",""],["visit_BEGIN","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_BEGIN","(node)",""],["visit_CHAR","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_CHAR","(node)",""],["visit_END","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_END","(node)",""],["visit___end__","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit___end__","(node)",""],["visit_alias","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_alias","(node)",""],["visit_all","SyntaxTree::BasicVisitor","SyntaxTree/BasicVisitor.html#method-i-visit_all","(nodes)",""],["visit_aref","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_aref","(node)",""],["visit_aref_field","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_aref_field","(node)",""],["visit_arg_block","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_arg_block","(node)",""],["visit_arg_paren","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_arg_paren","(node)",""],["visit_arg_star","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_arg_star","(node)",""],["visit_args","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_args","(node)",""],["visit_args_forward","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_args_forward","(node)",""],["visit_array","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_array","(node)",""],["visit_aryptn","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_aryptn","(node)",""],["visit_assign","SyntaxTree::LanguageServer::InlayHints","SyntaxTree/LanguageServer/InlayHints.html#method-i-visit_assign","(node)","<p>Adds parentheses around assignments contained within the default values of parameters. For example,\n\n<pre>def ...</pre>\n"],["visit_assign","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_assign","(node)",""],["visit_assoc","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_assoc","(node)",""],["visit_assoc_splat","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_assoc_splat","(node)",""],["visit_backref","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_backref","(node)",""],["visit_backtick","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_backtick","(node)",""],["visit_bare_assoc_hash","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_bare_assoc_hash","(node)",""],["visit_begin","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_begin","(node)",""],["visit_binary","SyntaxTree::LanguageServer::InlayHints","SyntaxTree/LanguageServer/InlayHints.html#method-i-visit_binary","(node)","<p>Adds parentheses around binary expressions to make it clear which subexpression will be evaluated first. …\n"],["visit_binary","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_binary","(node)",""],["visit_binary","SyntaxTree::Visitor::PrettyPrintVisitor","SyntaxTree/Visitor/PrettyPrintVisitor.html#method-i-visit_binary","(node)","<p>This is here because we need to make sure the operator is cast to a string before we print it out.\n"],["visit_block_var","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_block_var","(node)",""],["visit_blockarg","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_blockarg","(node)",""],["visit_bodystmt","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_bodystmt","(node)",""],["visit_brace_block","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_brace_block","(node)",""],["visit_break","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_break","(node)",""],["visit_call","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_call","(node)",""],["visit_case","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_case","(node)",""],["visit_child_nodes","SyntaxTree::BasicVisitor","SyntaxTree/BasicVisitor.html#method-i-visit_child_nodes","(node)",""],["visit_class","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_class","(node)",""],["visit_comma","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_comma","(node)",""],["visit_command","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_command","(node)",""],["visit_command_call","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_command_call","(node)",""],["visit_comment","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_comment","(node)",""],["visit_const","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_const","(node)",""],["visit_const_path_field","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_const_path_field","(node)",""],["visit_const_path_ref","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_const_path_ref","(node)",""],["visit_const_ref","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_const_ref","(node)",""],["visit_cvar","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_cvar","(node)",""],["visit_def","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_def","(node)",""],["visit_def_endless","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_def_endless","(node)",""],["visit_defined","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_defined","(node)",""],["visit_defs","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_defs","(node)",""],["visit_do_block","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_do_block","(node)",""],["visit_dot2","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_dot2","(node)",""],["visit_dot3","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_dot3","(node)",""],["visit_dyna_symbol","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_dyna_symbol","(node)",""],["visit_else","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_else","(node)",""],["visit_elsif","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_elsif","(node)",""],["visit_embdoc","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_embdoc","(node)",""],["visit_embexpr_beg","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_embexpr_beg","(node)",""],["visit_embexpr_end","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_embexpr_end","(node)",""],["visit_embvar","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_embvar","(node)",""],["visit_ensure","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_ensure","(node)",""],["visit_excessed_comma","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_excessed_comma","(node)",""],["visit_fcall","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_fcall","(node)",""],["visit_field","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_field","(node)",""],["visit_float","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_float","(node)",""],["visit_fndptn","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_fndptn","(node)",""],["visit_for","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_for","(node)",""],["visit_gvar","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_gvar","(node)",""],["visit_hash","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_hash","(node)",""],["visit_heredoc","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_heredoc","(node)",""],["visit_heredoc_beg","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_heredoc_beg","(node)",""],["visit_hshptn","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_hshptn","(node)",""],["visit_ident","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_ident","(node)",""],["visit_if","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_if","(node)",""],["visit_if_mod","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_if_mod","(node)",""],["visit_if_op","SyntaxTree::LanguageServer::InlayHints","SyntaxTree/LanguageServer/InlayHints.html#method-i-visit_if_op","(node)","<p>Adds parentheses around ternary operators contained within certain expressions where it could be confusing …\n"],["visit_if_op","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_if_op","(node)",""],["visit_imaginary","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_imaginary","(node)",""],["visit_in","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_in","(node)",""],["visit_int","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_int","(node)",""],["visit_ivar","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_ivar","(node)",""],["visit_kw","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_kw","(node)",""],["visit_kwrest_param","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_kwrest_param","(node)",""],["visit_label","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_label","(node)",""],["visit_label","SyntaxTree::Visitor::PrettyPrintVisitor","SyntaxTree/Visitor/PrettyPrintVisitor.html#method-i-visit_label","(node)","<p>This is here to make it a little nicer to look at labels since they typically have their : at the end …\n"],["visit_label_end","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_label_end","(node)",""],["visit_lambda","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_lambda","(node)",""],["visit_lambda_var","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_lambda_var","(node)",""],["visit_lbrace","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_lbrace","(node)",""],["visit_lbracket","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_lbracket","(node)",""],["visit_lparen","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_lparen","(node)",""],["visit_massign","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_massign","(node)",""],["visit_method","SyntaxTree::BasicVisitor","SyntaxTree/BasicVisitor.html#method-c-visit_method","(method_name)","<p>This method is here to help folks write visitors.\n<p>It’s not always easy to ensure you’re writing …\n"],["visit_method_add_block","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_method_add_block","(node)",""],["visit_methods","SyntaxTree::BasicVisitor","SyntaxTree/BasicVisitor.html#method-c-visit_methods","()","<p>This is the list of all of the valid visit methods.\n"],["visit_mlhs","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_mlhs","(node)",""],["visit_mlhs_paren","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_mlhs_paren","(node)",""],["visit_module","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_module","(node)",""],["visit_mrhs","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_mrhs","(node)",""],["visit_next","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_next","(node)",""],["visit_not","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_not","(node)",""],["visit_op","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_op","(node)",""],["visit_opassign","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_opassign","(node)",""],["visit_params","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_params","(node)",""],["visit_paren","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_paren","(node)",""],["visit_period","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_period","(node)",""],["visit_pinned_begin","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_pinned_begin","(node)",""],["visit_pinned_var_ref","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_pinned_var_ref","(node)",""],["visit_program","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_program","(node)",""],["visit_qsymbols","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_qsymbols","(node)",""],["visit_qsymbols_beg","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_qsymbols_beg","(node)",""],["visit_qwords","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_qwords","(node)",""],["visit_qwords_beg","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_qwords_beg","(node)",""],["visit_rassign","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_rassign","(node)",""],["visit_rational","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_rational","(node)",""],["visit_rbrace","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_rbrace","(node)",""],["visit_rbracket","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_rbracket","(node)",""],["visit_redo","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_redo","(node)",""],["visit_regexp_beg","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_regexp_beg","(node)",""],["visit_regexp_content","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_regexp_content","(node)",""],["visit_regexp_end","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_regexp_end","(node)",""],["visit_regexp_literal","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_regexp_literal","(node)",""],["visit_rescue","SyntaxTree::LanguageServer::InlayHints","SyntaxTree/LanguageServer/InlayHints.html#method-i-visit_rescue","(node)","<p>Adds the implicitly rescued StandardError into a bare rescue clause. For example,\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">begin</span>\n<span class=\"ruby-keyword\">rescue</span>\n<span class=\"ruby-keyword\">end</span>\n</pre>\n<p>becomes …\n"],["visit_rescue","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_rescue","(node)",""],["visit_rescue_ex","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_rescue_ex","(node)",""],["visit_rescue_mod","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_rescue_mod","(node)",""],["visit_rest_param","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_rest_param","(node)",""],["visit_retry","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_retry","(node)",""],["visit_return","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_return","(node)",""],["visit_return0","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_return0","(node)",""],["visit_rparen","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_rparen","(node)",""],["visit_sclass","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_sclass","(node)",""],["visit_statements","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_statements","(node)",""],["visit_string_concat","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_string_concat","(node)",""],["visit_string_content","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_string_content","(node)",""],["visit_string_dvar","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_string_dvar","(node)",""],["visit_string_embexpr","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_string_embexpr","(node)",""],["visit_string_literal","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_string_literal","(node)",""],["visit_super","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_super","(node)",""],["visit_symbeg","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_symbeg","(node)",""],["visit_symbol_content","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_symbol_content","(node)",""],["visit_symbol_literal","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_symbol_literal","(node)",""],["visit_symbols","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_symbols","(node)",""],["visit_symbols_beg","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_symbols_beg","(node)",""],["visit_tlambda","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_tlambda","(node)",""],["visit_tlambeg","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_tlambeg","(node)",""],["visit_top_const_field","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_top_const_field","(node)",""],["visit_top_const_ref","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_top_const_ref","(node)",""],["visit_tstring_beg","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_tstring_beg","(node)",""],["visit_tstring_content","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_tstring_content","(node)",""],["visit_tstring_end","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_tstring_end","(node)",""],["visit_unary","SyntaxTree::LanguageServer::InlayHints","SyntaxTree/LanguageServer/InlayHints.html#method-i-visit_unary","(node)","<p>Adds parentheses around unary statements using the - operator that are contained within Binary nodes. …\n"],["visit_unary","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_unary","(node)",""],["visit_undef","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_undef","(node)",""],["visit_unless","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_unless","(node)",""],["visit_unless_mod","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_unless_mod","(node)",""],["visit_until","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_until","(node)",""],["visit_until_mod","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_until_mod","(node)",""],["visit_var_alias","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_var_alias","(node)",""],["visit_var_field","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_var_field","(node)",""],["visit_var_ref","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_var_ref","(node)",""],["visit_vcall","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_vcall","(node)",""],["visit_void_stmt","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_void_stmt","(node)",""],["visit_when","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_when","(node)",""],["visit_while","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_while","(node)",""],["visit_while_mod","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_while_mod","(node)",""],["visit_word","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_word","(node)",""],["visit_words","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_words","(node)",""],["visit_words_beg","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_words_beg","(node)",""],["visit_xstring","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_xstring","(node)",""],["visit_xstring_literal","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_xstring_literal","(node)",""],["visit_yield","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_yield","(node)",""],["visit_yield0","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_yield0","(node)",""],["visit_zsuper","SyntaxTree::Visitor::FieldVisitor","SyntaxTree/Visitor/FieldVisitor.html#method-i-visit_zsuper","(node)",""],["yellow","SyntaxTree::CLI::Color","SyntaxTree/CLI/Color.html#method-c-yellow","(value)",""],["CHANGELOG","","CHANGELOG_md.html","","<p>Changelog\n<p>All notable changes to this project will be documented in this file.\n<p>The format is based on  …\n"],["CODE_OF_CONDUCT","","CODE_OF_CONDUCT_md.html","","<p>Contributor Covenant Code of Conduct\n<p>Our Pledge\n<p>In the interest of fostering an open and welcoming environment, …\n"],["LICENSE","","LICENSE.html","","<p>The MIT License (MIT)\n<p>Copyright © 2021-present Kevin Newton\n<p>Permission is hereby granted, free of charge, …\n"],["README","","README_md.html","","<p>SyntaxTree\n<p><img src=\"https://github.com/ruby-syntax-tree/syntax_tree/actions/workflows/main.yml/badge.svg\"> …\n"]]}}